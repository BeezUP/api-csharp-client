/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsOptimisationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Optimise products
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="actionName"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        void Optimise (string storeId, string actionName, OptimiseRequest request);

        /// <summary>
        /// Optimise products
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="actionName"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OptimiseWithHttpInfo (string storeId, string actionName, OptimiseRequest request);
        /// <summary>
        /// Optimise products&#39;s category
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="catalogCategoryId">The category identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns></returns>
        void OptimiseByCategory (string storeId, string catalogCategoryId, string actionName, List<string> request = null);

        /// <summary>
        /// Optimise products&#39;s category
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="catalogCategoryId">The category identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OptimiseByCategoryWithHttpInfo (string storeId, string catalogCategoryId, string actionName, List<string> request = null);
        /// <summary>
        /// Optimise products&#39;s category
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="channelId">The channel identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <returns></returns>
        void OptimiseByChannel (string storeId, string channelId, string actionName);

        /// <summary>
        /// Optimise products&#39;s category
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="channelId">The channel identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OptimiseByChannelWithHttpInfo (string storeId, string channelId, string actionName);
        /// <summary>
        /// Optimise products
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="productId">The product identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns></returns>
        void OptimiseByProduct (string storeId, string productId, string actionName, List<string> request = null);

        /// <summary>
        /// Optimise products
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="productId">The product identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OptimiseByProductWithHttpInfo (string storeId, string productId, string actionName, List<string> request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Optimise products
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="actionName"></param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OptimiseAsync (string storeId, string actionName, OptimiseRequest request);

        /// <summary>
        /// Optimise products
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="actionName"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OptimiseAsyncWithHttpInfo (string storeId, string actionName, OptimiseRequest request);
        /// <summary>
        /// Optimise products&#39;s category
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="catalogCategoryId">The category identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OptimiseByCategoryAsync (string storeId, string catalogCategoryId, string actionName, List<string> request = null);

        /// <summary>
        /// Optimise products&#39;s category
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="catalogCategoryId">The category identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OptimiseByCategoryAsyncWithHttpInfo (string storeId, string catalogCategoryId, string actionName, List<string> request = null);
        /// <summary>
        /// Optimise products&#39;s category
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="channelId">The channel identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OptimiseByChannelAsync (string storeId, string channelId, string actionName);

        /// <summary>
        /// Optimise products&#39;s category
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="channelId">The channel identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OptimiseByChannelAsyncWithHttpInfo (string storeId, string channelId, string actionName);
        /// <summary>
        /// Optimise products
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="productId">The product identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OptimiseByProductAsync (string storeId, string productId, string actionName, List<string> request = null);

        /// <summary>
        /// Optimise products
        /// </summary>
        /// <remarks>
        /// /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="productId">The product identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OptimiseByProductAsyncWithHttpInfo (string storeId, string productId, string actionName, List<string> request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnalyticsOptimisationsApi : IAnalyticsOptimisationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsOptimisationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsOptimisationsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsOptimisationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyticsOptimisationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Optimise products /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="actionName"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        public void Optimise (string storeId, string actionName, OptimiseRequest request)
        {
             OptimiseWithHttpInfo(storeId, actionName, request);
        }

        /// <summary>
        /// Optimise products /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="actionName"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OptimiseWithHttpInfo (string storeId, string actionName, OptimiseRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsOptimisationsApi->Optimise");
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling AnalyticsOptimisationsApi->Optimise");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsOptimisationsApi->Optimise");

            var localVarPath = "/user/analytics/{storeId}/optimisations/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (actionName != null) localVarPathParams.Add("actionName", Configuration.ApiClient.ParameterToString(actionName)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Optimise", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Optimise products /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="actionName"></param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OptimiseAsync (string storeId, string actionName, OptimiseRequest request)
        {
             await OptimiseAsyncWithHttpInfo(storeId, actionName, request);

        }

        /// <summary>
        /// Optimise products /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="actionName"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OptimiseAsyncWithHttpInfo (string storeId, string actionName, OptimiseRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsOptimisationsApi->Optimise");
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling AnalyticsOptimisationsApi->Optimise");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsOptimisationsApi->Optimise");

            var localVarPath = "/user/analytics/{storeId}/optimisations/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (actionName != null) localVarPathParams.Add("actionName", Configuration.ApiClient.ParameterToString(actionName)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Optimise", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Optimise products&#39;s category /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="catalogCategoryId">The category identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns></returns>
        public void OptimiseByCategory (string storeId, string catalogCategoryId, string actionName, List<string> request = null)
        {
             OptimiseByCategoryWithHttpInfo(storeId, catalogCategoryId, actionName, request);
        }

        /// <summary>
        /// Optimise products&#39;s category /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="catalogCategoryId">The category identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OptimiseByCategoryWithHttpInfo (string storeId, string catalogCategoryId, string actionName, List<string> request = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsOptimisationsApi->OptimiseByCategory");
            // verify the required parameter 'catalogCategoryId' is set
            if (catalogCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'catalogCategoryId' when calling AnalyticsOptimisationsApi->OptimiseByCategory");
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling AnalyticsOptimisationsApi->OptimiseByCategory");

            var localVarPath = "/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (catalogCategoryId != null) localVarPathParams.Add("catalogCategoryId", Configuration.ApiClient.ParameterToString(catalogCategoryId)); // path parameter
            if (actionName != null) localVarPathParams.Add("actionName", Configuration.ApiClient.ParameterToString(actionName)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptimiseByCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Optimise products&#39;s category /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="catalogCategoryId">The category identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OptimiseByCategoryAsync (string storeId, string catalogCategoryId, string actionName, List<string> request = null)
        {
             await OptimiseByCategoryAsyncWithHttpInfo(storeId, catalogCategoryId, actionName, request);

        }

        /// <summary>
        /// Optimise products&#39;s category /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="catalogCategoryId">The category identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OptimiseByCategoryAsyncWithHttpInfo (string storeId, string catalogCategoryId, string actionName, List<string> request = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsOptimisationsApi->OptimiseByCategory");
            // verify the required parameter 'catalogCategoryId' is set
            if (catalogCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'catalogCategoryId' when calling AnalyticsOptimisationsApi->OptimiseByCategory");
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling AnalyticsOptimisationsApi->OptimiseByCategory");

            var localVarPath = "/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (catalogCategoryId != null) localVarPathParams.Add("catalogCategoryId", Configuration.ApiClient.ParameterToString(catalogCategoryId)); // path parameter
            if (actionName != null) localVarPathParams.Add("actionName", Configuration.ApiClient.ParameterToString(actionName)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptimiseByCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Optimise products&#39;s category /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="channelId">The channel identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <returns></returns>
        public void OptimiseByChannel (string storeId, string channelId, string actionName)
        {
             OptimiseByChannelWithHttpInfo(storeId, channelId, actionName);
        }

        /// <summary>
        /// Optimise products&#39;s category /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="channelId">The channel identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OptimiseByChannelWithHttpInfo (string storeId, string channelId, string actionName)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsOptimisationsApi->OptimiseByChannel");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling AnalyticsOptimisationsApi->OptimiseByChannel");
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling AnalyticsOptimisationsApi->OptimiseByChannel");

            var localVarPath = "/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (actionName != null) localVarPathParams.Add("actionName", Configuration.ApiClient.ParameterToString(actionName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptimiseByChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Optimise products&#39;s category /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="channelId">The channel identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OptimiseByChannelAsync (string storeId, string channelId, string actionName)
        {
             await OptimiseByChannelAsyncWithHttpInfo(storeId, channelId, actionName);

        }

        /// <summary>
        /// Optimise products&#39;s category /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="channelId">The channel identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OptimiseByChannelAsyncWithHttpInfo (string storeId, string channelId, string actionName)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsOptimisationsApi->OptimiseByChannel");
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new ApiException(400, "Missing required parameter 'channelId' when calling AnalyticsOptimisationsApi->OptimiseByChannel");
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling AnalyticsOptimisationsApi->OptimiseByChannel");

            var localVarPath = "/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (channelId != null) localVarPathParams.Add("channelId", Configuration.ApiClient.ParameterToString(channelId)); // path parameter
            if (actionName != null) localVarPathParams.Add("actionName", Configuration.ApiClient.ParameterToString(actionName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptimiseByChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Optimise products /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="productId">The product identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns></returns>
        public void OptimiseByProduct (string storeId, string productId, string actionName, List<string> request = null)
        {
             OptimiseByProductWithHttpInfo(storeId, productId, actionName, request);
        }

        /// <summary>
        /// Optimise products /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="productId">The product identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OptimiseByProductWithHttpInfo (string storeId, string productId, string actionName, List<string> request = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsOptimisationsApi->OptimiseByProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling AnalyticsOptimisationsApi->OptimiseByProduct");
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling AnalyticsOptimisationsApi->OptimiseByProduct");

            var localVarPath = "/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (actionName != null) localVarPathParams.Add("actionName", Configuration.ApiClient.ParameterToString(actionName)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptimiseByProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Optimise products /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="productId">The product identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OptimiseByProductAsync (string storeId, string productId, string actionName, List<string> request = null)
        {
             await OptimiseByProductAsyncWithHttpInfo(storeId, productId, actionName, request);

        }

        /// <summary>
        /// Optimise products /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="productId">The product identifier concerned by this optimisation</param>
        /// <param name="actionName"></param>
        /// <param name="request">The channel identifier list concerned by this optimisation (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OptimiseByProductAsyncWithHttpInfo (string storeId, string productId, string actionName, List<string> request = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsOptimisationsApi->OptimiseByProduct");
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling AnalyticsOptimisationsApi->OptimiseByProduct");
            // verify the required parameter 'actionName' is set
            if (actionName == null)
                throw new ApiException(400, "Missing required parameter 'actionName' when calling AnalyticsOptimisationsApi->OptimiseByProduct");

            var localVarPath = "/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (productId != null) localVarPathParams.Add("productId", Configuration.ApiClient.ParameterToString(productId)); // path parameter
            if (actionName != null) localVarPathParams.Add("actionName", Configuration.ApiClient.ParameterToString(actionName)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OptimiseByProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
