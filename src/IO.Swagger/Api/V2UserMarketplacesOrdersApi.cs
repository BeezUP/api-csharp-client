/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2UserMarketplacesOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns></returns>
        void ChangeOrder (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null);

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null);
        /// <summary>
        /// Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>BatchOrderOperationResponse</returns>
        BatchOrderOperationResponse ChangeOrderList (string changeOrderType, string userName, ChangeOrderListRequest request, bool? testMode = null);

        /// <summary>
        /// Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>ApiResponse of BatchOrderOperationResponse</returns>
        ApiResponse<BatchOrderOperationResponse> ChangeOrderListWithHttpInfo (string changeOrderType, string userName, ChangeOrderListRequest request, bool? testMode = null);
        /// <summary>
        /// Clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns></returns>
        void ClearMerchantOrderInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);

        /// <summary>
        /// Clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearMerchantOrderInfoWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);
        /// <summary>
        /// Send a batch of operations to clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>BatchOrderOperationResponse</returns>
        BatchOrderOperationResponse ClearMerchantOrderInfoList (ClearMerchantOrderInfoListRequest request);

        /// <summary>
        /// Send a batch of operations to clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BatchOrderOperationResponse</returns>
        ApiResponse<BatchOrderOperationResponse> ClearMerchantOrderInfoListWithHttpInfo (ClearMerchantOrderInfoListRequest request);
        /// <summary>
        /// Configure new or existing automatic Order status transition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns></returns>
        void ConfigureAutomaticTransitions (SaveAutomaticTransitionRequest request);

        /// <summary>
        /// Configure new or existing automatic Order status transition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConfigureAutomaticTransitionsWithHttpInfo (SaveAutomaticTransitionRequest request);
        /// <summary>
        /// Request a new Order report exportation to be generated
        /// </summary>
        /// <remarks>
        /// A new file will be generated containing a summary of all the Orders matching the requested filter settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The type of the file to export</param>
        /// <param name="request"></param>
        /// <returns></returns>
        void ExportOrders (string format, ExportOrderListRequest request);

        /// <summary>
        /// Request a new Order report exportation to be generated
        /// </summary>
        /// <remarks>
        /// A new file will be generated containing a summary of all the Orders matching the requested filter settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The type of the file to export</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ExportOrdersWithHttpInfo (string format, ExportOrderListRequest request);
        /// <summary>
        /// Get list of configured automatic Order status transitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AutomaticTransitionInfos</returns>
        AutomaticTransitionInfos GetAutomaticTransitions ();

        /// <summary>
        /// Get list of configured automatic Order status transitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AutomaticTransitionInfos</returns>
        ApiResponse<AutomaticTransitionInfos> GetAutomaticTransitionsWithHttpInfo ();
        /// <summary>
        /// Get current synchronization status between your marketplaces and BeezUP accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountSynchronizations</returns>
        AccountSynchronizations GetMarketplaceAccountsSynchronization ();

        /// <summary>
        /// Get current synchronization status between your marketplaces and BeezUP accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountSynchronizations</returns>
        ApiResponse<AccountSynchronizations> GetMarketplaceAccountsSynchronizationWithHttpInfo ();
        /// <summary>
        /// Get full Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Order</returns>
        Order GetOrder (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string ifNoneMatch = null);

        /// <summary>
        /// Get full Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string ifNoneMatch = null);
        /// <summary>
        /// Get a paginated list of Order report exportations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">The page number you want to get</param>
        /// <param name="pageSize">The count of Order report exportations you want to get</param>
        /// <returns>OrderExportations</returns>
        OrderExportations GetOrderExportations (int? pageNumber, int? pageSize);

        /// <summary>
        /// Get a paginated list of Order report exportations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">The page number you want to get</param>
        /// <param name="pageSize">The count of Order report exportations you want to get</param>
        /// <returns>ApiResponse of OrderExportations</returns>
        ApiResponse<OrderExportations> GetOrderExportationsWithHttpInfo (int? pageNumber, int? pageSize);
        /// <summary>
        /// Get an Order&#39;s harvest and change history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>OrderHistory</returns>
        OrderHistory GetOrderHistory (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);

        /// <summary>
        /// Get an Order&#39;s harvest and change history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of OrderHistory</returns>
        ApiResponse<OrderHistory> GetOrderHistoryWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);
        /// <summary>
        /// Get a paginated list of all Orders with all Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size</param>
        /// <param name="request"> (optional)</param>
        /// <returns>OrderListFull</returns>
        OrderListFull GetOrderListFull (List<string> acceptEncoding, OrderListRequest request = null);

        /// <summary>
        /// Get a paginated list of all Orders with all Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of OrderListFull</returns>
        ApiResponse<OrderListFull> GetOrderListFullWithHttpInfo (List<string> acceptEncoding, OrderListRequest request = null);
        /// <summary>
        /// Get a paginated list of all Orders without details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>OrderListLight</returns>
        OrderListLight GetOrderListLight (OrderListRequest request = null);

        /// <summary>
        /// Get a paginated list of all Orders without details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of OrderListLight</returns>
        ApiResponse<OrderListLight> GetOrderListLightWithHttpInfo (OrderListRequest request = null);
        /// <summary>
        /// Send harvest request to all your marketplaces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void HarvestAll ();

        /// <summary>
        /// Send harvest request to all your marketplaces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HarvestAllWithHttpInfo ();
        /// <summary>
        /// Send harvest request for a single Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns></returns>
        void HarvestOrder (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);

        /// <summary>
        /// Send harvest request for a single Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HarvestOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);
        /// <summary>
        /// Set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        void SetMerchantOrderInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, SetMerchantOrderInfoRequest request);

        /// <summary>
        /// Set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMerchantOrderInfoWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, SetMerchantOrderInfoRequest request);
        /// <summary>
        /// Send a batch of operations to set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>BatchOrderOperationResponse</returns>
        BatchOrderOperationResponse SetMerchantOrderInfoList (SetMerchantOrderInfoListRequest request);

        /// <summary>
        /// Send a batch of operations to set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BatchOrderOperationResponse</returns>
        ApiResponse<BatchOrderOperationResponse> SetMerchantOrderInfoListWithHttpInfo (SetMerchantOrderInfoListRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeOrderAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null);

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null);
        /// <summary>
        /// Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of BatchOrderOperationResponse</returns>
        System.Threading.Tasks.Task<BatchOrderOperationResponse> ChangeOrderListAsync (string changeOrderType, string userName, ChangeOrderListRequest request, bool? testMode = null);

        /// <summary>
        /// Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (BatchOrderOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchOrderOperationResponse>> ChangeOrderListAsyncWithHttpInfo (string changeOrderType, string userName, ChangeOrderListRequest request, bool? testMode = null);
        /// <summary>
        /// Clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearMerchantOrderInfoAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);

        /// <summary>
        /// Clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearMerchantOrderInfoAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);
        /// <summary>
        /// Send a batch of operations to clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of BatchOrderOperationResponse</returns>
        System.Threading.Tasks.Task<BatchOrderOperationResponse> ClearMerchantOrderInfoListAsync (ClearMerchantOrderInfoListRequest request);

        /// <summary>
        /// Send a batch of operations to clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BatchOrderOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchOrderOperationResponse>> ClearMerchantOrderInfoListAsyncWithHttpInfo (ClearMerchantOrderInfoListRequest request);
        /// <summary>
        /// Configure new or existing automatic Order status transition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConfigureAutomaticTransitionsAsync (SaveAutomaticTransitionRequest request);

        /// <summary>
        /// Configure new or existing automatic Order status transition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConfigureAutomaticTransitionsAsyncWithHttpInfo (SaveAutomaticTransitionRequest request);
        /// <summary>
        /// Request a new Order report exportation to be generated
        /// </summary>
        /// <remarks>
        /// A new file will be generated containing a summary of all the Orders matching the requested filter settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The type of the file to export</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ExportOrdersAsync (string format, ExportOrderListRequest request);

        /// <summary>
        /// Request a new Order report exportation to be generated
        /// </summary>
        /// <remarks>
        /// A new file will be generated containing a summary of all the Orders matching the requested filter settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The type of the file to export</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportOrdersAsyncWithHttpInfo (string format, ExportOrderListRequest request);
        /// <summary>
        /// Get list of configured automatic Order status transitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AutomaticTransitionInfos</returns>
        System.Threading.Tasks.Task<AutomaticTransitionInfos> GetAutomaticTransitionsAsync ();

        /// <summary>
        /// Get list of configured automatic Order status transitions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AutomaticTransitionInfos)</returns>
        System.Threading.Tasks.Task<ApiResponse<AutomaticTransitionInfos>> GetAutomaticTransitionsAsyncWithHttpInfo ();
        /// <summary>
        /// Get current synchronization status between your marketplaces and BeezUP accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountSynchronizations</returns>
        System.Threading.Tasks.Task<AccountSynchronizations> GetMarketplaceAccountsSynchronizationAsync ();

        /// <summary>
        /// Get current synchronization status between your marketplaces and BeezUP accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountSynchronizations)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountSynchronizations>> GetMarketplaceAccountsSynchronizationAsyncWithHttpInfo ();
        /// <summary>
        /// Get full Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> GetOrderAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string ifNoneMatch = null);

        /// <summary>
        /// Get full Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string ifNoneMatch = null);
        /// <summary>
        /// Get a paginated list of Order report exportations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">The page number you want to get</param>
        /// <param name="pageSize">The count of Order report exportations you want to get</param>
        /// <returns>Task of OrderExportations</returns>
        System.Threading.Tasks.Task<OrderExportations> GetOrderExportationsAsync (int? pageNumber, int? pageSize);

        /// <summary>
        /// Get a paginated list of Order report exportations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">The page number you want to get</param>
        /// <param name="pageSize">The count of Order report exportations you want to get</param>
        /// <returns>Task of ApiResponse (OrderExportations)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExportations>> GetOrderExportationsAsyncWithHttpInfo (int? pageNumber, int? pageSize);
        /// <summary>
        /// Get an Order&#39;s harvest and change history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of OrderHistory</returns>
        System.Threading.Tasks.Task<OrderHistory> GetOrderHistoryAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);

        /// <summary>
        /// Get an Order&#39;s harvest and change history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse (OrderHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderHistory>> GetOrderHistoryAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);
        /// <summary>
        /// Get a paginated list of all Orders with all Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of OrderListFull</returns>
        System.Threading.Tasks.Task<OrderListFull> GetOrderListFullAsync (List<string> acceptEncoding, OrderListRequest request = null);

        /// <summary>
        /// Get a paginated list of all Orders with all Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderListFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderListFull>> GetOrderListFullAsyncWithHttpInfo (List<string> acceptEncoding, OrderListRequest request = null);
        /// <summary>
        /// Get a paginated list of all Orders without details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of OrderListLight</returns>
        System.Threading.Tasks.Task<OrderListLight> GetOrderListLightAsync (OrderListRequest request = null);

        /// <summary>
        /// Get a paginated list of all Orders without details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderListLight)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderListLight>> GetOrderListLightAsyncWithHttpInfo (OrderListRequest request = null);
        /// <summary>
        /// Send harvest request to all your marketplaces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HarvestAllAsync ();

        /// <summary>
        /// Send harvest request to all your marketplaces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HarvestAllAsyncWithHttpInfo ();
        /// <summary>
        /// Send harvest request for a single Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HarvestOrderAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);

        /// <summary>
        /// Send harvest request for a single Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HarvestOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId);
        /// <summary>
        /// Set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMerchantOrderInfoAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, SetMerchantOrderInfoRequest request);

        /// <summary>
        /// Set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMerchantOrderInfoAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, SetMerchantOrderInfoRequest request);
        /// <summary>
        /// Send a batch of operations to set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of BatchOrderOperationResponse</returns>
        System.Threading.Tasks.Task<BatchOrderOperationResponse> SetMerchantOrderInfoListAsync (SetMerchantOrderInfoListRequest request);

        /// <summary>
        /// Send a batch of operations to set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// The purpose of this operation is to reduce the amount of request to the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BatchOrderOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchOrderOperationResponse>> SetMerchantOrderInfoListAsyncWithHttpInfo (SetMerchantOrderInfoListRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V2UserMarketplacesOrdersApi : IV2UserMarketplacesOrdersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V2UserMarketplacesOrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public V2UserMarketplacesOrdersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2UserMarketplacesOrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V2UserMarketplacesOrdersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns></returns>
        public void ChangeOrder (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null)
        {
             ChangeOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode);
        }

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChangeOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'changeOrderType' is set
            if (changeOrderType == null)
                throw new ApiException(400, "Missing required parameter 'changeOrderType' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new ApiException(400, "Missing required parameter 'ifMatch' when calling V2UserMarketplacesOrdersApi->ChangeOrder");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (changeOrderType != null) localVarPathParams.Add("changeOrderType", Configuration.ApiClient.ParameterToString(changeOrderType)); // path parameter
            if (userName != null) localVarQueryParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // query parameter
            if (testMode != null) localVarQueryParams.Add("testMode", Configuration.ApiClient.ParameterToString(testMode)); // query parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeOrderAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null)
        {
             await ChangeOrderAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode);

        }

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChangeOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'changeOrderType' is set
            if (changeOrderType == null)
                throw new ApiException(400, "Missing required parameter 'changeOrderType' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ChangeOrder");
            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new ApiException(400, "Missing required parameter 'ifMatch' when calling V2UserMarketplacesOrdersApi->ChangeOrder");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (changeOrderType != null) localVarPathParams.Add("changeOrderType", Configuration.ApiClient.ParameterToString(changeOrderType)); // path parameter
            if (userName != null) localVarQueryParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // query parameter
            if (testMode != null) localVarQueryParams.Add("testMode", Configuration.ApiClient.ParameterToString(testMode)); // query parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send a batch of operations to change your marketplace Order information (accept, ship, etc.) The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>BatchOrderOperationResponse</returns>
        public BatchOrderOperationResponse ChangeOrderList (string changeOrderType, string userName, ChangeOrderListRequest request, bool? testMode = null)
        {
             ApiResponse<BatchOrderOperationResponse> localVarResponse = ChangeOrderListWithHttpInfo(changeOrderType, userName, request, testMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a batch of operations to change your marketplace Order information (accept, ship, etc.) The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>ApiResponse of BatchOrderOperationResponse</returns>
        public ApiResponse< BatchOrderOperationResponse > ChangeOrderListWithHttpInfo (string changeOrderType, string userName, ChangeOrderListRequest request, bool? testMode = null)
        {
            // verify the required parameter 'changeOrderType' is set
            if (changeOrderType == null)
                throw new ApiException(400, "Missing required parameter 'changeOrderType' when calling V2UserMarketplacesOrdersApi->ChangeOrderList");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling V2UserMarketplacesOrdersApi->ChangeOrderList");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ChangeOrderList");

            var localVarPath = "/v2/user/marketplaces/orders/batches/changeOrders/{changeOrderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (changeOrderType != null) localVarPathParams.Add("changeOrderType", Configuration.ApiClient.ParameterToString(changeOrderType)); // path parameter
            if (userName != null) localVarQueryParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // query parameter
            if (testMode != null) localVarQueryParams.Add("testMode", Configuration.ApiClient.ParameterToString(testMode)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeOrderList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchOrderOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchOrderOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchOrderOperationResponse)));
            
        }

        /// <summary>
        /// Send a batch of operations to change your marketplace Order information (accept, ship, etc.) The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of BatchOrderOperationResponse</returns>
        public async System.Threading.Tasks.Task<BatchOrderOperationResponse> ChangeOrderListAsync (string changeOrderType, string userName, ChangeOrderListRequest request, bool? testMode = null)
        {
             ApiResponse<BatchOrderOperationResponse> localVarResponse = await ChangeOrderListAsyncWithHttpInfo(changeOrderType, userName, request, testMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a batch of operations to change your marketplace Order information (accept, ship, etc.) The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (BatchOrderOperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchOrderOperationResponse>> ChangeOrderListAsyncWithHttpInfo (string changeOrderType, string userName, ChangeOrderListRequest request, bool? testMode = null)
        {
            // verify the required parameter 'changeOrderType' is set
            if (changeOrderType == null)
                throw new ApiException(400, "Missing required parameter 'changeOrderType' when calling V2UserMarketplacesOrdersApi->ChangeOrderList");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling V2UserMarketplacesOrdersApi->ChangeOrderList");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ChangeOrderList");

            var localVarPath = "/v2/user/marketplaces/orders/batches/changeOrders/{changeOrderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (changeOrderType != null) localVarPathParams.Add("changeOrderType", Configuration.ApiClient.ParameterToString(changeOrderType)); // path parameter
            if (userName != null) localVarQueryParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // query parameter
            if (testMode != null) localVarQueryParams.Add("testMode", Configuration.ApiClient.ParameterToString(testMode)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeOrderList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchOrderOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchOrderOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchOrderOperationResponse)));
            
        }

        /// <summary>
        /// Clear an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns></returns>
        public void ClearMerchantOrderInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
             ClearMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
        }

        /// <summary>
        /// Clear an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClearMerchantOrderInfoWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->ClearMerchantOrderInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->ClearMerchantOrderInfo");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->ClearMerchantOrderInfo");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearMerchantOrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearMerchantOrderInfoAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
             await ClearMerchantOrderInfoAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);

        }

        /// <summary>
        /// Clear an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClearMerchantOrderInfoAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->ClearMerchantOrderInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->ClearMerchantOrderInfo");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->ClearMerchantOrderInfo");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearMerchantOrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send a batch of operations to clear an Order&#39;s merchant information The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>BatchOrderOperationResponse</returns>
        public BatchOrderOperationResponse ClearMerchantOrderInfoList (ClearMerchantOrderInfoListRequest request)
        {
             ApiResponse<BatchOrderOperationResponse> localVarResponse = ClearMerchantOrderInfoListWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a batch of operations to clear an Order&#39;s merchant information The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BatchOrderOperationResponse</returns>
        public ApiResponse< BatchOrderOperationResponse > ClearMerchantOrderInfoListWithHttpInfo (ClearMerchantOrderInfoListRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ClearMerchantOrderInfoList");

            var localVarPath = "/v2/user/marketplaces/orders/batches/clearMerchantOrderInfos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearMerchantOrderInfoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchOrderOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchOrderOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchOrderOperationResponse)));
            
        }

        /// <summary>
        /// Send a batch of operations to clear an Order&#39;s merchant information The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of BatchOrderOperationResponse</returns>
        public async System.Threading.Tasks.Task<BatchOrderOperationResponse> ClearMerchantOrderInfoListAsync (ClearMerchantOrderInfoListRequest request)
        {
             ApiResponse<BatchOrderOperationResponse> localVarResponse = await ClearMerchantOrderInfoListAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a batch of operations to clear an Order&#39;s merchant information The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BatchOrderOperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchOrderOperationResponse>> ClearMerchantOrderInfoListAsyncWithHttpInfo (ClearMerchantOrderInfoListRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ClearMerchantOrderInfoList");

            var localVarPath = "/v2/user/marketplaces/orders/batches/clearMerchantOrderInfos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearMerchantOrderInfoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchOrderOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchOrderOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchOrderOperationResponse)));
            
        }

        /// <summary>
        /// Configure new or existing automatic Order status transition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns></returns>
        public void ConfigureAutomaticTransitions (SaveAutomaticTransitionRequest request)
        {
             ConfigureAutomaticTransitionsWithHttpInfo(request);
        }

        /// <summary>
        /// Configure new or existing automatic Order status transition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConfigureAutomaticTransitionsWithHttpInfo (SaveAutomaticTransitionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ConfigureAutomaticTransitions");

            var localVarPath = "/v2/user/marketplaces/orders/automaticTransitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureAutomaticTransitions", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Configure new or existing automatic Order status transition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConfigureAutomaticTransitionsAsync (SaveAutomaticTransitionRequest request)
        {
             await ConfigureAutomaticTransitionsAsyncWithHttpInfo(request);

        }

        /// <summary>
        /// Configure new or existing automatic Order status transition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConfigureAutomaticTransitionsAsyncWithHttpInfo (SaveAutomaticTransitionRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ConfigureAutomaticTransitions");

            var localVarPath = "/v2/user/marketplaces/orders/automaticTransitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureAutomaticTransitions", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Request a new Order report exportation to be generated A new file will be generated containing a summary of all the Orders matching the requested filter settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The type of the file to export</param>
        /// <param name="request"></param>
        /// <returns></returns>
        public void ExportOrders (string format, ExportOrderListRequest request)
        {
             ExportOrdersWithHttpInfo(format, request);
        }

        /// <summary>
        /// Request a new Order report exportation to be generated A new file will be generated containing a summary of all the Orders matching the requested filter settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The type of the file to export</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ExportOrdersWithHttpInfo (string format, ExportOrderListRequest request)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling V2UserMarketplacesOrdersApi->ExportOrders");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ExportOrders");

            var localVarPath = "/v2/user/marketplaces/orders/exportations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Request a new Order report exportation to be generated A new file will be generated containing a summary of all the Orders matching the requested filter settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The type of the file to export</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ExportOrdersAsync (string format, ExportOrderListRequest request)
        {
             await ExportOrdersAsyncWithHttpInfo(format, request);

        }

        /// <summary>
        /// Request a new Order report exportation to be generated A new file will be generated containing a summary of all the Orders matching the requested filter settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">The type of the file to export</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExportOrdersAsyncWithHttpInfo (string format, ExportOrderListRequest request)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling V2UserMarketplacesOrdersApi->ExportOrders");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->ExportOrders");

            var localVarPath = "/v2/user/marketplaces/orders/exportations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get list of configured automatic Order status transitions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AutomaticTransitionInfos</returns>
        public AutomaticTransitionInfos GetAutomaticTransitions ()
        {
             ApiResponse<AutomaticTransitionInfos> localVarResponse = GetAutomaticTransitionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of configured automatic Order status transitions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AutomaticTransitionInfos</returns>
        public ApiResponse< AutomaticTransitionInfos > GetAutomaticTransitionsWithHttpInfo ()
        {

            var localVarPath = "/v2/user/marketplaces/orders/automaticTransitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutomaticTransitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticTransitionInfos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutomaticTransitionInfos) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticTransitionInfos)));
            
        }

        /// <summary>
        /// Get list of configured automatic Order status transitions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AutomaticTransitionInfos</returns>
        public async System.Threading.Tasks.Task<AutomaticTransitionInfos> GetAutomaticTransitionsAsync ()
        {
             ApiResponse<AutomaticTransitionInfos> localVarResponse = await GetAutomaticTransitionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of configured automatic Order status transitions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AutomaticTransitionInfos)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AutomaticTransitionInfos>> GetAutomaticTransitionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/user/marketplaces/orders/automaticTransitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAutomaticTransitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AutomaticTransitionInfos>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AutomaticTransitionInfos) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AutomaticTransitionInfos)));
            
        }

        /// <summary>
        /// Get current synchronization status between your marketplaces and BeezUP accounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AccountSynchronizations</returns>
        public AccountSynchronizations GetMarketplaceAccountsSynchronization ()
        {
             ApiResponse<AccountSynchronizations> localVarResponse = GetMarketplaceAccountsSynchronizationWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current synchronization status between your marketplaces and BeezUP accounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AccountSynchronizations</returns>
        public ApiResponse< AccountSynchronizations > GetMarketplaceAccountsSynchronizationWithHttpInfo ()
        {

            var localVarPath = "/v2/user/marketplaces/orders/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketplaceAccountsSynchronization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountSynchronizations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountSynchronizations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountSynchronizations)));
            
        }

        /// <summary>
        /// Get current synchronization status between your marketplaces and BeezUP accounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AccountSynchronizations</returns>
        public async System.Threading.Tasks.Task<AccountSynchronizations> GetMarketplaceAccountsSynchronizationAsync ()
        {
             ApiResponse<AccountSynchronizations> localVarResponse = await GetMarketplaceAccountsSynchronizationAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current synchronization status between your marketplaces and BeezUP accounts 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AccountSynchronizations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountSynchronizations>> GetMarketplaceAccountsSynchronizationAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/user/marketplaces/orders/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketplaceAccountsSynchronization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountSynchronizations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountSynchronizations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountSynchronizations)));
            
        }

        /// <summary>
        /// Get full Order and Order Item(s) properties 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Order</returns>
        public Order GetOrder (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string ifNoneMatch = null)
        {
             ApiResponse<Order> localVarResponse = GetOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get full Order and Order Item(s) properties 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > GetOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string ifNoneMatch = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->GetOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->GetOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->GetOrder");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
            
        }

        /// <summary>
        /// Get full Order and Order Item(s) properties 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> GetOrderAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string ifNoneMatch = null)
        {
             ApiResponse<Order> localVarResponse = await GetOrderAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get full Order and Order Item(s) properties 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, string ifNoneMatch = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->GetOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->GetOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->GetOrder");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
            
        }

        /// <summary>
        /// Get a paginated list of Order report exportations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">The page number you want to get</param>
        /// <param name="pageSize">The count of Order report exportations you want to get</param>
        /// <returns>OrderExportations</returns>
        public OrderExportations GetOrderExportations (int? pageNumber, int? pageSize)
        {
             ApiResponse<OrderExportations> localVarResponse = GetOrderExportationsWithHttpInfo(pageNumber, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a paginated list of Order report exportations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">The page number you want to get</param>
        /// <param name="pageSize">The count of Order report exportations you want to get</param>
        /// <returns>ApiResponse of OrderExportations</returns>
        public ApiResponse< OrderExportations > GetOrderExportationsWithHttpInfo (int? pageNumber, int? pageSize)
        {
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling V2UserMarketplacesOrdersApi->GetOrderExportations");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling V2UserMarketplacesOrdersApi->GetOrderExportations");

            var localVarPath = "/v2/user/marketplaces/orders/exportations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderExportations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderExportations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderExportations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderExportations)));
            
        }

        /// <summary>
        /// Get a paginated list of Order report exportations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">The page number you want to get</param>
        /// <param name="pageSize">The count of Order report exportations you want to get</param>
        /// <returns>Task of OrderExportations</returns>
        public async System.Threading.Tasks.Task<OrderExportations> GetOrderExportationsAsync (int? pageNumber, int? pageSize)
        {
             ApiResponse<OrderExportations> localVarResponse = await GetOrderExportationsAsyncWithHttpInfo(pageNumber, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a paginated list of Order report exportations 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber">The page number you want to get</param>
        /// <param name="pageSize">The count of Order report exportations you want to get</param>
        /// <returns>Task of ApiResponse (OrderExportations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderExportations>> GetOrderExportationsAsyncWithHttpInfo (int? pageNumber, int? pageSize)
        {
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling V2UserMarketplacesOrdersApi->GetOrderExportations");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling V2UserMarketplacesOrdersApi->GetOrderExportations");

            var localVarPath = "/v2/user/marketplaces/orders/exportations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderExportations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderExportations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderExportations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderExportations)));
            
        }

        /// <summary>
        /// Get an Order&#39;s harvest and change history 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>OrderHistory</returns>
        public OrderHistory GetOrderHistory (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
             ApiResponse<OrderHistory> localVarResponse = GetOrderHistoryWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Order&#39;s harvest and change history 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of OrderHistory</returns>
        public ApiResponse< OrderHistory > GetOrderHistoryWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->GetOrderHistory");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->GetOrderHistory");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->GetOrderHistory");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistory)));
            
        }

        /// <summary>
        /// Get an Order&#39;s harvest and change history 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of OrderHistory</returns>
        public async System.Threading.Tasks.Task<OrderHistory> GetOrderHistoryAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
             ApiResponse<OrderHistory> localVarResponse = await GetOrderHistoryAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Order&#39;s harvest and change history 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse (OrderHistory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderHistory>> GetOrderHistoryAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->GetOrderHistory");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->GetOrderHistory");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->GetOrderHistory");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistory)));
            
        }

        /// <summary>
        /// Get a paginated list of all Orders with all Order and Order Item(s) properties The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size</param>
        /// <param name="request"> (optional)</param>
        /// <returns>OrderListFull</returns>
        public OrderListFull GetOrderListFull (List<string> acceptEncoding, OrderListRequest request = null)
        {
             ApiResponse<OrderListFull> localVarResponse = GetOrderListFullWithHttpInfo(acceptEncoding, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a paginated list of all Orders with all Order and Order Item(s) properties The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size</param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of OrderListFull</returns>
        public ApiResponse< OrderListFull > GetOrderListFullWithHttpInfo (List<string> acceptEncoding, OrderListRequest request = null)
        {
            // verify the required parameter 'acceptEncoding' is set
            if (acceptEncoding == null)
                throw new ApiException(400, "Missing required parameter 'acceptEncoding' when calling V2UserMarketplacesOrdersApi->GetOrderListFull");

            var localVarPath = "/v2/user/marketplaces/orders/list/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderListFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderListFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderListFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderListFull)));
            
        }

        /// <summary>
        /// Get a paginated list of all Orders with all Order and Order Item(s) properties The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of OrderListFull</returns>
        public async System.Threading.Tasks.Task<OrderListFull> GetOrderListFullAsync (List<string> acceptEncoding, OrderListRequest request = null)
        {
             ApiResponse<OrderListFull> localVarResponse = await GetOrderListFullAsyncWithHttpInfo(acceptEncoding, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a paginated list of all Orders with all Order and Order Item(s) properties The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size</param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderListFull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderListFull>> GetOrderListFullAsyncWithHttpInfo (List<string> acceptEncoding, OrderListRequest request = null)
        {
            // verify the required parameter 'acceptEncoding' is set
            if (acceptEncoding == null)
                throw new ApiException(400, "Missing required parameter 'acceptEncoding' when calling V2UserMarketplacesOrdersApi->GetOrderListFull");

            var localVarPath = "/v2/user/marketplaces/orders/list/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderListFull", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderListFull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderListFull) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderListFull)));
            
        }

        /// <summary>
        /// Get a paginated list of all Orders without details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>OrderListLight</returns>
        public OrderListLight GetOrderListLight (OrderListRequest request = null)
        {
             ApiResponse<OrderListLight> localVarResponse = GetOrderListLightWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a paginated list of all Orders without details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of OrderListLight</returns>
        public ApiResponse< OrderListLight > GetOrderListLightWithHttpInfo (OrderListRequest request = null)
        {

            var localVarPath = "/v2/user/marketplaces/orders/list/light";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderListLight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderListLight>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderListLight) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderListLight)));
            
        }

        /// <summary>
        /// Get a paginated list of all Orders without details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of OrderListLight</returns>
        public async System.Threading.Tasks.Task<OrderListLight> GetOrderListLightAsync (OrderListRequest request = null)
        {
             ApiResponse<OrderListLight> localVarResponse = await GetOrderListLightAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a paginated list of all Orders without details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (OrderListLight)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderListLight>> GetOrderListLightAsyncWithHttpInfo (OrderListRequest request = null)
        {

            var localVarPath = "/v2/user/marketplaces/orders/list/light";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderListLight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderListLight>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderListLight) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderListLight)));
            
        }

        /// <summary>
        /// Send harvest request to all your marketplaces 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void HarvestAll ()
        {
             HarvestAllWithHttpInfo();
        }

        /// <summary>
        /// Send harvest request to all your marketplaces 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HarvestAllWithHttpInfo ()
        {

            var localVarPath = "/v2/user/marketplaces/orders/harvest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HarvestAll", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send harvest request to all your marketplaces 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HarvestAllAsync ()
        {
             await HarvestAllAsyncWithHttpInfo();

        }

        /// <summary>
        /// Send harvest request to all your marketplaces 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HarvestAllAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/user/marketplaces/orders/harvest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HarvestAll", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send harvest request for a single Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns></returns>
        public void HarvestOrder (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
             HarvestOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
        }

        /// <summary>
        /// Send harvest request for a single Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HarvestOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->HarvestOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->HarvestOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->HarvestOrder");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HarvestOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send harvest request for a single Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HarvestOrderAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
             await HarvestOrderAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);

        }

        /// <summary>
        /// Send harvest request for a single Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HarvestOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->HarvestOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->HarvestOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->HarvestOrder");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HarvestOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        public void SetMerchantOrderInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, SetMerchantOrderInfoRequest request)
        {
             SetMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, request);
        }

        /// <summary>
        /// Set an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetMerchantOrderInfoWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, SetMerchantOrderInfoRequest request)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfo");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfo");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfo");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMerchantOrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMerchantOrderInfoAsync (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, SetMerchantOrderInfoRequest request)
        {
             await SetMerchantOrderInfoAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, request);

        }

        /// <summary>
        /// Set an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetMerchantOrderInfoAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string beezUPOrderId, SetMerchantOrderInfoRequest request)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfo");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfo");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfo");

            var localVarPath = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMerchantOrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send a batch of operations to set an Order&#39;s merchant information The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>BatchOrderOperationResponse</returns>
        public BatchOrderOperationResponse SetMerchantOrderInfoList (SetMerchantOrderInfoListRequest request)
        {
             ApiResponse<BatchOrderOperationResponse> localVarResponse = SetMerchantOrderInfoListWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a batch of operations to set an Order&#39;s merchant information The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BatchOrderOperationResponse</returns>
        public ApiResponse< BatchOrderOperationResponse > SetMerchantOrderInfoListWithHttpInfo (SetMerchantOrderInfoListRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfoList");

            var localVarPath = "/v2/user/marketplaces/orders/batches/setMerchantOrderInfos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMerchantOrderInfoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchOrderOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchOrderOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchOrderOperationResponse)));
            
        }

        /// <summary>
        /// Send a batch of operations to set an Order&#39;s merchant information The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of BatchOrderOperationResponse</returns>
        public async System.Threading.Tasks.Task<BatchOrderOperationResponse> SetMerchantOrderInfoListAsync (SetMerchantOrderInfoListRequest request)
        {
             ApiResponse<BatchOrderOperationResponse> localVarResponse = await SetMerchantOrderInfoListAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a batch of operations to set an Order&#39;s merchant information The purpose of this operation is to reduce the amount of request to the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BatchOrderOperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchOrderOperationResponse>> SetMerchantOrderInfoListAsyncWithHttpInfo (SetMerchantOrderInfoListRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling V2UserMarketplacesOrdersApi->SetMerchantOrderInfoList");

            var localVarPath = "/v2/user/marketplaces/orders/batches/setMerchantOrderInfos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMerchantOrderInfoList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchOrderOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchOrderOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchOrderOperationResponse)));
            
        }

    }
}
