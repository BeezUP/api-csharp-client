/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplacesOrdersOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns></returns>
        void ChangeOrder (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null);

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null);
        /// <summary>
        /// Clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns></returns>
        void ClearMerchantOrderInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);

        /// <summary>
        /// Clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ClearMerchantOrderInfoWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);
        /// <summary>
        /// Get full Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Order</returns>
        Order GetOrder (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string ifNoneMatch = null);

        /// <summary>
        /// Get full Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string ifNoneMatch = null);
        /// <summary>
        /// Get an Order&#39;s harvest and change history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>OrderHistory</returns>
        OrderHistory GetOrderHistory (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);

        /// <summary>
        /// Get an Order&#39;s harvest and change history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of OrderHistory</returns>
        ApiResponse<OrderHistory> GetOrderHistoryWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);
        /// <summary>
        /// Send harvest request for a single Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns></returns>
        void HarvestOrder (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);

        /// <summary>
        /// Send harvest request for a single Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HarvestOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);
        /// <summary>
        /// Set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        void SetMerchantOrderInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, SetMerchantOrderInfoRequest request);

        /// <summary>
        /// Set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetMerchantOrderInfoWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, SetMerchantOrderInfoRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeOrderAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null);

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null);
        /// <summary>
        /// Clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ClearMerchantOrderInfoAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);

        /// <summary>
        /// Clear an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ClearMerchantOrderInfoAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);
        /// <summary>
        /// Get full Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> GetOrderAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string ifNoneMatch = null);

        /// <summary>
        /// Get full Order and Order Item(s) properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string ifNoneMatch = null);
        /// <summary>
        /// Get an Order&#39;s harvest and change history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of OrderHistory</returns>
        System.Threading.Tasks.Task<OrderHistory> GetOrderHistoryAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);

        /// <summary>
        /// Get an Order&#39;s harvest and change history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse (OrderHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderHistory>> GetOrderHistoryAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);
        /// <summary>
        /// Send harvest request for a single Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HarvestOrderAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);

        /// <summary>
        /// Send harvest request for a single Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HarvestOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId);
        /// <summary>
        /// Set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetMerchantOrderInfoAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, SetMerchantOrderInfoRequest request);

        /// <summary>
        /// Set an Order&#39;s merchant information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetMerchantOrderInfoAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, SetMerchantOrderInfoRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketplacesOrdersOrderApi : IMarketplacesOrdersOrderApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplacesOrdersOrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketplacesOrdersOrderApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplacesOrdersOrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketplacesOrdersOrderApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns></returns>
        public void ChangeOrder (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null)
        {
             ChangeOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode);
        }

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChangeOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'changeOrderType' is set
            if (changeOrderType == null)
                throw new ApiException(400, "Missing required parameter 'changeOrderType' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new ApiException(400, "Missing required parameter 'ifMatch' when calling MarketplacesOrdersOrderApi->ChangeOrder");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (changeOrderType != null) localVarPathParams.Add("changeOrderType", Configuration.ApiClient.ParameterToString(changeOrderType)); // path parameter
            if (userName != null) localVarQueryParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // query parameter
            if (testMode != null) localVarQueryParams.Add("testMode", Configuration.ApiClient.ParameterToString(testMode)); // query parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeOrderAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null)
        {
             await ChangeOrderAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode);

        }

        /// <summary>
        /// Change your marketplace Order Information (accept, ship, etc.) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="changeOrderType">The Order change type</param>
        /// <param name="userName">Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.</param>
        /// <param name="request"></param>
        /// <param name="ifMatch">ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 </param>
        /// <param name="testMode">If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChangeOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string changeOrderType, string userName, ChangeOrderRequest request, string ifMatch, bool? testMode = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'changeOrderType' is set
            if (changeOrderType == null)
                throw new ApiException(400, "Missing required parameter 'changeOrderType' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'userName' is set
            if (userName == null)
                throw new ApiException(400, "Missing required parameter 'userName' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MarketplacesOrdersOrderApi->ChangeOrder");
            // verify the required parameter 'ifMatch' is set
            if (ifMatch == null)
                throw new ApiException(400, "Missing required parameter 'ifMatch' when calling MarketplacesOrdersOrderApi->ChangeOrder");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (changeOrderType != null) localVarPathParams.Add("changeOrderType", Configuration.ApiClient.ParameterToString(changeOrderType)); // path parameter
            if (userName != null) localVarQueryParams.Add("userName", Configuration.ApiClient.ParameterToString(userName)); // query parameter
            if (testMode != null) localVarQueryParams.Add("testMode", Configuration.ApiClient.ParameterToString(testMode)); // query parameter
            if (ifMatch != null) localVarHeaderParams.Add("If-Match", Configuration.ApiClient.ParameterToString(ifMatch)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns></returns>
        public void ClearMerchantOrderInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
             ClearMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
        }

        /// <summary>
        /// Clear an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ClearMerchantOrderInfoWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->ClearMerchantOrderInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->ClearMerchantOrderInfo");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->ClearMerchantOrderInfo");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearMerchantOrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clear an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ClearMerchantOrderInfoAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
             await ClearMerchantOrderInfoAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);

        }

        /// <summary>
        /// Clear an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ClearMerchantOrderInfoAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->ClearMerchantOrderInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->ClearMerchantOrderInfo");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->ClearMerchantOrderInfo");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearMerchantOrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get full Order and Order Item(s) properties 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Order</returns>
        public Order GetOrder (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string ifNoneMatch = null)
        {
             ApiResponse<Order> localVarResponse = GetOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get full Order and Order Item(s) properties 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > GetOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string ifNoneMatch = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->GetOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->GetOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->GetOrder");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
            
        }

        /// <summary>
        /// Get full Order and Order Item(s) properties 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> GetOrderAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string ifNoneMatch = null)
        {
             ApiResponse<Order> localVarResponse = await GetOrderAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get full Order and Order Item(s) properties 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, string ifNoneMatch = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->GetOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->GetOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->GetOrder");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
            
        }

        /// <summary>
        /// Get an Order&#39;s harvest and change history 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>OrderHistory</returns>
        public OrderHistory GetOrderHistory (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
             ApiResponse<OrderHistory> localVarResponse = GetOrderHistoryWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Order&#39;s harvest and change history 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of OrderHistory</returns>
        public ApiResponse< OrderHistory > GetOrderHistoryWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->GetOrderHistory");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->GetOrderHistory");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->GetOrderHistory");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistory)));
            
        }

        /// <summary>
        /// Get an Order&#39;s harvest and change history 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of OrderHistory</returns>
        public async System.Threading.Tasks.Task<OrderHistory> GetOrderHistoryAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
             ApiResponse<OrderHistory> localVarResponse = await GetOrderHistoryAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Order&#39;s harvest and change history 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse (OrderHistory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderHistory>> GetOrderHistoryAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->GetOrderHistory");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->GetOrderHistory");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->GetOrderHistory");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderHistory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderHistory)));
            
        }

        /// <summary>
        /// Send harvest request for a single Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns></returns>
        public void HarvestOrder (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
             HarvestOrderWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
        }

        /// <summary>
        /// Send harvest request for a single Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HarvestOrderWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->HarvestOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->HarvestOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->HarvestOrder");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HarvestOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send harvest request for a single Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HarvestOrderAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
             await HarvestOrderAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);

        }

        /// <summary>
        /// Send harvest request for a single Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HarvestOrderAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->HarvestOrder");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->HarvestOrder");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->HarvestOrder");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HarvestOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        public void SetMerchantOrderInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, SetMerchantOrderInfoRequest request)
        {
             SetMerchantOrderInfoWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, request);
        }

        /// <summary>
        /// Set an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetMerchantOrderInfoWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, SetMerchantOrderInfoRequest request)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->SetMerchantOrderInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->SetMerchantOrderInfo");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->SetMerchantOrderInfo");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MarketplacesOrdersOrderApi->SetMerchantOrderInfo");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMerchantOrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetMerchantOrderInfoAsync (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, SetMerchantOrderInfoRequest request)
        {
             await SetMerchantOrderInfoAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, request);

        }

        /// <summary>
        /// Set an Order&#39;s merchant information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">The marketplace technical code</param>
        /// <param name="accountId">The account identifier</param>
        /// <param name="beezUPOrderId">The BeezUP Order identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetMerchantOrderInfoAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, Guid? beezUPOrderId, SetMerchantOrderInfoRequest request)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling MarketplacesOrdersOrderApi->SetMerchantOrderInfo");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MarketplacesOrdersOrderApi->SetMerchantOrderInfo");
            // verify the required parameter 'beezUPOrderId' is set
            if (beezUPOrderId == null)
                throw new ApiException(400, "Missing required parameter 'beezUPOrderId' when calling MarketplacesOrdersOrderApi->SetMerchantOrderInfo");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MarketplacesOrdersOrderApi->SetMerchantOrderInfo");

            var localVarPath = "/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (beezUPOrderId != null) localVarPathParams.Add("beezUPOrderId", Configuration.ApiClient.ParameterToString(beezUPOrderId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMerchantOrderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
