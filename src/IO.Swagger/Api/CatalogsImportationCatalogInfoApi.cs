/* 
 * BeezUP API
 *
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogsImportationCatalogInfoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Configure catalog column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        void ImportationConfigureCatalogColumn (string storeId, string executionId, string columnId, ConfigureCatalogColumnCatalogRequest request);

        /// <summary>
        /// Configure catalog column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportationConfigureCatalogColumnWithHttpInfo (string storeId, string executionId, string columnId, ConfigureCatalogColumnCatalogRequest request);
        /// <summary>
        /// Delete Custom Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns></returns>
        void ImportationDeleteCustomColumn (string storeId, string executionId, string columnId);

        /// <summary>
        /// Delete Custom Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportationDeleteCustomColumnWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Get the encrypted custom column expression in this importation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>string</returns>
        string ImportationGetCustomColumnExpression (string storeId, string executionId, string columnId);

        /// <summary>
        /// Get the encrypted custom column expression in this importation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ImportationGetCustomColumnExpressionWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Get custom columns currently place in this importation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>CustomColumns</returns>
        CustomColumns ImportationGetCustomColumns (string storeId, string executionId);

        /// <summary>
        /// Get custom columns currently place in this importation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>ApiResponse of CustomColumns</returns>
        ApiResponse<CustomColumns> ImportationGetCustomColumnsWithHttpInfo (string storeId, string executionId);
        /// <summary>
        /// Get detected catalog columns during this importation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>DetectedCatalogColumns</returns>
        DetectedCatalogColumns ImportationGetDetectedCatalogColumns (string storeId, string executionId);

        /// <summary>
        /// Get detected catalog columns during this importation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>ApiResponse of DetectedCatalogColumns</returns>
        ApiResponse<DetectedCatalogColumns> ImportationGetDetectedCatalogColumnsWithHttpInfo (string storeId, string executionId);
        /// <summary>
        /// Get the product sample related to this importation with all columns (catalog and custom)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <returns>ProductSample</returns>
        ProductSample ImportationGetProductSample (string storeId, string executionId, int? productSampleIndex);

        /// <summary>
        /// Get the product sample related to this importation with all columns (catalog and custom)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <returns>ApiResponse of ProductSample</returns>
        ApiResponse<ProductSample> ImportationGetProductSampleWithHttpInfo (string storeId, string executionId, int? productSampleIndex);
        /// <summary>
        /// Get product sample custom column value related to this importation.
        /// </summary>
        /// <remarks>
        /// /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>string</returns>
        string ImportationGetProductSampleCustomColumnValue (string storeId, string executionId, int? productSampleIndex, string columnId);

        /// <summary>
        /// Get product sample custom column value related to this importation.
        /// </summary>
        /// <remarks>
        /// /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ImportationGetProductSampleCustomColumnValueWithHttpInfo (string storeId, string executionId, int? productSampleIndex, string columnId);
        /// <summary>
        /// Ignore Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns></returns>
        void ImportationIgnoreColumn (string storeId, string executionId, string columnId);

        /// <summary>
        /// Ignore Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportationIgnoreColumnWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Map catalog column to a BeezUP column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        void ImportationMapCatalogColumn (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request);

        /// <summary>
        /// Map catalog column to a BeezUP column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportationMapCatalogColumnWithHttpInfo (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request);
        /// <summary>
        /// Map custom column to a BeezUP column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        void ImportationMapCustomColumn (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request);

        /// <summary>
        /// Map custom column to a BeezUP column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportationMapCustomColumnWithHttpInfo (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request);
        /// <summary>
        /// Reattend Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns></returns>
        void ImportationReattendColumn (string storeId, string executionId, string columnId);

        /// <summary>
        /// Reattend Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportationReattendColumnWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Create or replace a custom column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        void ImportationSaveCustomColumn (string storeId, string executionId, string columnId, ChangeCustomColumnRequest request);

        /// <summary>
        /// Create or replace a custom column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportationSaveCustomColumnWithHttpInfo (string storeId, string executionId, string columnId, ChangeCustomColumnRequest request);
        /// <summary>
        /// Unmap catalog column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <returns></returns>
        void ImportationUnmapCatalogColumn (string storeId, string executionId, string columnId);

        /// <summary>
        /// Unmap catalog column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportationUnmapCatalogColumnWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Unmap custom column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns></returns>
        void ImportationUnmapCustomColumn (string storeId, string executionId, string columnId);

        /// <summary>
        /// Unmap custom column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportationUnmapCustomColumnWithHttpInfo (string storeId, string executionId, string columnId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Configure catalog column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportationConfigureCatalogColumnAsync (string storeId, string executionId, string columnId, ConfigureCatalogColumnCatalogRequest request);

        /// <summary>
        /// Configure catalog column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportationConfigureCatalogColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId, ConfigureCatalogColumnCatalogRequest request);
        /// <summary>
        /// Delete Custom Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportationDeleteCustomColumnAsync (string storeId, string executionId, string columnId);

        /// <summary>
        /// Delete Custom Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportationDeleteCustomColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Get the encrypted custom column expression in this importation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ImportationGetCustomColumnExpressionAsync (string storeId, string executionId, string columnId);

        /// <summary>
        /// Get the encrypted custom column expression in this importation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ImportationGetCustomColumnExpressionAsyncWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Get custom columns currently place in this importation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>Task of CustomColumns</returns>
        System.Threading.Tasks.Task<CustomColumns> ImportationGetCustomColumnsAsync (string storeId, string executionId);

        /// <summary>
        /// Get custom columns currently place in this importation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>Task of ApiResponse (CustomColumns)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomColumns>> ImportationGetCustomColumnsAsyncWithHttpInfo (string storeId, string executionId);
        /// <summary>
        /// Get detected catalog columns during this importation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>Task of DetectedCatalogColumns</returns>
        System.Threading.Tasks.Task<DetectedCatalogColumns> ImportationGetDetectedCatalogColumnsAsync (string storeId, string executionId);

        /// <summary>
        /// Get detected catalog columns during this importation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>Task of ApiResponse (DetectedCatalogColumns)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectedCatalogColumns>> ImportationGetDetectedCatalogColumnsAsyncWithHttpInfo (string storeId, string executionId);
        /// <summary>
        /// Get the product sample related to this importation with all columns (catalog and custom)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <returns>Task of ProductSample</returns>
        System.Threading.Tasks.Task<ProductSample> ImportationGetProductSampleAsync (string storeId, string executionId, int? productSampleIndex);

        /// <summary>
        /// Get the product sample related to this importation with all columns (catalog and custom)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <returns>Task of ApiResponse (ProductSample)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductSample>> ImportationGetProductSampleAsyncWithHttpInfo (string storeId, string executionId, int? productSampleIndex);
        /// <summary>
        /// Get product sample custom column value related to this importation.
        /// </summary>
        /// <remarks>
        /// /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ImportationGetProductSampleCustomColumnValueAsync (string storeId, string executionId, int? productSampleIndex, string columnId);

        /// <summary>
        /// Get product sample custom column value related to this importation.
        /// </summary>
        /// <remarks>
        /// /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ImportationGetProductSampleCustomColumnValueAsyncWithHttpInfo (string storeId, string executionId, int? productSampleIndex, string columnId);
        /// <summary>
        /// Ignore Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportationIgnoreColumnAsync (string storeId, string executionId, string columnId);

        /// <summary>
        /// Ignore Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportationIgnoreColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Map catalog column to a BeezUP column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportationMapCatalogColumnAsync (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request);

        /// <summary>
        /// Map catalog column to a BeezUP column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportationMapCatalogColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request);
        /// <summary>
        /// Map custom column to a BeezUP column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportationMapCustomColumnAsync (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request);

        /// <summary>
        /// Map custom column to a BeezUP column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportationMapCustomColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request);
        /// <summary>
        /// Reattend Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportationReattendColumnAsync (string storeId, string executionId, string columnId);

        /// <summary>
        /// Reattend Column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportationReattendColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Create or replace a custom column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportationSaveCustomColumnAsync (string storeId, string executionId, string columnId, ChangeCustomColumnRequest request);

        /// <summary>
        /// Create or replace a custom column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportationSaveCustomColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId, ChangeCustomColumnRequest request);
        /// <summary>
        /// Unmap catalog column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportationUnmapCatalogColumnAsync (string storeId, string executionId, string columnId);

        /// <summary>
        /// Unmap catalog column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportationUnmapCatalogColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId);
        /// <summary>
        /// Unmap custom column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportationUnmapCustomColumnAsync (string storeId, string executionId, string columnId);

        /// <summary>
        /// Unmap custom column
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportationUnmapCustomColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogsImportationCatalogInfoApi : ICatalogsImportationCatalogInfoApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsImportationCatalogInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogsImportationCatalogInfoApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsImportationCatalogInfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogsImportationCatalogInfoApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Configure catalog column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        public void ImportationConfigureCatalogColumn (string storeId, string executionId, string columnId, ConfigureCatalogColumnCatalogRequest request)
        {
             ImportationConfigureCatalogColumnWithHttpInfo(storeId, executionId, columnId, request);
        }

        /// <summary>
        /// Configure catalog column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportationConfigureCatalogColumnWithHttpInfo (string storeId, string executionId, string columnId, ConfigureCatalogColumnCatalogRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationConfigureCatalogColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationConfigureCatalogColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationConfigureCatalogColumn");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CatalogsImportationCatalogInfoApi->ImportationConfigureCatalogColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationConfigureCatalogColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Configure catalog column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportationConfigureCatalogColumnAsync (string storeId, string executionId, string columnId, ConfigureCatalogColumnCatalogRequest request)
        {
             await ImportationConfigureCatalogColumnAsyncWithHttpInfo(storeId, executionId, columnId, request);

        }

        /// <summary>
        /// Configure catalog column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportationConfigureCatalogColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId, ConfigureCatalogColumnCatalogRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationConfigureCatalogColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationConfigureCatalogColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationConfigureCatalogColumn");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CatalogsImportationCatalogInfoApi->ImportationConfigureCatalogColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationConfigureCatalogColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Custom Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns></returns>
        public void ImportationDeleteCustomColumn (string storeId, string executionId, string columnId)
        {
             ImportationDeleteCustomColumnWithHttpInfo(storeId, executionId, columnId);
        }

        /// <summary>
        /// Delete Custom Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportationDeleteCustomColumnWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationDeleteCustomColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationDeleteCustomColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationDeleteCustomColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationDeleteCustomColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete Custom Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportationDeleteCustomColumnAsync (string storeId, string executionId, string columnId)
        {
             await ImportationDeleteCustomColumnAsyncWithHttpInfo(storeId, executionId, columnId);

        }

        /// <summary>
        /// Delete Custom Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportationDeleteCustomColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationDeleteCustomColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationDeleteCustomColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationDeleteCustomColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationDeleteCustomColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the encrypted custom column expression in this importation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>string</returns>
        public string ImportationGetCustomColumnExpression (string storeId, string executionId, string columnId)
        {
             ApiResponse<string> localVarResponse = ImportationGetCustomColumnExpressionWithHttpInfo(storeId, executionId, columnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the encrypted custom column expression in this importation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ImportationGetCustomColumnExpressionWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumnExpression");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumnExpression");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumnExpression");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetCustomColumnExpression", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Get the encrypted custom column expression in this importation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ImportationGetCustomColumnExpressionAsync (string storeId, string executionId, string columnId)
        {
             ApiResponse<string> localVarResponse = await ImportationGetCustomColumnExpressionAsyncWithHttpInfo(storeId, executionId, columnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the encrypted custom column expression in this importation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ImportationGetCustomColumnExpressionAsyncWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumnExpression");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumnExpression");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumnExpression");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetCustomColumnExpression", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Get custom columns currently place in this importation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>CustomColumns</returns>
        public CustomColumns ImportationGetCustomColumns (string storeId, string executionId)
        {
             ApiResponse<CustomColumns> localVarResponse = ImportationGetCustomColumnsWithHttpInfo(storeId, executionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get custom columns currently place in this importation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>ApiResponse of CustomColumns</returns>
        public ApiResponse< CustomColumns > ImportationGetCustomColumnsWithHttpInfo (string storeId, string executionId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumns");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumns");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetCustomColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomColumns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomColumns) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomColumns)));
            
        }

        /// <summary>
        /// Get custom columns currently place in this importation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>Task of CustomColumns</returns>
        public async System.Threading.Tasks.Task<CustomColumns> ImportationGetCustomColumnsAsync (string storeId, string executionId)
        {
             ApiResponse<CustomColumns> localVarResponse = await ImportationGetCustomColumnsAsyncWithHttpInfo(storeId, executionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get custom columns currently place in this importation 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>Task of ApiResponse (CustomColumns)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomColumns>> ImportationGetCustomColumnsAsyncWithHttpInfo (string storeId, string executionId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumns");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetCustomColumns");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetCustomColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomColumns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomColumns) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomColumns)));
            
        }

        /// <summary>
        /// Get detected catalog columns during this importation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>DetectedCatalogColumns</returns>
        public DetectedCatalogColumns ImportationGetDetectedCatalogColumns (string storeId, string executionId)
        {
             ApiResponse<DetectedCatalogColumns> localVarResponse = ImportationGetDetectedCatalogColumnsWithHttpInfo(storeId, executionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detected catalog columns during this importation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>ApiResponse of DetectedCatalogColumns</returns>
        public ApiResponse< DetectedCatalogColumns > ImportationGetDetectedCatalogColumnsWithHttpInfo (string storeId, string executionId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetDetectedCatalogColumns");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetDetectedCatalogColumns");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetDetectedCatalogColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectedCatalogColumns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectedCatalogColumns) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectedCatalogColumns)));
            
        }

        /// <summary>
        /// Get detected catalog columns during this importation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>Task of DetectedCatalogColumns</returns>
        public async System.Threading.Tasks.Task<DetectedCatalogColumns> ImportationGetDetectedCatalogColumnsAsync (string storeId, string executionId)
        {
             ApiResponse<DetectedCatalogColumns> localVarResponse = await ImportationGetDetectedCatalogColumnsAsyncWithHttpInfo(storeId, executionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detected catalog columns during this importation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <returns>Task of ApiResponse (DetectedCatalogColumns)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetectedCatalogColumns>> ImportationGetDetectedCatalogColumnsAsyncWithHttpInfo (string storeId, string executionId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetDetectedCatalogColumns");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetDetectedCatalogColumns");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetDetectedCatalogColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetectedCatalogColumns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DetectedCatalogColumns) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetectedCatalogColumns)));
            
        }

        /// <summary>
        /// Get the product sample related to this importation with all columns (catalog and custom) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <returns>ProductSample</returns>
        public ProductSample ImportationGetProductSample (string storeId, string executionId, int? productSampleIndex)
        {
             ApiResponse<ProductSample> localVarResponse = ImportationGetProductSampleWithHttpInfo(storeId, executionId, productSampleIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the product sample related to this importation with all columns (catalog and custom) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <returns>ApiResponse of ProductSample</returns>
        public ApiResponse< ProductSample > ImportationGetProductSampleWithHttpInfo (string storeId, string executionId, int? productSampleIndex)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSample");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSample");
            // verify the required parameter 'productSampleIndex' is set
            if (productSampleIndex == null)
                throw new ApiException(400, "Missing required parameter 'productSampleIndex' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSample");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (productSampleIndex != null) localVarPathParams.Add("productSampleIndex", Configuration.ApiClient.ParameterToString(productSampleIndex)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetProductSample", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSample>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSample) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSample)));
            
        }

        /// <summary>
        /// Get the product sample related to this importation with all columns (catalog and custom) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <returns>Task of ProductSample</returns>
        public async System.Threading.Tasks.Task<ProductSample> ImportationGetProductSampleAsync (string storeId, string executionId, int? productSampleIndex)
        {
             ApiResponse<ProductSample> localVarResponse = await ImportationGetProductSampleAsyncWithHttpInfo(storeId, executionId, productSampleIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the product sample related to this importation with all columns (catalog and custom) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <returns>Task of ApiResponse (ProductSample)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductSample>> ImportationGetProductSampleAsyncWithHttpInfo (string storeId, string executionId, int? productSampleIndex)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSample");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSample");
            // verify the required parameter 'productSampleIndex' is set
            if (productSampleIndex == null)
                throw new ApiException(400, "Missing required parameter 'productSampleIndex' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSample");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (productSampleIndex != null) localVarPathParams.Add("productSampleIndex", Configuration.ApiClient.ParameterToString(productSampleIndex)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetProductSample", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductSample>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProductSample) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductSample)));
            
        }

        /// <summary>
        /// Get product sample custom column value related to this importation. /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>string</returns>
        public string ImportationGetProductSampleCustomColumnValue (string storeId, string executionId, int? productSampleIndex, string columnId)
        {
             ApiResponse<string> localVarResponse = ImportationGetProductSampleCustomColumnValueWithHttpInfo(storeId, executionId, productSampleIndex, columnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get product sample custom column value related to this importation. /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ImportationGetProductSampleCustomColumnValueWithHttpInfo (string storeId, string executionId, int? productSampleIndex, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSampleCustomColumnValue");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSampleCustomColumnValue");
            // verify the required parameter 'productSampleIndex' is set
            if (productSampleIndex == null)
                throw new ApiException(400, "Missing required parameter 'productSampleIndex' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSampleCustomColumnValue");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSampleCustomColumnValue");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (productSampleIndex != null) localVarPathParams.Add("productSampleIndex", Configuration.ApiClient.ParameterToString(productSampleIndex)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetProductSampleCustomColumnValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Get product sample custom column value related to this importation. /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ImportationGetProductSampleCustomColumnValueAsync (string storeId, string executionId, int? productSampleIndex, string columnId)
        {
             ApiResponse<string> localVarResponse = await ImportationGetProductSampleCustomColumnValueAsyncWithHttpInfo(storeId, executionId, productSampleIndex, columnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get product sample custom column value related to this importation. /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="productSampleIndex">Index of the product sample. Starting from 0 to 99.</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ImportationGetProductSampleCustomColumnValueAsyncWithHttpInfo (string storeId, string executionId, int? productSampleIndex, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSampleCustomColumnValue");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSampleCustomColumnValue");
            // verify the required parameter 'productSampleIndex' is set
            if (productSampleIndex == null)
                throw new ApiException(400, "Missing required parameter 'productSampleIndex' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSampleCustomColumnValue");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationGetProductSampleCustomColumnValue");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (productSampleIndex != null) localVarPathParams.Add("productSampleIndex", Configuration.ApiClient.ParameterToString(productSampleIndex)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationGetProductSampleCustomColumnValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        /// Ignore Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns></returns>
        public void ImportationIgnoreColumn (string storeId, string executionId, string columnId)
        {
             ImportationIgnoreColumnWithHttpInfo(storeId, executionId, columnId);
        }

        /// <summary>
        /// Ignore Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportationIgnoreColumnWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationIgnoreColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationIgnoreColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationIgnoreColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationIgnoreColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Ignore Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportationIgnoreColumnAsync (string storeId, string executionId, string columnId)
        {
             await ImportationIgnoreColumnAsyncWithHttpInfo(storeId, executionId, columnId);

        }

        /// <summary>
        /// Ignore Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportationIgnoreColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationIgnoreColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationIgnoreColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationIgnoreColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationIgnoreColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Map catalog column to a BeezUP column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        public void ImportationMapCatalogColumn (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request)
        {
             ImportationMapCatalogColumnWithHttpInfo(storeId, executionId, columnId, request);
        }

        /// <summary>
        /// Map catalog column to a BeezUP column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportationMapCatalogColumnWithHttpInfo (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCatalogColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCatalogColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCatalogColumn");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CatalogsImportationCatalogInfoApi->ImportationMapCatalogColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationMapCatalogColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Map catalog column to a BeezUP column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportationMapCatalogColumnAsync (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request)
        {
             await ImportationMapCatalogColumnAsyncWithHttpInfo(storeId, executionId, columnId, request);

        }

        /// <summary>
        /// Map catalog column to a BeezUP column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportationMapCatalogColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCatalogColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCatalogColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCatalogColumn");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CatalogsImportationCatalogInfoApi->ImportationMapCatalogColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationMapCatalogColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Map custom column to a BeezUP column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        public void ImportationMapCustomColumn (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request)
        {
             ImportationMapCustomColumnWithHttpInfo(storeId, executionId, columnId, request);
        }

        /// <summary>
        /// Map custom column to a BeezUP column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportationMapCustomColumnWithHttpInfo (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCustomColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCustomColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCustomColumn");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CatalogsImportationCatalogInfoApi->ImportationMapCustomColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationMapCustomColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Map custom column to a BeezUP column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportationMapCustomColumnAsync (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request)
        {
             await ImportationMapCustomColumnAsyncWithHttpInfo(storeId, executionId, columnId, request);

        }

        /// <summary>
        /// Map custom column to a BeezUP column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportationMapCustomColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId, MapBeezUPColumnRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCustomColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCustomColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationMapCustomColumn");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CatalogsImportationCatalogInfoApi->ImportationMapCustomColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationMapCustomColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reattend Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns></returns>
        public void ImportationReattendColumn (string storeId, string executionId, string columnId)
        {
             ImportationReattendColumnWithHttpInfo(storeId, executionId, columnId);
        }

        /// <summary>
        /// Reattend Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportationReattendColumnWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationReattendColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationReattendColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationReattendColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationReattendColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reattend Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportationReattendColumnAsync (string storeId, string executionId, string columnId)
        {
             await ImportationReattendColumnAsyncWithHttpInfo(storeId, executionId, columnId);

        }

        /// <summary>
        /// Reattend Column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportationReattendColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationReattendColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationReattendColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationReattendColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationReattendColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create or replace a custom column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns></returns>
        public void ImportationSaveCustomColumn (string storeId, string executionId, string columnId, ChangeCustomColumnRequest request)
        {
             ImportationSaveCustomColumnWithHttpInfo(storeId, executionId, columnId, request);
        }

        /// <summary>
        /// Create or replace a custom column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportationSaveCustomColumnWithHttpInfo (string storeId, string executionId, string columnId, ChangeCustomColumnRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationSaveCustomColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationSaveCustomColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationSaveCustomColumn");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CatalogsImportationCatalogInfoApi->ImportationSaveCustomColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationSaveCustomColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create or replace a custom column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportationSaveCustomColumnAsync (string storeId, string executionId, string columnId, ChangeCustomColumnRequest request)
        {
             await ImportationSaveCustomColumnAsyncWithHttpInfo(storeId, executionId, columnId, request);

        }

        /// <summary>
        /// Create or replace a custom column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportationSaveCustomColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId, ChangeCustomColumnRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationSaveCustomColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationSaveCustomColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationSaveCustomColumn");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling CatalogsImportationCatalogInfoApi->ImportationSaveCustomColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationSaveCustomColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmap catalog column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <returns></returns>
        public void ImportationUnmapCatalogColumn (string storeId, string executionId, string columnId)
        {
             ImportationUnmapCatalogColumnWithHttpInfo(storeId, executionId, columnId);
        }

        /// <summary>
        /// Unmap catalog column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportationUnmapCatalogColumnWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCatalogColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCatalogColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCatalogColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationUnmapCatalogColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmap catalog column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportationUnmapCatalogColumnAsync (string storeId, string executionId, string columnId)
        {
             await ImportationUnmapCatalogColumnAsyncWithHttpInfo(storeId, executionId, columnId);

        }

        /// <summary>
        /// Unmap catalog column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The catalog column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportationUnmapCatalogColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCatalogColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCatalogColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCatalogColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationUnmapCatalogColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmap custom column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns></returns>
        public void ImportationUnmapCustomColumn (string storeId, string executionId, string columnId)
        {
             ImportationUnmapCustomColumnWithHttpInfo(storeId, executionId, columnId);
        }

        /// <summary>
        /// Unmap custom column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportationUnmapCustomColumnWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCustomColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCustomColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCustomColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationUnmapCustomColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmap custom column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportationUnmapCustomColumnAsync (string storeId, string executionId, string columnId)
        {
             await ImportationUnmapCustomColumnAsyncWithHttpInfo(storeId, executionId, columnId);

        }

        /// <summary>
        /// Unmap custom column 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="executionId">The execution identifier of you catalog importation</param>
        /// <param name="columnId">The custom column identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportationUnmapCustomColumnAsyncWithHttpInfo (string storeId, string executionId, string columnId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCustomColumn");
            // verify the required parameter 'executionId' is set
            if (executionId == null)
                throw new ApiException(400, "Missing required parameter 'executionId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCustomColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling CatalogsImportationCatalogInfoApi->ImportationUnmapCustomColumn");

            var localVarPath = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (executionId != null) localVarPathParams.Add("executionId", Configuration.ApiClient.ParameterToString(executionId)); // path parameter
            if (columnId != null) localVarPathParams.Add("columnId", Configuration.ApiClient.ParameterToString(columnId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportationUnmapCustomColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
