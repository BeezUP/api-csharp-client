/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete the report filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns></returns>
        void DeleteReportFilter (string storeId, string reportFilterId);

        /// <summary>
        /// Delete the report filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReportFilterWithHttpInfo (string storeId, string reportFilterId);
        /// <summary>
        /// Export the report by category
        /// </summary>
        /// <remarks>
        /// Export the report by category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>BeezUPCommonLink3</returns>
        BeezUPCommonLink3 ExportStoreReportByCategory (string storeId, string format, ReportByCategoryRequest request);

        /// <summary>
        /// Export the report by category
        /// </summary>
        /// <remarks>
        /// Export the report by category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BeezUPCommonLink3</returns>
        ApiResponse<BeezUPCommonLink3> ExportStoreReportByCategoryWithHttpInfo (string storeId, string format, ReportByCategoryRequest request);
        /// <summary>
        /// Export the report by channel
        /// </summary>
        /// <remarks>
        /// Export the report by channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>BeezUPCommonLink3</returns>
        BeezUPCommonLink3 ExportStoreReportByChannel (string storeId, string format, ReportByChannelRequest request);

        /// <summary>
        /// Export the report by channel
        /// </summary>
        /// <remarks>
        /// Export the report by channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BeezUPCommonLink3</returns>
        ApiResponse<BeezUPCommonLink3> ExportStoreReportByChannelWithHttpInfo (string storeId, string format, ReportByChannelRequest request);
        /// <summary>
        /// Export the report by product
        /// </summary>
        /// <remarks>
        /// Export the report by product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>BeezUPCommonLink3</returns>
        BeezUPCommonLink3 ExportStoreReportByProduct (string storeId, string format, ReportByProductRequest request);

        /// <summary>
        /// Export the report by product
        /// </summary>
        /// <remarks>
        /// Export the report by product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BeezUPCommonLink3</returns>
        ApiResponse<BeezUPCommonLink3> ExportStoreReportByProductWithHttpInfo (string storeId, string format, ReportByProductRequest request);
        /// <summary>
        /// Get the report filter description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>ReportFilter</returns>
        ReportFilter GetReportFilter (string storeId, string reportFilterId);

        /// <summary>
        /// Get the report filter description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>ApiResponse of ReportFilter</returns>
        ApiResponse<ReportFilter> GetReportFilterWithHttpInfo (string storeId, string reportFilterId);
        /// <summary>
        /// Get report filter list for the given store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>ReportFilters</returns>
        ReportFilters GetReportFilters (string storeId);

        /// <summary>
        /// Get report filter list for the given store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>ApiResponse of ReportFilters</returns>
        ApiResponse<ReportFilters> GetReportFiltersWithHttpInfo (string storeId);
        /// <summary>
        /// Get the report by category
        /// </summary>
        /// <remarks>
        /// Get the report by category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ReportByCategoryResponse</returns>
        ReportByCategoryResponse GetStoreReportByCategory (string storeId, ReportByCategoryRequest request);

        /// <summary>
        /// Get the report by category
        /// </summary>
        /// <remarks>
        /// Get the report by category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ReportByCategoryResponse</returns>
        ApiResponse<ReportByCategoryResponse> GetStoreReportByCategoryWithHttpInfo (string storeId, ReportByCategoryRequest request);
        /// <summary>
        /// Get the report by channel
        /// </summary>
        /// <remarks>
        /// Get the report by channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ReportByChannelResponse</returns>
        ReportByChannelResponse GetStoreReportByChannel (string storeId, ReportByChannelRequest request);

        /// <summary>
        /// Get the report by channel
        /// </summary>
        /// <remarks>
        /// Get the report by channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ReportByChannelResponse</returns>
        ApiResponse<ReportByChannelResponse> GetStoreReportByChannelWithHttpInfo (string storeId, ReportByChannelRequest request);
        /// <summary>
        /// Get the report by day
        /// </summary>
        /// <remarks>
        /// Get the report by day
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ReportByDayResponse</returns>
        ReportByDayResponse GetStoreReportByDay (string storeId, ReportByDayRequest request);

        /// <summary>
        /// Get the report by day
        /// </summary>
        /// <remarks>
        /// Get the report by day
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ReportByDayResponse</returns>
        ApiResponse<ReportByDayResponse> GetStoreReportByDayWithHttpInfo (string storeId, ReportByDayRequest request);
        /// <summary>
        /// Get the report by day
        /// </summary>
        /// <remarks>
        /// Get the report by day
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>BeezUPCommonLink3</returns>
        BeezUPCommonLink3 GetStoreReportByDayExport (string storeId, string format, ReportByDayRequest request);

        /// <summary>
        /// Get the report by day
        /// </summary>
        /// <remarks>
        /// Get the report by day
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BeezUPCommonLink3</returns>
        ApiResponse<BeezUPCommonLink3> GetStoreReportByDayExportWithHttpInfo (string storeId, string format, ReportByDayRequest request);
        /// <summary>
        /// Get the report by product
        /// </summary>
        /// <remarks>
        /// Get the report by product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ReportByProductResponse</returns>
        ReportByProductResponse GetStoreReportByProduct (string storeId, ReportByProductRequest request);

        /// <summary>
        /// Get the report by product
        /// </summary>
        /// <remarks>
        /// Get the report by product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ReportByProductResponse</returns>
        ApiResponse<ReportByProductResponse> GetStoreReportByProductWithHttpInfo (string storeId, ReportByProductRequest request);
        /// <summary>
        /// Save the report filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <param name="reportFilter"></param>
        /// <returns></returns>
        void SaveReportFilter (string storeId, string reportFilterId, SaveReportFilterRequest reportFilter);

        /// <summary>
        /// Save the report filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <param name="reportFilter"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveReportFilterWithHttpInfo (string storeId, string reportFilterId, SaveReportFilterRequest reportFilter);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete the report filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReportFilterAsync (string storeId, string reportFilterId);

        /// <summary>
        /// Delete the report filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReportFilterAsyncWithHttpInfo (string storeId, string reportFilterId);
        /// <summary>
        /// Export the report by category
        /// </summary>
        /// <remarks>
        /// Export the report by category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of BeezUPCommonLink3</returns>
        System.Threading.Tasks.Task<BeezUPCommonLink3> ExportStoreReportByCategoryAsync (string storeId, string format, ReportByCategoryRequest request);

        /// <summary>
        /// Export the report by category
        /// </summary>
        /// <remarks>
        /// Export the report by category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BeezUPCommonLink3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BeezUPCommonLink3>> ExportStoreReportByCategoryAsyncWithHttpInfo (string storeId, string format, ReportByCategoryRequest request);
        /// <summary>
        /// Export the report by channel
        /// </summary>
        /// <remarks>
        /// Export the report by channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of BeezUPCommonLink3</returns>
        System.Threading.Tasks.Task<BeezUPCommonLink3> ExportStoreReportByChannelAsync (string storeId, string format, ReportByChannelRequest request);

        /// <summary>
        /// Export the report by channel
        /// </summary>
        /// <remarks>
        /// Export the report by channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BeezUPCommonLink3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BeezUPCommonLink3>> ExportStoreReportByChannelAsyncWithHttpInfo (string storeId, string format, ReportByChannelRequest request);
        /// <summary>
        /// Export the report by product
        /// </summary>
        /// <remarks>
        /// Export the report by product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of BeezUPCommonLink3</returns>
        System.Threading.Tasks.Task<BeezUPCommonLink3> ExportStoreReportByProductAsync (string storeId, string format, ReportByProductRequest request);

        /// <summary>
        /// Export the report by product
        /// </summary>
        /// <remarks>
        /// Export the report by product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BeezUPCommonLink3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BeezUPCommonLink3>> ExportStoreReportByProductAsyncWithHttpInfo (string storeId, string format, ReportByProductRequest request);
        /// <summary>
        /// Get the report filter description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>Task of ReportFilter</returns>
        System.Threading.Tasks.Task<ReportFilter> GetReportFilterAsync (string storeId, string reportFilterId);

        /// <summary>
        /// Get the report filter description
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>Task of ApiResponse (ReportFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportFilter>> GetReportFilterAsyncWithHttpInfo (string storeId, string reportFilterId);
        /// <summary>
        /// Get report filter list for the given store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>Task of ReportFilters</returns>
        System.Threading.Tasks.Task<ReportFilters> GetReportFiltersAsync (string storeId);

        /// <summary>
        /// Get report filter list for the given store
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>Task of ApiResponse (ReportFilters)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportFilters>> GetReportFiltersAsyncWithHttpInfo (string storeId);
        /// <summary>
        /// Get the report by category
        /// </summary>
        /// <remarks>
        /// Get the report by category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ReportByCategoryResponse</returns>
        System.Threading.Tasks.Task<ReportByCategoryResponse> GetStoreReportByCategoryAsync (string storeId, ReportByCategoryRequest request);

        /// <summary>
        /// Get the report by category
        /// </summary>
        /// <remarks>
        /// Get the report by category
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ReportByCategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportByCategoryResponse>> GetStoreReportByCategoryAsyncWithHttpInfo (string storeId, ReportByCategoryRequest request);
        /// <summary>
        /// Get the report by channel
        /// </summary>
        /// <remarks>
        /// Get the report by channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ReportByChannelResponse</returns>
        System.Threading.Tasks.Task<ReportByChannelResponse> GetStoreReportByChannelAsync (string storeId, ReportByChannelRequest request);

        /// <summary>
        /// Get the report by channel
        /// </summary>
        /// <remarks>
        /// Get the report by channel
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ReportByChannelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportByChannelResponse>> GetStoreReportByChannelAsyncWithHttpInfo (string storeId, ReportByChannelRequest request);
        /// <summary>
        /// Get the report by day
        /// </summary>
        /// <remarks>
        /// Get the report by day
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ReportByDayResponse</returns>
        System.Threading.Tasks.Task<ReportByDayResponse> GetStoreReportByDayAsync (string storeId, ReportByDayRequest request);

        /// <summary>
        /// Get the report by day
        /// </summary>
        /// <remarks>
        /// Get the report by day
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ReportByDayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportByDayResponse>> GetStoreReportByDayAsyncWithHttpInfo (string storeId, ReportByDayRequest request);
        /// <summary>
        /// Get the report by day
        /// </summary>
        /// <remarks>
        /// Get the report by day
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of BeezUPCommonLink3</returns>
        System.Threading.Tasks.Task<BeezUPCommonLink3> GetStoreReportByDayExportAsync (string storeId, string format, ReportByDayRequest request);

        /// <summary>
        /// Get the report by day
        /// </summary>
        /// <remarks>
        /// Get the report by day
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BeezUPCommonLink3)</returns>
        System.Threading.Tasks.Task<ApiResponse<BeezUPCommonLink3>> GetStoreReportByDayExportAsyncWithHttpInfo (string storeId, string format, ReportByDayRequest request);
        /// <summary>
        /// Get the report by product
        /// </summary>
        /// <remarks>
        /// Get the report by product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ReportByProductResponse</returns>
        System.Threading.Tasks.Task<ReportByProductResponse> GetStoreReportByProductAsync (string storeId, ReportByProductRequest request);

        /// <summary>
        /// Get the report by product
        /// </summary>
        /// <remarks>
        /// Get the report by product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ReportByProductResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportByProductResponse>> GetStoreReportByProductAsyncWithHttpInfo (string storeId, ReportByProductRequest request);
        /// <summary>
        /// Save the report filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <param name="reportFilter"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveReportFilterAsync (string storeId, string reportFilterId, SaveReportFilterRequest reportFilter);

        /// <summary>
        /// Save the report filter
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <param name="reportFilter"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveReportFilterAsyncWithHttpInfo (string storeId, string reportFilterId, SaveReportFilterRequest reportFilter);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnalyticsReportsApi : IAnalyticsReportsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsReportsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyticsReportsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete the report filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns></returns>
        public void DeleteReportFilter (string storeId, string reportFilterId)
        {
             DeleteReportFilterWithHttpInfo(storeId, reportFilterId);
        }

        /// <summary>
        /// Delete the report filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReportFilterWithHttpInfo (string storeId, string reportFilterId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->DeleteReportFilter");
            // verify the required parameter 'reportFilterId' is set
            if (reportFilterId == null)
                throw new ApiException(400, "Missing required parameter 'reportFilterId' when calling AnalyticsReportsApi->DeleteReportFilter");

            var localVarPath = "/user/analytics/{storeId}/reports/filters/{reportFilterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (reportFilterId != null) localVarPathParams.Add("reportFilterId", Configuration.ApiClient.ParameterToString(reportFilterId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReportFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the report filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReportFilterAsync (string storeId, string reportFilterId)
        {
             await DeleteReportFilterAsyncWithHttpInfo(storeId, reportFilterId);

        }

        /// <summary>
        /// Delete the report filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReportFilterAsyncWithHttpInfo (string storeId, string reportFilterId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->DeleteReportFilter");
            // verify the required parameter 'reportFilterId' is set
            if (reportFilterId == null)
                throw new ApiException(400, "Missing required parameter 'reportFilterId' when calling AnalyticsReportsApi->DeleteReportFilter");

            var localVarPath = "/user/analytics/{storeId}/reports/filters/{reportFilterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (reportFilterId != null) localVarPathParams.Add("reportFilterId", Configuration.ApiClient.ParameterToString(reportFilterId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReportFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Export the report by category Export the report by category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>BeezUPCommonLink3</returns>
        public BeezUPCommonLink3 ExportStoreReportByCategory (string storeId, string format, ReportByCategoryRequest request)
        {
             ApiResponse<BeezUPCommonLink3> localVarResponse = ExportStoreReportByCategoryWithHttpInfo(storeId, format, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export the report by category Export the report by category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BeezUPCommonLink3</returns>
        public ApiResponse< BeezUPCommonLink3 > ExportStoreReportByCategoryWithHttpInfo (string storeId, string format, ReportByCategoryRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->ExportStoreReportByCategory");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling AnalyticsReportsApi->ExportStoreReportByCategory");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->ExportStoreReportByCategory");

            var localVarPath = "/user/analytics/{storeId}/reports/bycategory/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportStoreReportByCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeezUPCommonLink3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BeezUPCommonLink3) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeezUPCommonLink3)));
            
        }

        /// <summary>
        /// Export the report by category Export the report by category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of BeezUPCommonLink3</returns>
        public async System.Threading.Tasks.Task<BeezUPCommonLink3> ExportStoreReportByCategoryAsync (string storeId, string format, ReportByCategoryRequest request)
        {
             ApiResponse<BeezUPCommonLink3> localVarResponse = await ExportStoreReportByCategoryAsyncWithHttpInfo(storeId, format, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export the report by category Export the report by category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BeezUPCommonLink3)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BeezUPCommonLink3>> ExportStoreReportByCategoryAsyncWithHttpInfo (string storeId, string format, ReportByCategoryRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->ExportStoreReportByCategory");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling AnalyticsReportsApi->ExportStoreReportByCategory");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->ExportStoreReportByCategory");

            var localVarPath = "/user/analytics/{storeId}/reports/bycategory/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportStoreReportByCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeezUPCommonLink3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BeezUPCommonLink3) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeezUPCommonLink3)));
            
        }

        /// <summary>
        /// Export the report by channel Export the report by channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>BeezUPCommonLink3</returns>
        public BeezUPCommonLink3 ExportStoreReportByChannel (string storeId, string format, ReportByChannelRequest request)
        {
             ApiResponse<BeezUPCommonLink3> localVarResponse = ExportStoreReportByChannelWithHttpInfo(storeId, format, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export the report by channel Export the report by channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BeezUPCommonLink3</returns>
        public ApiResponse< BeezUPCommonLink3 > ExportStoreReportByChannelWithHttpInfo (string storeId, string format, ReportByChannelRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->ExportStoreReportByChannel");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling AnalyticsReportsApi->ExportStoreReportByChannel");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->ExportStoreReportByChannel");

            var localVarPath = "/user/analytics/{storeId}/reports/bychannel/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportStoreReportByChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeezUPCommonLink3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BeezUPCommonLink3) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeezUPCommonLink3)));
            
        }

        /// <summary>
        /// Export the report by channel Export the report by channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of BeezUPCommonLink3</returns>
        public async System.Threading.Tasks.Task<BeezUPCommonLink3> ExportStoreReportByChannelAsync (string storeId, string format, ReportByChannelRequest request)
        {
             ApiResponse<BeezUPCommonLink3> localVarResponse = await ExportStoreReportByChannelAsyncWithHttpInfo(storeId, format, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export the report by channel Export the report by channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BeezUPCommonLink3)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BeezUPCommonLink3>> ExportStoreReportByChannelAsyncWithHttpInfo (string storeId, string format, ReportByChannelRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->ExportStoreReportByChannel");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling AnalyticsReportsApi->ExportStoreReportByChannel");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->ExportStoreReportByChannel");

            var localVarPath = "/user/analytics/{storeId}/reports/bychannel/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportStoreReportByChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeezUPCommonLink3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BeezUPCommonLink3) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeezUPCommonLink3)));
            
        }

        /// <summary>
        /// Export the report by product Export the report by product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>BeezUPCommonLink3</returns>
        public BeezUPCommonLink3 ExportStoreReportByProduct (string storeId, string format, ReportByProductRequest request)
        {
             ApiResponse<BeezUPCommonLink3> localVarResponse = ExportStoreReportByProductWithHttpInfo(storeId, format, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export the report by product Export the report by product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BeezUPCommonLink3</returns>
        public ApiResponse< BeezUPCommonLink3 > ExportStoreReportByProductWithHttpInfo (string storeId, string format, ReportByProductRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->ExportStoreReportByProduct");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling AnalyticsReportsApi->ExportStoreReportByProduct");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->ExportStoreReportByProduct");

            var localVarPath = "/user/analytics/{storeId}/reports/byproduct/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportStoreReportByProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeezUPCommonLink3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BeezUPCommonLink3) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeezUPCommonLink3)));
            
        }

        /// <summary>
        /// Export the report by product Export the report by product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of BeezUPCommonLink3</returns>
        public async System.Threading.Tasks.Task<BeezUPCommonLink3> ExportStoreReportByProductAsync (string storeId, string format, ReportByProductRequest request)
        {
             ApiResponse<BeezUPCommonLink3> localVarResponse = await ExportStoreReportByProductAsyncWithHttpInfo(storeId, format, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export the report by product Export the report by product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BeezUPCommonLink3)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BeezUPCommonLink3>> ExportStoreReportByProductAsyncWithHttpInfo (string storeId, string format, ReportByProductRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->ExportStoreReportByProduct");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling AnalyticsReportsApi->ExportStoreReportByProduct");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->ExportStoreReportByProduct");

            var localVarPath = "/user/analytics/{storeId}/reports/byproduct/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportStoreReportByProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeezUPCommonLink3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BeezUPCommonLink3) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeezUPCommonLink3)));
            
        }

        /// <summary>
        /// Get the report filter description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>ReportFilter</returns>
        public ReportFilter GetReportFilter (string storeId, string reportFilterId)
        {
             ApiResponse<ReportFilter> localVarResponse = GetReportFilterWithHttpInfo(storeId, reportFilterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the report filter description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>ApiResponse of ReportFilter</returns>
        public ApiResponse< ReportFilter > GetReportFilterWithHttpInfo (string storeId, string reportFilterId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetReportFilter");
            // verify the required parameter 'reportFilterId' is set
            if (reportFilterId == null)
                throw new ApiException(400, "Missing required parameter 'reportFilterId' when calling AnalyticsReportsApi->GetReportFilter");

            var localVarPath = "/user/analytics/{storeId}/reports/filters/{reportFilterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (reportFilterId != null) localVarPathParams.Add("reportFilterId", Configuration.ApiClient.ParameterToString(reportFilterId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportFilter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportFilter) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportFilter)));
            
        }

        /// <summary>
        /// Get the report filter description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>Task of ReportFilter</returns>
        public async System.Threading.Tasks.Task<ReportFilter> GetReportFilterAsync (string storeId, string reportFilterId)
        {
             ApiResponse<ReportFilter> localVarResponse = await GetReportFilterAsyncWithHttpInfo(storeId, reportFilterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the report filter description 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <returns>Task of ApiResponse (ReportFilter)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportFilter>> GetReportFilterAsyncWithHttpInfo (string storeId, string reportFilterId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetReportFilter");
            // verify the required parameter 'reportFilterId' is set
            if (reportFilterId == null)
                throw new ApiException(400, "Missing required parameter 'reportFilterId' when calling AnalyticsReportsApi->GetReportFilter");

            var localVarPath = "/user/analytics/{storeId}/reports/filters/{reportFilterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (reportFilterId != null) localVarPathParams.Add("reportFilterId", Configuration.ApiClient.ParameterToString(reportFilterId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportFilter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportFilter) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportFilter)));
            
        }

        /// <summary>
        /// Get report filter list for the given store 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>ReportFilters</returns>
        public ReportFilters GetReportFilters (string storeId)
        {
             ApiResponse<ReportFilters> localVarResponse = GetReportFiltersWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get report filter list for the given store 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>ApiResponse of ReportFilters</returns>
        public ApiResponse< ReportFilters > GetReportFiltersWithHttpInfo (string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetReportFilters");

            var localVarPath = "/user/analytics/{storeId}/reports/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportFilters>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportFilters) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportFilters)));
            
        }

        /// <summary>
        /// Get report filter list for the given store 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>Task of ReportFilters</returns>
        public async System.Threading.Tasks.Task<ReportFilters> GetReportFiltersAsync (string storeId)
        {
             ApiResponse<ReportFilters> localVarResponse = await GetReportFiltersAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get report filter list for the given store 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>Task of ApiResponse (ReportFilters)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportFilters>> GetReportFiltersAsyncWithHttpInfo (string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetReportFilters");

            var localVarPath = "/user/analytics/{storeId}/reports/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReportFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportFilters>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportFilters) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportFilters)));
            
        }

        /// <summary>
        /// Get the report by category Get the report by category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ReportByCategoryResponse</returns>
        public ReportByCategoryResponse GetStoreReportByCategory (string storeId, ReportByCategoryRequest request)
        {
             ApiResponse<ReportByCategoryResponse> localVarResponse = GetStoreReportByCategoryWithHttpInfo(storeId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the report by category Get the report by category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ReportByCategoryResponse</returns>
        public ApiResponse< ReportByCategoryResponse > GetStoreReportByCategoryWithHttpInfo (string storeId, ReportByCategoryRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByCategory");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByCategory");

            var localVarPath = "/user/analytics/{storeId}/reports/bycategory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportByCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportByCategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportByCategoryResponse)));
            
        }

        /// <summary>
        /// Get the report by category Get the report by category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ReportByCategoryResponse</returns>
        public async System.Threading.Tasks.Task<ReportByCategoryResponse> GetStoreReportByCategoryAsync (string storeId, ReportByCategoryRequest request)
        {
             ApiResponse<ReportByCategoryResponse> localVarResponse = await GetStoreReportByCategoryAsyncWithHttpInfo(storeId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the report by category Get the report by category
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ReportByCategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportByCategoryResponse>> GetStoreReportByCategoryAsyncWithHttpInfo (string storeId, ReportByCategoryRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByCategory");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByCategory");

            var localVarPath = "/user/analytics/{storeId}/reports/bycategory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportByCategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportByCategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportByCategoryResponse)));
            
        }

        /// <summary>
        /// Get the report by channel Get the report by channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ReportByChannelResponse</returns>
        public ReportByChannelResponse GetStoreReportByChannel (string storeId, ReportByChannelRequest request)
        {
             ApiResponse<ReportByChannelResponse> localVarResponse = GetStoreReportByChannelWithHttpInfo(storeId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the report by channel Get the report by channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ReportByChannelResponse</returns>
        public ApiResponse< ReportByChannelResponse > GetStoreReportByChannelWithHttpInfo (string storeId, ReportByChannelRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByChannel");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByChannel");

            var localVarPath = "/user/analytics/{storeId}/reports/bychannel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportByChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportByChannelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportByChannelResponse)));
            
        }

        /// <summary>
        /// Get the report by channel Get the report by channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ReportByChannelResponse</returns>
        public async System.Threading.Tasks.Task<ReportByChannelResponse> GetStoreReportByChannelAsync (string storeId, ReportByChannelRequest request)
        {
             ApiResponse<ReportByChannelResponse> localVarResponse = await GetStoreReportByChannelAsyncWithHttpInfo(storeId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the report by channel Get the report by channel
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ReportByChannelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportByChannelResponse>> GetStoreReportByChannelAsyncWithHttpInfo (string storeId, ReportByChannelRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByChannel");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByChannel");

            var localVarPath = "/user/analytics/{storeId}/reports/bychannel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportByChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportByChannelResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportByChannelResponse)));
            
        }

        /// <summary>
        /// Get the report by day Get the report by day
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ReportByDayResponse</returns>
        public ReportByDayResponse GetStoreReportByDay (string storeId, ReportByDayRequest request)
        {
             ApiResponse<ReportByDayResponse> localVarResponse = GetStoreReportByDayWithHttpInfo(storeId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the report by day Get the report by day
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ReportByDayResponse</returns>
        public ApiResponse< ReportByDayResponse > GetStoreReportByDayWithHttpInfo (string storeId, ReportByDayRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByDay");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByDay");

            var localVarPath = "/user/analytics/{storeId}/reports/byday";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportByDayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportByDayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportByDayResponse)));
            
        }

        /// <summary>
        /// Get the report by day Get the report by day
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ReportByDayResponse</returns>
        public async System.Threading.Tasks.Task<ReportByDayResponse> GetStoreReportByDayAsync (string storeId, ReportByDayRequest request)
        {
             ApiResponse<ReportByDayResponse> localVarResponse = await GetStoreReportByDayAsyncWithHttpInfo(storeId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the report by day Get the report by day
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ReportByDayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportByDayResponse>> GetStoreReportByDayAsyncWithHttpInfo (string storeId, ReportByDayRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByDay");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByDay");

            var localVarPath = "/user/analytics/{storeId}/reports/byday";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportByDayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportByDayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportByDayResponse)));
            
        }

        /// <summary>
        /// Get the report by day Get the report by day
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>BeezUPCommonLink3</returns>
        public BeezUPCommonLink3 GetStoreReportByDayExport (string storeId, string format, ReportByDayRequest request)
        {
             ApiResponse<BeezUPCommonLink3> localVarResponse = GetStoreReportByDayExportWithHttpInfo(storeId, format, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the report by day Get the report by day
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of BeezUPCommonLink3</returns>
        public ApiResponse< BeezUPCommonLink3 > GetStoreReportByDayExportWithHttpInfo (string storeId, string format, ReportByDayRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByDayExport");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling AnalyticsReportsApi->GetStoreReportByDayExport");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByDayExport");

            var localVarPath = "/user/analytics/{storeId}/reports/byday/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByDayExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeezUPCommonLink3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BeezUPCommonLink3) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeezUPCommonLink3)));
            
        }

        /// <summary>
        /// Get the report by day Get the report by day
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of BeezUPCommonLink3</returns>
        public async System.Threading.Tasks.Task<BeezUPCommonLink3> GetStoreReportByDayExportAsync (string storeId, string format, ReportByDayRequest request)
        {
             ApiResponse<BeezUPCommonLink3> localVarResponse = await GetStoreReportByDayExportAsyncWithHttpInfo(storeId, format, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the report by day Get the report by day
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="format"></param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (BeezUPCommonLink3)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BeezUPCommonLink3>> GetStoreReportByDayExportAsyncWithHttpInfo (string storeId, string format, ReportByDayRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByDayExport");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling AnalyticsReportsApi->GetStoreReportByDayExport");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByDayExport");

            var localVarPath = "/user/analytics/{storeId}/reports/byday/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByDayExport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeezUPCommonLink3>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BeezUPCommonLink3) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeezUPCommonLink3)));
            
        }

        /// <summary>
        /// Get the report by product Get the report by product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ReportByProductResponse</returns>
        public ReportByProductResponse GetStoreReportByProduct (string storeId, ReportByProductRequest request)
        {
             ApiResponse<ReportByProductResponse> localVarResponse = GetStoreReportByProductWithHttpInfo(storeId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the report by product Get the report by product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>ApiResponse of ReportByProductResponse</returns>
        public ApiResponse< ReportByProductResponse > GetStoreReportByProductWithHttpInfo (string storeId, ReportByProductRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByProduct");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByProduct");

            var localVarPath = "/user/analytics/{storeId}/reports/byproduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportByProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportByProductResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportByProductResponse)));
            
        }

        /// <summary>
        /// Get the report by product Get the report by product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ReportByProductResponse</returns>
        public async System.Threading.Tasks.Task<ReportByProductResponse> GetStoreReportByProductAsync (string storeId, ReportByProductRequest request)
        {
             ApiResponse<ReportByProductResponse> localVarResponse = await GetStoreReportByProductAsyncWithHttpInfo(storeId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the report by product Get the report by product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (ReportByProductResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportByProductResponse>> GetStoreReportByProductAsyncWithHttpInfo (string storeId, ReportByProductRequest request)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->GetStoreReportByProduct");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AnalyticsReportsApi->GetStoreReportByProduct");

            var localVarPath = "/user/analytics/{storeId}/reports/byproduct";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreReportByProduct", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportByProductResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportByProductResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportByProductResponse)));
            
        }

        /// <summary>
        /// Save the report filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <param name="reportFilter"></param>
        /// <returns></returns>
        public void SaveReportFilter (string storeId, string reportFilterId, SaveReportFilterRequest reportFilter)
        {
             SaveReportFilterWithHttpInfo(storeId, reportFilterId, reportFilter);
        }

        /// <summary>
        /// Save the report filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <param name="reportFilter"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SaveReportFilterWithHttpInfo (string storeId, string reportFilterId, SaveReportFilterRequest reportFilter)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->SaveReportFilter");
            // verify the required parameter 'reportFilterId' is set
            if (reportFilterId == null)
                throw new ApiException(400, "Missing required parameter 'reportFilterId' when calling AnalyticsReportsApi->SaveReportFilter");
            // verify the required parameter 'reportFilter' is set
            if (reportFilter == null)
                throw new ApiException(400, "Missing required parameter 'reportFilter' when calling AnalyticsReportsApi->SaveReportFilter");

            var localVarPath = "/user/analytics/{storeId}/reports/filters/{reportFilterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (reportFilterId != null) localVarPathParams.Add("reportFilterId", Configuration.ApiClient.ParameterToString(reportFilterId)); // path parameter
            if (reportFilter != null && reportFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reportFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportFilter; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveReportFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Save the report filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <param name="reportFilter"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveReportFilterAsync (string storeId, string reportFilterId, SaveReportFilterRequest reportFilter)
        {
             await SaveReportFilterAsyncWithHttpInfo(storeId, reportFilterId, reportFilter);

        }

        /// <summary>
        /// Save the report filter 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="reportFilterId">Your report filter identifier</param>
        /// <param name="reportFilter"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SaveReportFilterAsyncWithHttpInfo (string storeId, string reportFilterId, SaveReportFilterRequest reportFilter)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling AnalyticsReportsApi->SaveReportFilter");
            // verify the required parameter 'reportFilterId' is set
            if (reportFilterId == null)
                throw new ApiException(400, "Missing required parameter 'reportFilterId' when calling AnalyticsReportsApi->SaveReportFilter");
            // verify the required parameter 'reportFilter' is set
            if (reportFilter == null)
                throw new ApiException(400, "Missing required parameter 'reportFilter' when calling AnalyticsReportsApi->SaveReportFilter");

            var localVarPath = "/user/analytics/{storeId}/reports/filters/{reportFilterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (reportFilterId != null) localVarPathParams.Add("reportFilterId", Configuration.ApiClient.ParameterToString(reportFilterId)); // path parameter
            if (reportFilter != null && reportFilter.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reportFilter); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportFilter; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveReportFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
