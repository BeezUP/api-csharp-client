/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILOVApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all list names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BeezUPCommonLOVLink2&gt;</returns>
        List<BeezUPCommonLOVLink2> GetPublicListNames ();

        /// <summary>
        /// Get all list names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BeezUPCommonLOVLink2&gt;</returns>
        ApiResponse<List<BeezUPCommonLOVLink2>> GetPublicListNamesWithHttpInfo ();
        /// <summary>
        /// Get the list of values related to this list name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <returns>List&lt;BeezUPCommonListOfValueItem&gt;</returns>
        List<BeezUPCommonListOfValueItem> GetPublicListOfValues (string listName, List<string> acceptLanguage = null);

        /// <summary>
        /// Get the list of values related to this list name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <returns>ApiResponse of List&lt;BeezUPCommonListOfValueItem&gt;</returns>
        ApiResponse<List<BeezUPCommonListOfValueItem>> GetPublicListOfValuesWithHttpInfo (string listName, List<string> acceptLanguage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all list names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BeezUPCommonLOVLink2&gt;</returns>
        System.Threading.Tasks.Task<List<BeezUPCommonLOVLink2>> GetPublicListNamesAsync ();

        /// <summary>
        /// Get all list names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BeezUPCommonLOVLink2&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BeezUPCommonLOVLink2>>> GetPublicListNamesAsyncWithHttpInfo ();
        /// <summary>
        /// Get the list of values related to this list name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <returns>Task of List&lt;BeezUPCommonListOfValueItem&gt;</returns>
        System.Threading.Tasks.Task<List<BeezUPCommonListOfValueItem>> GetPublicListOfValuesAsync (string listName, List<string> acceptLanguage = null);

        /// <summary>
        /// Get the list of values related to this list name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BeezUPCommonListOfValueItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BeezUPCommonListOfValueItem>>> GetPublicListOfValuesAsyncWithHttpInfo (string listName, List<string> acceptLanguage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LOVApi : ILOVApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LOVApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LOVApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LOVApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LOVApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all list names 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BeezUPCommonLOVLink2&gt;</returns>
        public List<BeezUPCommonLOVLink2> GetPublicListNames ()
        {
             ApiResponse<List<BeezUPCommonLOVLink2>> localVarResponse = GetPublicListNamesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all list names 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BeezUPCommonLOVLink2&gt;</returns>
        public ApiResponse< List<BeezUPCommonLOVLink2> > GetPublicListNamesWithHttpInfo ()
        {

            var localVarPath = "/v2/public/lov/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicListNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BeezUPCommonLOVLink2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BeezUPCommonLOVLink2>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BeezUPCommonLOVLink2>)));
            
        }

        /// <summary>
        /// Get all list names 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BeezUPCommonLOVLink2&gt;</returns>
        public async System.Threading.Tasks.Task<List<BeezUPCommonLOVLink2>> GetPublicListNamesAsync ()
        {
             ApiResponse<List<BeezUPCommonLOVLink2>> localVarResponse = await GetPublicListNamesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all list names 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BeezUPCommonLOVLink2&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BeezUPCommonLOVLink2>>> GetPublicListNamesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/public/lov/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicListNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BeezUPCommonLOVLink2>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BeezUPCommonLOVLink2>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BeezUPCommonLOVLink2>)));
            
        }

        /// <summary>
        /// Get the list of values related to this list name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <returns>List&lt;BeezUPCommonListOfValueItem&gt;</returns>
        public List<BeezUPCommonListOfValueItem> GetPublicListOfValues (string listName, List<string> acceptLanguage = null)
        {
             ApiResponse<List<BeezUPCommonListOfValueItem>> localVarResponse = GetPublicListOfValuesWithHttpInfo(listName, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of values related to this list name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <returns>ApiResponse of List&lt;BeezUPCommonListOfValueItem&gt;</returns>
        public ApiResponse< List<BeezUPCommonListOfValueItem> > GetPublicListOfValuesWithHttpInfo (string listName, List<string> acceptLanguage = null)
        {
            // verify the required parameter 'listName' is set
            if (listName == null)
                throw new ApiException(400, "Missing required parameter 'listName' when calling LOVApi->GetPublicListOfValues");

            var localVarPath = "/v2/public/lov/{listName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (listName != null) localVarPathParams.Add("listName", Configuration.ApiClient.ParameterToString(listName)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicListOfValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BeezUPCommonListOfValueItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BeezUPCommonListOfValueItem>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BeezUPCommonListOfValueItem>)));
            
        }

        /// <summary>
        /// Get the list of values related to this list name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <returns>Task of List&lt;BeezUPCommonListOfValueItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<BeezUPCommonListOfValueItem>> GetPublicListOfValuesAsync (string listName, List<string> acceptLanguage = null)
        {
             ApiResponse<List<BeezUPCommonListOfValueItem>> localVarResponse = await GetPublicListOfValuesAsyncWithHttpInfo(listName, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of values related to this list name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BeezUPCommonListOfValueItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BeezUPCommonListOfValueItem>>> GetPublicListOfValuesAsyncWithHttpInfo (string listName, List<string> acceptLanguage = null)
        {
            // verify the required parameter 'listName' is set
            if (listName == null)
                throw new ApiException(400, "Missing required parameter 'listName' when calling LOVApi->GetPublicListOfValues");

            var localVarPath = "/v2/public/lov/{listName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (listName != null) localVarPathParams.Add("listName", Configuration.ApiClient.ParameterToString(listName)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicListOfValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BeezUPCommonListOfValueItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BeezUPCommonListOfValueItem>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BeezUPCommonListOfValueItem>)));
            
        }

    }
}
