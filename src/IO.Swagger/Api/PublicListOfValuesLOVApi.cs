/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicListOfValuesLOVApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the list of values related to this list name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>PublicListOfValuesResponse</returns>
        PublicListOfValuesResponse GetPublicListOfValues (string listName, List<string> acceptLanguage = null, string ifNoneMatch = null);

        /// <summary>
        /// Get the list of values related to this list name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>ApiResponse of PublicListOfValuesResponse</returns>
        ApiResponse<PublicListOfValuesResponse> GetPublicListOfValuesWithHttpInfo (string listName, List<string> acceptLanguage = null, string ifNoneMatch = null);
        /// <summary>
        /// Get all list names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>PublicLovIndex</returns>
        PublicLovIndex GetPublicLovIndex (string ifNoneMatch = null);

        /// <summary>
        /// Get all list names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>ApiResponse of PublicLovIndex</returns>
        ApiResponse<PublicLovIndex> GetPublicLovIndexWithHttpInfo (string ifNoneMatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the list of values related to this list name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of PublicListOfValuesResponse</returns>
        System.Threading.Tasks.Task<PublicListOfValuesResponse> GetPublicListOfValuesAsync (string listName, List<string> acceptLanguage = null, string ifNoneMatch = null);

        /// <summary>
        /// Get the list of values related to this list name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of ApiResponse (PublicListOfValuesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicListOfValuesResponse>> GetPublicListOfValuesAsyncWithHttpInfo (string listName, List<string> acceptLanguage = null, string ifNoneMatch = null);
        /// <summary>
        /// Get all list names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of PublicLovIndex</returns>
        System.Threading.Tasks.Task<PublicLovIndex> GetPublicLovIndexAsync (string ifNoneMatch = null);

        /// <summary>
        /// Get all list names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of ApiResponse (PublicLovIndex)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicLovIndex>> GetPublicLovIndexAsyncWithHttpInfo (string ifNoneMatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicListOfValuesLOVApi : IPublicListOfValuesLOVApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicListOfValuesLOVApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicListOfValuesLOVApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicListOfValuesLOVApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicListOfValuesLOVApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the list of values related to this list name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>PublicListOfValuesResponse</returns>
        public PublicListOfValuesResponse GetPublicListOfValues (string listName, List<string> acceptLanguage = null, string ifNoneMatch = null)
        {
             ApiResponse<PublicListOfValuesResponse> localVarResponse = GetPublicListOfValuesWithHttpInfo(listName, acceptLanguage, ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of values related to this list name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>ApiResponse of PublicListOfValuesResponse</returns>
        public ApiResponse< PublicListOfValuesResponse > GetPublicListOfValuesWithHttpInfo (string listName, List<string> acceptLanguage = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'listName' is set
            if (listName == null)
                throw new ApiException(400, "Missing required parameter 'listName' when calling PublicListOfValuesLOVApi->GetPublicListOfValues");

            var localVarPath = "/public/lov/{listName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (listName != null) localVarPathParams.Add("listName", Configuration.ApiClient.ParameterToString(listName)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicListOfValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicListOfValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicListOfValuesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicListOfValuesResponse)));
            
        }

        /// <summary>
        /// Get the list of values related to this list name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of PublicListOfValuesResponse</returns>
        public async System.Threading.Tasks.Task<PublicListOfValuesResponse> GetPublicListOfValuesAsync (string listName, List<string> acceptLanguage = null, string ifNoneMatch = null)
        {
             ApiResponse<PublicListOfValuesResponse> localVarResponse = await GetPublicListOfValuesAsyncWithHttpInfo(listName, acceptLanguage, ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of values related to this list name 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listName">The list of value name your want to get</param>
        /// <param name="acceptLanguage">Indicates that the client accepts the following languages. (optional)</param>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of ApiResponse (PublicListOfValuesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicListOfValuesResponse>> GetPublicListOfValuesAsyncWithHttpInfo (string listName, List<string> acceptLanguage = null, string ifNoneMatch = null)
        {
            // verify the required parameter 'listName' is set
            if (listName == null)
                throw new ApiException(400, "Missing required parameter 'listName' when calling PublicListOfValuesLOVApi->GetPublicListOfValues");

            var localVarPath = "/public/lov/{listName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (listName != null) localVarPathParams.Add("listName", Configuration.ApiClient.ParameterToString(listName)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicListOfValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicListOfValuesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicListOfValuesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicListOfValuesResponse)));
            
        }

        /// <summary>
        /// Get all list names 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>PublicLovIndex</returns>
        public PublicLovIndex GetPublicLovIndex (string ifNoneMatch = null)
        {
             ApiResponse<PublicLovIndex> localVarResponse = GetPublicLovIndexWithHttpInfo(ifNoneMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all list names 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>ApiResponse of PublicLovIndex</returns>
        public ApiResponse< PublicLovIndex > GetPublicLovIndexWithHttpInfo (string ifNoneMatch = null)
        {

            var localVarPath = "/public/lov/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicLovIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicLovIndex>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicLovIndex) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicLovIndex)));
            
        }

        /// <summary>
        /// Get all list names 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of PublicLovIndex</returns>
        public async System.Threading.Tasks.Task<PublicLovIndex> GetPublicLovIndexAsync (string ifNoneMatch = null)
        {
             ApiResponse<PublicLovIndex> localVarResponse = await GetPublicLovIndexAsyncWithHttpInfo(ifNoneMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all list names 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ifNoneMatch">ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3  (optional)</param>
        /// <returns>Task of ApiResponse (PublicLovIndex)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicLovIndex>> GetPublicLovIndexAsyncWithHttpInfo (string ifNoneMatch = null)
        {

            var localVarPath = "/public/lov/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ifNoneMatch != null) localVarHeaderParams.Add("If-None-Match", Configuration.ApiClient.ParameterToString(ifNoneMatch)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublicLovIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicLovIndex>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicLovIndex) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicLovIndex)));
            
        }

    }
}
