/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IV2UserMarketplacesChannelCatalogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the marketplace properties for a channel catalog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId"></param>
        /// <returns>ChannelCatalogMarketplaceProperties</returns>
        ChannelCatalogMarketplaceProperties GetChannelCatalogMarketplaceProperties (string channelCatalogId);

        /// <summary>
        /// Get the marketplace properties for a channel catalog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId"></param>
        /// <returns>ApiResponse of ChannelCatalogMarketplaceProperties</returns>
        ApiResponse<ChannelCatalogMarketplaceProperties> GetChannelCatalogMarketplacePropertiesWithHttpInfo (string channelCatalogId);
        /// <summary>
        /// Get the marketplace settings for a channel catalog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query (required)</param>
        /// <returns>ChannelCatalogMarketplaceSettings</returns>
        ChannelCatalogMarketplaceSettings GetChannelCatalogMarketplaceSettings (string channelCatalogId);

        /// <summary>
        /// Get the marketplace settings for a channel catalog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query (required)</param>
        /// <returns>ApiResponse of ChannelCatalogMarketplaceSettings</returns>
        ApiResponse<ChannelCatalogMarketplaceSettings> GetChannelCatalogMarketplaceSettingsWithHttpInfo (string channelCatalogId);
        /// <summary>
        /// Get  you marketplace channel catalog list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketplaceChannelCatalogList</returns>
        MarketplaceChannelCatalogList GetMarketplaceAccountStores ();

        /// <summary>
        /// Get  you marketplace channel catalog list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketplaceChannelCatalogList</returns>
        ApiResponse<MarketplaceChannelCatalogList> GetMarketplaceAccountStoresWithHttpInfo ();
        /// <summary>
        /// Fetch the publication history for an account, sorted by descending start date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
        /// <param name="accountId">Account Id to query (required)</param>
        /// <param name="channelCatalogId">Channel Catalog Id by which to filter (optional) (optional)</param>
        /// <param name="count">Amount of entries to fetch (optional, default set to 10) (optional, default to 10)</param>
        /// <param name="publicationTypes">Publication types by which to filter (optional) (optional)</param>
        /// <returns>AccountPublications</returns>
        AccountPublications GetPublications (string marketplaceTechnicalCode, int? accountId, string channelCatalogId = null, int? count = null, List<string> publicationTypes = null);

        /// <summary>
        /// Fetch the publication history for an account, sorted by descending start date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
        /// <param name="accountId">Account Id to query (required)</param>
        /// <param name="channelCatalogId">Channel Catalog Id by which to filter (optional) (optional)</param>
        /// <param name="count">Amount of entries to fetch (optional, default set to 10) (optional, default to 10)</param>
        /// <param name="publicationTypes">Publication types by which to filter (optional) (optional)</param>
        /// <returns>ApiResponse of AccountPublications</returns>
        ApiResponse<AccountPublications> GetPublicationsWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string channelCatalogId = null, int? count = null, List<string> publicationTypes = null);
        /// <summary>
        /// Save new marketplace settings for a channel catalog
        /// </summary>
        /// <remarks>
        /// Allow you to configure your marketplace settings.  Partial update accepted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query</param>
        /// <param name="model">Settings to save</param>
        /// <returns></returns>
        void SetChannelCatalogMarketplaceSettings (string channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model);

        /// <summary>
        /// Save new marketplace settings for a channel catalog
        /// </summary>
        /// <remarks>
        /// Allow you to configure your marketplace settings.  Partial update accepted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query</param>
        /// <param name="model">Settings to save</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetChannelCatalogMarketplaceSettingsWithHttpInfo (string channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the marketplace properties for a channel catalog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId"></param>
        /// <returns>Task of ChannelCatalogMarketplaceProperties</returns>
        System.Threading.Tasks.Task<ChannelCatalogMarketplaceProperties> GetChannelCatalogMarketplacePropertiesAsync (string channelCatalogId);

        /// <summary>
        /// Get the marketplace properties for a channel catalog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId"></param>
        /// <returns>Task of ApiResponse (ChannelCatalogMarketplaceProperties)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelCatalogMarketplaceProperties>> GetChannelCatalogMarketplacePropertiesAsyncWithHttpInfo (string channelCatalogId);
        /// <summary>
        /// Get the marketplace settings for a channel catalog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query (required)</param>
        /// <returns>Task of ChannelCatalogMarketplaceSettings</returns>
        System.Threading.Tasks.Task<ChannelCatalogMarketplaceSettings> GetChannelCatalogMarketplaceSettingsAsync (string channelCatalogId);

        /// <summary>
        /// Get the marketplace settings for a channel catalog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query (required)</param>
        /// <returns>Task of ApiResponse (ChannelCatalogMarketplaceSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelCatalogMarketplaceSettings>> GetChannelCatalogMarketplaceSettingsAsyncWithHttpInfo (string channelCatalogId);
        /// <summary>
        /// Get  you marketplace channel catalog list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketplaceChannelCatalogList</returns>
        System.Threading.Tasks.Task<MarketplaceChannelCatalogList> GetMarketplaceAccountStoresAsync ();

        /// <summary>
        /// Get  you marketplace channel catalog list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketplaceChannelCatalogList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MarketplaceChannelCatalogList>> GetMarketplaceAccountStoresAsyncWithHttpInfo ();
        /// <summary>
        /// Fetch the publication history for an account, sorted by descending start date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
        /// <param name="accountId">Account Id to query (required)</param>
        /// <param name="channelCatalogId">Channel Catalog Id by which to filter (optional) (optional)</param>
        /// <param name="count">Amount of entries to fetch (optional, default set to 10) (optional, default to 10)</param>
        /// <param name="publicationTypes">Publication types by which to filter (optional) (optional)</param>
        /// <returns>Task of AccountPublications</returns>
        System.Threading.Tasks.Task<AccountPublications> GetPublicationsAsync (string marketplaceTechnicalCode, int? accountId, string channelCatalogId = null, int? count = null, List<string> publicationTypes = null);

        /// <summary>
        /// Fetch the publication history for an account, sorted by descending start date
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
        /// <param name="accountId">Account Id to query (required)</param>
        /// <param name="channelCatalogId">Channel Catalog Id by which to filter (optional) (optional)</param>
        /// <param name="count">Amount of entries to fetch (optional, default set to 10) (optional, default to 10)</param>
        /// <param name="publicationTypes">Publication types by which to filter (optional) (optional)</param>
        /// <returns>Task of ApiResponse (AccountPublications)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPublications>> GetPublicationsAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string channelCatalogId = null, int? count = null, List<string> publicationTypes = null);
        /// <summary>
        /// Save new marketplace settings for a channel catalog
        /// </summary>
        /// <remarks>
        /// Allow you to configure your marketplace settings.  Partial update accepted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query</param>
        /// <param name="model">Settings to save</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetChannelCatalogMarketplaceSettingsAsync (string channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model);

        /// <summary>
        /// Save new marketplace settings for a channel catalog
        /// </summary>
        /// <remarks>
        /// Allow you to configure your marketplace settings.  Partial update accepted. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query</param>
        /// <param name="model">Settings to save</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetChannelCatalogMarketplaceSettingsAsyncWithHttpInfo (string channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class V2UserMarketplacesChannelCatalogsApi : IV2UserMarketplacesChannelCatalogsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="V2UserMarketplacesChannelCatalogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public V2UserMarketplacesChannelCatalogsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V2UserMarketplacesChannelCatalogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public V2UserMarketplacesChannelCatalogsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the marketplace properties for a channel catalog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId"></param>
        /// <returns>ChannelCatalogMarketplaceProperties</returns>
        public ChannelCatalogMarketplaceProperties GetChannelCatalogMarketplaceProperties (string channelCatalogId)
        {
             ApiResponse<ChannelCatalogMarketplaceProperties> localVarResponse = GetChannelCatalogMarketplacePropertiesWithHttpInfo(channelCatalogId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the marketplace properties for a channel catalog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId"></param>
        /// <returns>ApiResponse of ChannelCatalogMarketplaceProperties</returns>
        public ApiResponse< ChannelCatalogMarketplaceProperties > GetChannelCatalogMarketplacePropertiesWithHttpInfo (string channelCatalogId)
        {
            // verify the required parameter 'channelCatalogId' is set
            if (channelCatalogId == null)
                throw new ApiException(400, "Missing required parameter 'channelCatalogId' when calling V2UserMarketplacesChannelCatalogsApi->GetChannelCatalogMarketplaceProperties");

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (channelCatalogId != null) localVarPathParams.Add("channelCatalogId", Configuration.ApiClient.ParameterToString(channelCatalogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelCatalogMarketplaceProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelCatalogMarketplaceProperties>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelCatalogMarketplaceProperties) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelCatalogMarketplaceProperties)));
            
        }

        /// <summary>
        /// Get the marketplace properties for a channel catalog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId"></param>
        /// <returns>Task of ChannelCatalogMarketplaceProperties</returns>
        public async System.Threading.Tasks.Task<ChannelCatalogMarketplaceProperties> GetChannelCatalogMarketplacePropertiesAsync (string channelCatalogId)
        {
             ApiResponse<ChannelCatalogMarketplaceProperties> localVarResponse = await GetChannelCatalogMarketplacePropertiesAsyncWithHttpInfo(channelCatalogId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the marketplace properties for a channel catalog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId"></param>
        /// <returns>Task of ApiResponse (ChannelCatalogMarketplaceProperties)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelCatalogMarketplaceProperties>> GetChannelCatalogMarketplacePropertiesAsyncWithHttpInfo (string channelCatalogId)
        {
            // verify the required parameter 'channelCatalogId' is set
            if (channelCatalogId == null)
                throw new ApiException(400, "Missing required parameter 'channelCatalogId' when calling V2UserMarketplacesChannelCatalogsApi->GetChannelCatalogMarketplaceProperties");

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (channelCatalogId != null) localVarPathParams.Add("channelCatalogId", Configuration.ApiClient.ParameterToString(channelCatalogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelCatalogMarketplaceProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelCatalogMarketplaceProperties>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelCatalogMarketplaceProperties) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelCatalogMarketplaceProperties)));
            
        }

        /// <summary>
        /// Get the marketplace settings for a channel catalog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query (required)</param>
        /// <returns>ChannelCatalogMarketplaceSettings</returns>
        public ChannelCatalogMarketplaceSettings GetChannelCatalogMarketplaceSettings (string channelCatalogId)
        {
             ApiResponse<ChannelCatalogMarketplaceSettings> localVarResponse = GetChannelCatalogMarketplaceSettingsWithHttpInfo(channelCatalogId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the marketplace settings for a channel catalog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query (required)</param>
        /// <returns>ApiResponse of ChannelCatalogMarketplaceSettings</returns>
        public ApiResponse< ChannelCatalogMarketplaceSettings > GetChannelCatalogMarketplaceSettingsWithHttpInfo (string channelCatalogId)
        {
            // verify the required parameter 'channelCatalogId' is set
            if (channelCatalogId == null)
                throw new ApiException(400, "Missing required parameter 'channelCatalogId' when calling V2UserMarketplacesChannelCatalogsApi->GetChannelCatalogMarketplaceSettings");

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (channelCatalogId != null) localVarPathParams.Add("channelCatalogId", Configuration.ApiClient.ParameterToString(channelCatalogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelCatalogMarketplaceSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelCatalogMarketplaceSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelCatalogMarketplaceSettings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelCatalogMarketplaceSettings)));
            
        }

        /// <summary>
        /// Get the marketplace settings for a channel catalog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query (required)</param>
        /// <returns>Task of ChannelCatalogMarketplaceSettings</returns>
        public async System.Threading.Tasks.Task<ChannelCatalogMarketplaceSettings> GetChannelCatalogMarketplaceSettingsAsync (string channelCatalogId)
        {
             ApiResponse<ChannelCatalogMarketplaceSettings> localVarResponse = await GetChannelCatalogMarketplaceSettingsAsyncWithHttpInfo(channelCatalogId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the marketplace settings for a channel catalog 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query (required)</param>
        /// <returns>Task of ApiResponse (ChannelCatalogMarketplaceSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelCatalogMarketplaceSettings>> GetChannelCatalogMarketplaceSettingsAsyncWithHttpInfo (string channelCatalogId)
        {
            // verify the required parameter 'channelCatalogId' is set
            if (channelCatalogId == null)
                throw new ApiException(400, "Missing required parameter 'channelCatalogId' when calling V2UserMarketplacesChannelCatalogsApi->GetChannelCatalogMarketplaceSettings");

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (channelCatalogId != null) localVarPathParams.Add("channelCatalogId", Configuration.ApiClient.ParameterToString(channelCatalogId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelCatalogMarketplaceSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelCatalogMarketplaceSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelCatalogMarketplaceSettings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelCatalogMarketplaceSettings)));
            
        }

        /// <summary>
        /// Get  you marketplace channel catalog list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MarketplaceChannelCatalogList</returns>
        public MarketplaceChannelCatalogList GetMarketplaceAccountStores ()
        {
             ApiResponse<MarketplaceChannelCatalogList> localVarResponse = GetMarketplaceAccountStoresWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get  you marketplace channel catalog list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MarketplaceChannelCatalogList</returns>
        public ApiResponse< MarketplaceChannelCatalogList > GetMarketplaceAccountStoresWithHttpInfo ()
        {

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketplaceAccountStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketplaceChannelCatalogList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarketplaceChannelCatalogList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketplaceChannelCatalogList)));
            
        }

        /// <summary>
        /// Get  you marketplace channel catalog list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MarketplaceChannelCatalogList</returns>
        public async System.Threading.Tasks.Task<MarketplaceChannelCatalogList> GetMarketplaceAccountStoresAsync ()
        {
             ApiResponse<MarketplaceChannelCatalogList> localVarResponse = await GetMarketplaceAccountStoresAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get  you marketplace channel catalog list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MarketplaceChannelCatalogList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MarketplaceChannelCatalogList>> GetMarketplaceAccountStoresAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMarketplaceAccountStores", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MarketplaceChannelCatalogList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MarketplaceChannelCatalogList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MarketplaceChannelCatalogList)));
            
        }

        /// <summary>
        /// Fetch the publication history for an account, sorted by descending start date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
        /// <param name="accountId">Account Id to query (required)</param>
        /// <param name="channelCatalogId">Channel Catalog Id by which to filter (optional) (optional)</param>
        /// <param name="count">Amount of entries to fetch (optional, default set to 10) (optional, default to 10)</param>
        /// <param name="publicationTypes">Publication types by which to filter (optional) (optional)</param>
        /// <returns>AccountPublications</returns>
        public AccountPublications GetPublications (string marketplaceTechnicalCode, int? accountId, string channelCatalogId = null, int? count = null, List<string> publicationTypes = null)
        {
             ApiResponse<AccountPublications> localVarResponse = GetPublicationsWithHttpInfo(marketplaceTechnicalCode, accountId, channelCatalogId, count, publicationTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the publication history for an account, sorted by descending start date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
        /// <param name="accountId">Account Id to query (required)</param>
        /// <param name="channelCatalogId">Channel Catalog Id by which to filter (optional) (optional)</param>
        /// <param name="count">Amount of entries to fetch (optional, default set to 10) (optional, default to 10)</param>
        /// <param name="publicationTypes">Publication types by which to filter (optional) (optional)</param>
        /// <returns>ApiResponse of AccountPublications</returns>
        public ApiResponse< AccountPublications > GetPublicationsWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string channelCatalogId = null, int? count = null, List<string> publicationTypes = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesChannelCatalogsApi->GetPublications");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesChannelCatalogsApi->GetPublications");

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/publications/{marketplaceTechnicalCode}/{accountId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (channelCatalogId != null) localVarQueryParams.Add("channelCatalogId", Configuration.ApiClient.ParameterToString(channelCatalogId)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (publicationTypes != null) localVarQueryParams.Add("publicationTypes", Configuration.ApiClient.ParameterToString(publicationTypes)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPublications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPublications) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPublications)));
            
        }

        /// <summary>
        /// Fetch the publication history for an account, sorted by descending start date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
        /// <param name="accountId">Account Id to query (required)</param>
        /// <param name="channelCatalogId">Channel Catalog Id by which to filter (optional) (optional)</param>
        /// <param name="count">Amount of entries to fetch (optional, default set to 10) (optional, default to 10)</param>
        /// <param name="publicationTypes">Publication types by which to filter (optional) (optional)</param>
        /// <returns>Task of AccountPublications</returns>
        public async System.Threading.Tasks.Task<AccountPublications> GetPublicationsAsync (string marketplaceTechnicalCode, int? accountId, string channelCatalogId = null, int? count = null, List<string> publicationTypes = null)
        {
             ApiResponse<AccountPublications> localVarResponse = await GetPublicationsAsyncWithHttpInfo(marketplaceTechnicalCode, accountId, channelCatalogId, count, publicationTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch the publication history for an account, sorted by descending start date 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceTechnicalCode">Marketplace Technical Code to query (required)</param>
        /// <param name="accountId">Account Id to query (required)</param>
        /// <param name="channelCatalogId">Channel Catalog Id by which to filter (optional) (optional)</param>
        /// <param name="count">Amount of entries to fetch (optional, default set to 10) (optional, default to 10)</param>
        /// <param name="publicationTypes">Publication types by which to filter (optional) (optional)</param>
        /// <returns>Task of ApiResponse (AccountPublications)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPublications>> GetPublicationsAsyncWithHttpInfo (string marketplaceTechnicalCode, int? accountId, string channelCatalogId = null, int? count = null, List<string> publicationTypes = null)
        {
            // verify the required parameter 'marketplaceTechnicalCode' is set
            if (marketplaceTechnicalCode == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceTechnicalCode' when calling V2UserMarketplacesChannelCatalogsApi->GetPublications");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling V2UserMarketplacesChannelCatalogsApi->GetPublications");

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/publications/{marketplaceTechnicalCode}/{accountId}/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (marketplaceTechnicalCode != null) localVarPathParams.Add("marketplaceTechnicalCode", Configuration.ApiClient.ParameterToString(marketplaceTechnicalCode)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (channelCatalogId != null) localVarQueryParams.Add("channelCatalogId", Configuration.ApiClient.ParameterToString(channelCatalogId)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (publicationTypes != null) localVarQueryParams.Add("publicationTypes", Configuration.ApiClient.ParameterToString(publicationTypes)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPublications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPublications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPublications) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPublications)));
            
        }

        /// <summary>
        /// Save new marketplace settings for a channel catalog Allow you to configure your marketplace settings.  Partial update accepted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query</param>
        /// <param name="model">Settings to save</param>
        /// <returns></returns>
        public void SetChannelCatalogMarketplaceSettings (string channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model)
        {
             SetChannelCatalogMarketplaceSettingsWithHttpInfo(channelCatalogId, model);
        }

        /// <summary>
        /// Save new marketplace settings for a channel catalog Allow you to configure your marketplace settings.  Partial update accepted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query</param>
        /// <param name="model">Settings to save</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetChannelCatalogMarketplaceSettingsWithHttpInfo (string channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model)
        {
            // verify the required parameter 'channelCatalogId' is set
            if (channelCatalogId == null)
                throw new ApiException(400, "Missing required parameter 'channelCatalogId' when calling V2UserMarketplacesChannelCatalogsApi->SetChannelCatalogMarketplaceSettings");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling V2UserMarketplacesChannelCatalogsApi->SetChannelCatalogMarketplaceSettings");

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (channelCatalogId != null) localVarPathParams.Add("channelCatalogId", Configuration.ApiClient.ParameterToString(channelCatalogId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChannelCatalogMarketplaceSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Save new marketplace settings for a channel catalog Allow you to configure your marketplace settings.  Partial update accepted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query</param>
        /// <param name="model">Settings to save</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetChannelCatalogMarketplaceSettingsAsync (string channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model)
        {
             await SetChannelCatalogMarketplaceSettingsAsyncWithHttpInfo(channelCatalogId, model);

        }

        /// <summary>
        /// Save new marketplace settings for a channel catalog Allow you to configure your marketplace settings.  Partial update accepted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelCatalogId">Channel Catalog Id to query</param>
        /// <param name="model">Settings to save</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetChannelCatalogMarketplaceSettingsAsyncWithHttpInfo (string channelCatalogId, SetChannelCatalogMarketplaceSettingsRequest model)
        {
            // verify the required parameter 'channelCatalogId' is set
            if (channelCatalogId == null)
                throw new ApiException(400, "Missing required parameter 'channelCatalogId' when calling V2UserMarketplacesChannelCatalogsApi->SetChannelCatalogMarketplaceSettings");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling V2UserMarketplacesChannelCatalogsApi->SetChannelCatalogMarketplaceSettings");

            var localVarPath = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (channelCatalogId != null) localVarPathParams.Add("channelCatalogId", Configuration.ApiClient.ParameterToString(channelCatalogId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChannelCatalogMarketplaceSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
