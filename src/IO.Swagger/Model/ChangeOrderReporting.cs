/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The reporting related to a change order operation
    /// </summary>
    [DataContract]
    public partial class ChangeOrderReporting :  IEquatable<ChangeOrderReporting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeOrderReporting" /> class.
        /// </summary>
        /// <param name="ExecutionUUID">ExecutionUUID.</param>
        /// <param name="ChangeOrderType">ChangeOrderType.</param>
        /// <param name="SourceType">SourceType.</param>
        /// <param name="SourceUserId">SourceUserId.</param>
        /// <param name="SourceUserName">SourceUserName.</param>
        /// <param name="CreationUtcDate">The creation UTC date of the execution.</param>
        /// <param name="ProcessingStatus">The processing status of the execution.</param>
        /// <param name="LastUpdateUtcDate">The last update UTC date of the execution.</param>
        /// <param name="ErrorMessage">The error message during the execution.</param>
        /// <param name="IpAddress">The IP address who request this operation.</param>
        /// <param name="TestMode">This operation was a test.</param>
        /// <param name="Details">Details.</param>
        public ChangeOrderReporting(ExecutionUUID ExecutionUUID = default(ExecutionUUID), BusinessOperationType ChangeOrderType = default(BusinessOperationType), SourceType SourceType = default(SourceType), BeezUPCommonUserId SourceUserId = default(BeezUPCommonUserId), string SourceUserName = default(string), DateTime? CreationUtcDate = default(DateTime?), string ProcessingStatus = default(string), DateTime? LastUpdateUtcDate = default(DateTime?), string ErrorMessage = default(string), string IpAddress = default(string), bool? TestMode = default(bool?), Dictionary<string, Object> Details = default(Dictionary<string, Object>))
        {
            this.ExecutionUUID = ExecutionUUID;
            this.ChangeOrderType = ChangeOrderType;
            this.SourceType = SourceType;
            this.SourceUserId = SourceUserId;
            this.SourceUserName = SourceUserName;
            this.CreationUtcDate = CreationUtcDate;
            this.ProcessingStatus = ProcessingStatus;
            this.LastUpdateUtcDate = LastUpdateUtcDate;
            this.ErrorMessage = ErrorMessage;
            this.IpAddress = IpAddress;
            this.TestMode = TestMode;
            this.Details = Details;
        }
        
        /// <summary>
        /// Gets or Sets ExecutionUUID
        /// </summary>
        [DataMember(Name="executionUUID", EmitDefaultValue=false)]
        public ExecutionUUID ExecutionUUID { get; set; }
        /// <summary>
        /// Gets or Sets ChangeOrderType
        /// </summary>
        [DataMember(Name="changeOrderType", EmitDefaultValue=false)]
        public BusinessOperationType ChangeOrderType { get; set; }
        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public SourceType SourceType { get; set; }
        /// <summary>
        /// Gets or Sets SourceUserId
        /// </summary>
        [DataMember(Name="sourceUserId", EmitDefaultValue=false)]
        public BeezUPCommonUserId SourceUserId { get; set; }
        /// <summary>
        /// Gets or Sets SourceUserName
        /// </summary>
        [DataMember(Name="sourceUserName", EmitDefaultValue=false)]
        public string SourceUserName { get; set; }
        /// <summary>
        /// The creation UTC date of the execution
        /// </summary>
        /// <value>The creation UTC date of the execution</value>
        [DataMember(Name="creationUtcDate", EmitDefaultValue=false)]
        public DateTime? CreationUtcDate { get; set; }
        /// <summary>
        /// The processing status of the execution
        /// </summary>
        /// <value>The processing status of the execution</value>
        [DataMember(Name="processingStatus", EmitDefaultValue=false)]
        public string ProcessingStatus { get; set; }
        /// <summary>
        /// The last update UTC date of the execution
        /// </summary>
        /// <value>The last update UTC date of the execution</value>
        [DataMember(Name="lastUpdateUtcDate", EmitDefaultValue=false)]
        public DateTime? LastUpdateUtcDate { get; set; }
        /// <summary>
        /// The error message during the execution
        /// </summary>
        /// <value>The error message during the execution</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }
        /// <summary>
        /// The IP address who request this operation
        /// </summary>
        /// <value>The IP address who request this operation</value>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }
        /// <summary>
        /// This operation was a test
        /// </summary>
        /// <value>This operation was a test</value>
        [DataMember(Name="testMode", EmitDefaultValue=false)]
        public bool? TestMode { get; set; }
        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public Dictionary<string, Object> Details { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeOrderReporting {\n");
            sb.Append("  ExecutionUUID: ").Append(ExecutionUUID).Append("\n");
            sb.Append("  ChangeOrderType: ").Append(ChangeOrderType).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SourceUserId: ").Append(SourceUserId).Append("\n");
            sb.Append("  SourceUserName: ").Append(SourceUserName).Append("\n");
            sb.Append("  CreationUtcDate: ").Append(CreationUtcDate).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  LastUpdateUtcDate: ").Append(LastUpdateUtcDate).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChangeOrderReporting);
        }

        /// <summary>
        /// Returns true if ChangeOrderReporting instances are equal
        /// </summary>
        /// <param name="other">Instance of ChangeOrderReporting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeOrderReporting other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExecutionUUID == other.ExecutionUUID ||
                    this.ExecutionUUID != null &&
                    this.ExecutionUUID.Equals(other.ExecutionUUID)
                ) && 
                (
                    this.ChangeOrderType == other.ChangeOrderType ||
                    this.ChangeOrderType != null &&
                    this.ChangeOrderType.Equals(other.ChangeOrderType)
                ) && 
                (
                    this.SourceType == other.SourceType ||
                    this.SourceType != null &&
                    this.SourceType.Equals(other.SourceType)
                ) && 
                (
                    this.SourceUserId == other.SourceUserId ||
                    this.SourceUserId != null &&
                    this.SourceUserId.Equals(other.SourceUserId)
                ) && 
                (
                    this.SourceUserName == other.SourceUserName ||
                    this.SourceUserName != null &&
                    this.SourceUserName.Equals(other.SourceUserName)
                ) && 
                (
                    this.CreationUtcDate == other.CreationUtcDate ||
                    this.CreationUtcDate != null &&
                    this.CreationUtcDate.Equals(other.CreationUtcDate)
                ) && 
                (
                    this.ProcessingStatus == other.ProcessingStatus ||
                    this.ProcessingStatus != null &&
                    this.ProcessingStatus.Equals(other.ProcessingStatus)
                ) && 
                (
                    this.LastUpdateUtcDate == other.LastUpdateUtcDate ||
                    this.LastUpdateUtcDate != null &&
                    this.LastUpdateUtcDate.Equals(other.LastUpdateUtcDate)
                ) && 
                (
                    this.ErrorMessage == other.ErrorMessage ||
                    this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    this.IpAddress == other.IpAddress ||
                    this.IpAddress != null &&
                    this.IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    this.TestMode == other.TestMode ||
                    this.TestMode != null &&
                    this.TestMode.Equals(other.TestMode)
                ) && 
                (
                    this.Details == other.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(other.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExecutionUUID != null)
                    hash = hash * 59 + this.ExecutionUUID.GetHashCode();
                if (this.ChangeOrderType != null)
                    hash = hash * 59 + this.ChangeOrderType.GetHashCode();
                if (this.SourceType != null)
                    hash = hash * 59 + this.SourceType.GetHashCode();
                if (this.SourceUserId != null)
                    hash = hash * 59 + this.SourceUserId.GetHashCode();
                if (this.SourceUserName != null)
                    hash = hash * 59 + this.SourceUserName.GetHashCode();
                if (this.CreationUtcDate != null)
                    hash = hash * 59 + this.CreationUtcDate.GetHashCode();
                if (this.ProcessingStatus != null)
                    hash = hash * 59 + this.ProcessingStatus.GetHashCode();
                if (this.LastUpdateUtcDate != null)
                    hash = hash * 59 + this.LastUpdateUtcDate.GetHashCode();
                if (this.ErrorMessage != null)
                    hash = hash * 59 + this.ErrorMessage.GetHashCode();
                if (this.IpAddress != null)
                    hash = hash * 59 + this.IpAddress.GetHashCode();
                if (this.TestMode != null)
                    hash = hash * 59 + this.TestMode.GetHashCode();
                if (this.Details != null)
                    hash = hash * 59 + this.Details.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
