/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The navigation links &#39;first&#39;, &#39;last&#39;, &#39;next&#39;, &#39;previous&#39;
    /// </summary>
    [DataContract]
    public partial class BeezUPCommonPaginationResultLinks :  IEquatable<BeezUPCommonPaginationResultLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BeezUPCommonPaginationResultLinks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BeezUPCommonPaginationResultLinks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BeezUPCommonPaginationResultLinks" /> class.
        /// </summary>
        /// <param name="First">First (required).</param>
        /// <param name="Last">Last (required).</param>
        /// <param name="Previous">Previous.</param>
        /// <param name="Next">Next.</param>
        public BeezUPCommonPaginationResultLinks(BeezUPCommonLink3 First = default(BeezUPCommonLink3), BeezUPCommonLink3 Last = default(BeezUPCommonLink3), BeezUPCommonLink3 Previous = default(BeezUPCommonLink3), BeezUPCommonLink3 Next = default(BeezUPCommonLink3))
        {
            // to ensure "First" is required (not null)
            if (First == null)
            {
                throw new InvalidDataException("First is a required property for BeezUPCommonPaginationResultLinks and cannot be null");
            }
            else
            {
                this.First = First;
            }
            // to ensure "Last" is required (not null)
            if (Last == null)
            {
                throw new InvalidDataException("Last is a required property for BeezUPCommonPaginationResultLinks and cannot be null");
            }
            else
            {
                this.Last = Last;
            }
            this.Previous = Previous;
            this.Next = Next;
        }
        
        /// <summary>
        /// Gets or Sets First
        /// </summary>
        [DataMember(Name="first", EmitDefaultValue=false)]
        public BeezUPCommonLink3 First { get; set; }
        /// <summary>
        /// Gets or Sets Last
        /// </summary>
        [DataMember(Name="last", EmitDefaultValue=false)]
        public BeezUPCommonLink3 Last { get; set; }
        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [DataMember(Name="previous", EmitDefaultValue=false)]
        public BeezUPCommonLink3 Previous { get; set; }
        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public BeezUPCommonLink3 Next { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeezUPCommonPaginationResultLinks {\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BeezUPCommonPaginationResultLinks);
        }

        /// <summary>
        /// Returns true if BeezUPCommonPaginationResultLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of BeezUPCommonPaginationResultLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeezUPCommonPaginationResultLinks other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.First == other.First ||
                    this.First != null &&
                    this.First.Equals(other.First)
                ) && 
                (
                    this.Last == other.Last ||
                    this.Last != null &&
                    this.Last.Equals(other.Last)
                ) && 
                (
                    this.Previous == other.Previous ||
                    this.Previous != null &&
                    this.Previous.Equals(other.Previous)
                ) && 
                (
                    this.Next == other.Next ||
                    this.Next != null &&
                    this.Next.Equals(other.Next)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.First != null)
                    hash = hash * 59 + this.First.GetHashCode();
                if (this.Last != null)
                    hash = hash * 59 + this.Last.GetHashCode();
                if (this.Previous != null)
                    hash = hash * 59 + this.Previous.GetHashCode();
                if (this.Next != null)
                    hash = hash * 59 + this.Next.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
