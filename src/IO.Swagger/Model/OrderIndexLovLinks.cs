/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Gives you all the LOV to get the translations realated to operation name, codes, property names and statuses.
    /// </summary>
    [DataContract]
    public partial class OrderIndexLovLinks :  IEquatable<OrderIndexLovLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderIndexLovLinks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderIndexLovLinks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderIndexLovLinks" /> class.
        /// </summary>
        /// <param name="OrderChangeBusinessOperationType">OrderChangeBusinessOperationType (required).</param>
        /// <param name="OrderState">OrderState (required).</param>
        /// <param name="OrderProperty">OrderProperty (required).</param>
        /// <param name="OrderPropertyPosted">OrderPropertyPosted (required).</param>
        public OrderIndexLovLinks(BeezUPCommonLOVLink3 OrderChangeBusinessOperationType = default(BeezUPCommonLOVLink3), BeezUPCommonLOVLink3 OrderState = default(BeezUPCommonLOVLink3), BeezUPCommonLOVLink3 OrderProperty = default(BeezUPCommonLOVLink3), BeezUPCommonLOVLink3 OrderPropertyPosted = default(BeezUPCommonLOVLink3))
        {
            // to ensure "OrderChangeBusinessOperationType" is required (not null)
            if (OrderChangeBusinessOperationType == null)
            {
                throw new InvalidDataException("OrderChangeBusinessOperationType is a required property for OrderIndexLovLinks and cannot be null");
            }
            else
            {
                this.OrderChangeBusinessOperationType = OrderChangeBusinessOperationType;
            }
            // to ensure "OrderState" is required (not null)
            if (OrderState == null)
            {
                throw new InvalidDataException("OrderState is a required property for OrderIndexLovLinks and cannot be null");
            }
            else
            {
                this.OrderState = OrderState;
            }
            // to ensure "OrderProperty" is required (not null)
            if (OrderProperty == null)
            {
                throw new InvalidDataException("OrderProperty is a required property for OrderIndexLovLinks and cannot be null");
            }
            else
            {
                this.OrderProperty = OrderProperty;
            }
            // to ensure "OrderPropertyPosted" is required (not null)
            if (OrderPropertyPosted == null)
            {
                throw new InvalidDataException("OrderPropertyPosted is a required property for OrderIndexLovLinks and cannot be null");
            }
            else
            {
                this.OrderPropertyPosted = OrderPropertyPosted;
            }
        }
        
        /// <summary>
        /// Gets or Sets OrderChangeBusinessOperationType
        /// </summary>
        [DataMember(Name="orderChangeBusinessOperationType", EmitDefaultValue=false)]
        public BeezUPCommonLOVLink3 OrderChangeBusinessOperationType { get; set; }
        /// <summary>
        /// Gets or Sets OrderState
        /// </summary>
        [DataMember(Name="orderState", EmitDefaultValue=false)]
        public BeezUPCommonLOVLink3 OrderState { get; set; }
        /// <summary>
        /// Gets or Sets OrderProperty
        /// </summary>
        [DataMember(Name="orderProperty", EmitDefaultValue=false)]
        public BeezUPCommonLOVLink3 OrderProperty { get; set; }
        /// <summary>
        /// Gets or Sets OrderPropertyPosted
        /// </summary>
        [DataMember(Name="orderPropertyPosted", EmitDefaultValue=false)]
        public BeezUPCommonLOVLink3 OrderPropertyPosted { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderIndexLovLinks {\n");
            sb.Append("  OrderChangeBusinessOperationType: ").Append(OrderChangeBusinessOperationType).Append("\n");
            sb.Append("  OrderState: ").Append(OrderState).Append("\n");
            sb.Append("  OrderProperty: ").Append(OrderProperty).Append("\n");
            sb.Append("  OrderPropertyPosted: ").Append(OrderPropertyPosted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderIndexLovLinks);
        }

        /// <summary>
        /// Returns true if OrderIndexLovLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderIndexLovLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderIndexLovLinks other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OrderChangeBusinessOperationType == other.OrderChangeBusinessOperationType ||
                    this.OrderChangeBusinessOperationType != null &&
                    this.OrderChangeBusinessOperationType.Equals(other.OrderChangeBusinessOperationType)
                ) && 
                (
                    this.OrderState == other.OrderState ||
                    this.OrderState != null &&
                    this.OrderState.Equals(other.OrderState)
                ) && 
                (
                    this.OrderProperty == other.OrderProperty ||
                    this.OrderProperty != null &&
                    this.OrderProperty.Equals(other.OrderProperty)
                ) && 
                (
                    this.OrderPropertyPosted == other.OrderPropertyPosted ||
                    this.OrderPropertyPosted != null &&
                    this.OrderPropertyPosted.Equals(other.OrderPropertyPosted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrderChangeBusinessOperationType != null)
                    hash = hash * 59 + this.OrderChangeBusinessOperationType.GetHashCode();
                if (this.OrderState != null)
                    hash = hash * 59 + this.OrderState.GetHashCode();
                if (this.OrderProperty != null)
                    hash = hash * 59 + this.OrderProperty.GetHashCode();
                if (this.OrderPropertyPosted != null)
                    hash = hash * 59 + this.OrderPropertyPosted.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
