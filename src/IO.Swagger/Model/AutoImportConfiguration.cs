/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AutoImportConfiguration
    /// </summary>
    [DataContract]
    public partial class AutoImportConfiguration :  IEquatable<AutoImportConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoImportConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AutoImportConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutoImportConfiguration" /> class.
        /// </summary>
        /// <param name="Input">Input (required).</param>
        /// <param name="InputConfiguredByUserId">InputConfiguredByUserId (required).</param>
        /// <param name="SchedulingType">SchedulingType (required).</param>
        /// <param name="ScheduledByUserId">ScheduledByUserId.</param>
        /// <param name="SchedulingValue">Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time. (required).</param>
        /// <param name="Paused">Indicate if the auto import is in pause or not. (required) (default to false).</param>
        /// <param name="PauseStatusChangedByUserId">PauseStatusChangedByUserId.</param>
        /// <param name="PauseStatusChangedUtcDate">Indicate when the pause status has changed in UTC date..</param>
        /// <param name="DuplicateProductConfiguration">DuplicateProductConfiguration (required).</param>
        /// <param name="SchedulingLocalTimeZoneName">Indicate the time zone name of the scheduling. If the scheduling type is \&quot;Schedule\&quot; (default to &quot;Romance Standard Time&quot;).</param>
        public AutoImportConfiguration(InputConfiguration Input = default(InputConfiguration), BeezUPCommonUserId InputConfiguredByUserId = default(BeezUPCommonUserId), SchedulingType SchedulingType = default(SchedulingType), BeezUPCommonUserId ScheduledByUserId = default(BeezUPCommonUserId), List<string> SchedulingValue = default(List<string>), bool? Paused = false, BeezUPCommonUserId PauseStatusChangedByUserId = default(BeezUPCommonUserId), DateTime? PauseStatusChangedUtcDate = default(DateTime?), DuplicateProductValueConfiguration DuplicateProductConfiguration = default(DuplicateProductValueConfiguration), string SchedulingLocalTimeZoneName = "Romance Standard Time")
        {
            // to ensure "Input" is required (not null)
            if (Input == null)
            {
                throw new InvalidDataException("Input is a required property for AutoImportConfiguration and cannot be null");
            }
            else
            {
                this.Input = Input;
            }
            // to ensure "InputConfiguredByUserId" is required (not null)
            if (InputConfiguredByUserId == null)
            {
                throw new InvalidDataException("InputConfiguredByUserId is a required property for AutoImportConfiguration and cannot be null");
            }
            else
            {
                this.InputConfiguredByUserId = InputConfiguredByUserId;
            }
            // to ensure "SchedulingType" is required (not null)
            if (SchedulingType == null)
            {
                throw new InvalidDataException("SchedulingType is a required property for AutoImportConfiguration and cannot be null");
            }
            else
            {
                this.SchedulingType = SchedulingType;
            }
            // to ensure "SchedulingValue" is required (not null)
            if (SchedulingValue == null)
            {
                throw new InvalidDataException("SchedulingValue is a required property for AutoImportConfiguration and cannot be null");
            }
            else
            {
                this.SchedulingValue = SchedulingValue;
            }
            // to ensure "Paused" is required (not null)
            if (Paused == null)
            {
                throw new InvalidDataException("Paused is a required property for AutoImportConfiguration and cannot be null");
            }
            else
            {
                this.Paused = Paused;
            }
            // to ensure "DuplicateProductConfiguration" is required (not null)
            if (DuplicateProductConfiguration == null)
            {
                throw new InvalidDataException("DuplicateProductConfiguration is a required property for AutoImportConfiguration and cannot be null");
            }
            else
            {
                this.DuplicateProductConfiguration = DuplicateProductConfiguration;
            }
            this.ScheduledByUserId = ScheduledByUserId;
            this.PauseStatusChangedByUserId = PauseStatusChangedByUserId;
            this.PauseStatusChangedUtcDate = PauseStatusChangedUtcDate;
            // use default value if no "SchedulingLocalTimeZoneName" provided
            if (SchedulingLocalTimeZoneName == null)
            {
                this.SchedulingLocalTimeZoneName = "Romance Standard Time";
            }
            else
            {
                this.SchedulingLocalTimeZoneName = SchedulingLocalTimeZoneName;
            }
        }
        
        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public InputConfiguration Input { get; set; }
        /// <summary>
        /// Gets or Sets InputConfiguredByUserId
        /// </summary>
        [DataMember(Name="inputConfiguredByUserId", EmitDefaultValue=false)]
        public BeezUPCommonUserId InputConfiguredByUserId { get; set; }
        /// <summary>
        /// Gets or Sets SchedulingType
        /// </summary>
        [DataMember(Name="schedulingType", EmitDefaultValue=false)]
        public SchedulingType SchedulingType { get; set; }
        /// <summary>
        /// Gets or Sets ScheduledByUserId
        /// </summary>
        [DataMember(Name="scheduledByUserId", EmitDefaultValue=false)]
        public BeezUPCommonUserId ScheduledByUserId { get; set; }
        /// <summary>
        /// Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time.
        /// </summary>
        /// <value>Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time.</value>
        [DataMember(Name="schedulingValue", EmitDefaultValue=false)]
        public List<string> SchedulingValue { get; set; }
        /// <summary>
        /// Indicate if the auto import is in pause or not.
        /// </summary>
        /// <value>Indicate if the auto import is in pause or not.</value>
        [DataMember(Name="paused", EmitDefaultValue=false)]
        public bool? Paused { get; set; }
        /// <summary>
        /// Gets or Sets PauseStatusChangedByUserId
        /// </summary>
        [DataMember(Name="pauseStatusChangedByUserId", EmitDefaultValue=false)]
        public BeezUPCommonUserId PauseStatusChangedByUserId { get; set; }
        /// <summary>
        /// Indicate when the pause status has changed in UTC date.
        /// </summary>
        /// <value>Indicate when the pause status has changed in UTC date.</value>
        [DataMember(Name="pauseStatusChangedUtcDate", EmitDefaultValue=false)]
        public DateTime? PauseStatusChangedUtcDate { get; set; }
        /// <summary>
        /// Gets or Sets DuplicateProductConfiguration
        /// </summary>
        [DataMember(Name="duplicateProductConfiguration", EmitDefaultValue=false)]
        public DuplicateProductValueConfiguration DuplicateProductConfiguration { get; set; }
        /// <summary>
        /// Indicate the time zone name of the scheduling. If the scheduling type is \&quot;Schedule\&quot;
        /// </summary>
        /// <value>Indicate the time zone name of the scheduling. If the scheduling type is \&quot;Schedule\&quot;</value>
        [DataMember(Name="schedulingLocalTimeZoneName", EmitDefaultValue=false)]
        public string SchedulingLocalTimeZoneName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutoImportConfiguration {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  InputConfiguredByUserId: ").Append(InputConfiguredByUserId).Append("\n");
            sb.Append("  SchedulingType: ").Append(SchedulingType).Append("\n");
            sb.Append("  ScheduledByUserId: ").Append(ScheduledByUserId).Append("\n");
            sb.Append("  SchedulingValue: ").Append(SchedulingValue).Append("\n");
            sb.Append("  Paused: ").Append(Paused).Append("\n");
            sb.Append("  PauseStatusChangedByUserId: ").Append(PauseStatusChangedByUserId).Append("\n");
            sb.Append("  PauseStatusChangedUtcDate: ").Append(PauseStatusChangedUtcDate).Append("\n");
            sb.Append("  DuplicateProductConfiguration: ").Append(DuplicateProductConfiguration).Append("\n");
            sb.Append("  SchedulingLocalTimeZoneName: ").Append(SchedulingLocalTimeZoneName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AutoImportConfiguration);
        }

        /// <summary>
        /// Returns true if AutoImportConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of AutoImportConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutoImportConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Input == other.Input ||
                    this.Input != null &&
                    this.Input.Equals(other.Input)
                ) && 
                (
                    this.InputConfiguredByUserId == other.InputConfiguredByUserId ||
                    this.InputConfiguredByUserId != null &&
                    this.InputConfiguredByUserId.Equals(other.InputConfiguredByUserId)
                ) && 
                (
                    this.SchedulingType == other.SchedulingType ||
                    this.SchedulingType != null &&
                    this.SchedulingType.Equals(other.SchedulingType)
                ) && 
                (
                    this.ScheduledByUserId == other.ScheduledByUserId ||
                    this.ScheduledByUserId != null &&
                    this.ScheduledByUserId.Equals(other.ScheduledByUserId)
                ) && 
                (
                    this.SchedulingValue == other.SchedulingValue ||
                    this.SchedulingValue != null &&
                    this.SchedulingValue.SequenceEqual(other.SchedulingValue)
                ) && 
                (
                    this.Paused == other.Paused ||
                    this.Paused != null &&
                    this.Paused.Equals(other.Paused)
                ) && 
                (
                    this.PauseStatusChangedByUserId == other.PauseStatusChangedByUserId ||
                    this.PauseStatusChangedByUserId != null &&
                    this.PauseStatusChangedByUserId.Equals(other.PauseStatusChangedByUserId)
                ) && 
                (
                    this.PauseStatusChangedUtcDate == other.PauseStatusChangedUtcDate ||
                    this.PauseStatusChangedUtcDate != null &&
                    this.PauseStatusChangedUtcDate.Equals(other.PauseStatusChangedUtcDate)
                ) && 
                (
                    this.DuplicateProductConfiguration == other.DuplicateProductConfiguration ||
                    this.DuplicateProductConfiguration != null &&
                    this.DuplicateProductConfiguration.Equals(other.DuplicateProductConfiguration)
                ) && 
                (
                    this.SchedulingLocalTimeZoneName == other.SchedulingLocalTimeZoneName ||
                    this.SchedulingLocalTimeZoneName != null &&
                    this.SchedulingLocalTimeZoneName.Equals(other.SchedulingLocalTimeZoneName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Input != null)
                    hash = hash * 59 + this.Input.GetHashCode();
                if (this.InputConfiguredByUserId != null)
                    hash = hash * 59 + this.InputConfiguredByUserId.GetHashCode();
                if (this.SchedulingType != null)
                    hash = hash * 59 + this.SchedulingType.GetHashCode();
                if (this.ScheduledByUserId != null)
                    hash = hash * 59 + this.ScheduledByUserId.GetHashCode();
                if (this.SchedulingValue != null)
                    hash = hash * 59 + this.SchedulingValue.GetHashCode();
                if (this.Paused != null)
                    hash = hash * 59 + this.Paused.GetHashCode();
                if (this.PauseStatusChangedByUserId != null)
                    hash = hash * 59 + this.PauseStatusChangedByUserId.GetHashCode();
                if (this.PauseStatusChangedUtcDate != null)
                    hash = hash * 59 + this.PauseStatusChangedUtcDate.GetHashCode();
                if (this.DuplicateProductConfiguration != null)
                    hash = hash * 59 + this.DuplicateProductConfiguration.GetHashCode();
                if (this.SchedulingLocalTimeZoneName != null)
                    hash = hash * 59 + this.SchedulingLocalTimeZoneName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
