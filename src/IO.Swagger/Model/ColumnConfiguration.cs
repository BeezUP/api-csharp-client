/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Indicates the configuration applied on the column (catalog or custom) during the importation process. You have to define the BeezUP Column Name property OR the custom configuration property.
    /// </summary>
    [DataContract]
    public partial class ColumnConfiguration :  IEquatable<ColumnConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnConfiguration" /> class.
        /// </summary>
        /// <param name="BeezUPColumnName">BeezUPColumnName.</param>
        /// <param name="CustomConfiguration">CustomConfiguration.</param>
        public ColumnConfiguration(BeezUPCommonBeezUPColumnName BeezUPColumnName = default(BeezUPCommonBeezUPColumnName), ColumnCustomConfiguration CustomConfiguration = default(ColumnCustomConfiguration))
        {
            this.BeezUPColumnName = BeezUPColumnName;
            this.CustomConfiguration = CustomConfiguration;
        }
        
        /// <summary>
        /// Gets or Sets BeezUPColumnName
        /// </summary>
        [DataMember(Name="beezUPColumnName", EmitDefaultValue=false)]
        public BeezUPCommonBeezUPColumnName BeezUPColumnName { get; set; }
        /// <summary>
        /// Gets or Sets CustomConfiguration
        /// </summary>
        [DataMember(Name="customConfiguration", EmitDefaultValue=false)]
        public ColumnCustomConfiguration CustomConfiguration { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ColumnConfiguration {\n");
            sb.Append("  BeezUPColumnName: ").Append(BeezUPColumnName).Append("\n");
            sb.Append("  CustomConfiguration: ").Append(CustomConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ColumnConfiguration);
        }

        /// <summary>
        /// Returns true if ColumnConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of ColumnConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ColumnConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BeezUPColumnName == other.BeezUPColumnName ||
                    this.BeezUPColumnName != null &&
                    this.BeezUPColumnName.Equals(other.BeezUPColumnName)
                ) && 
                (
                    this.CustomConfiguration == other.CustomConfiguration ||
                    this.CustomConfiguration != null &&
                    this.CustomConfiguration.Equals(other.CustomConfiguration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BeezUPColumnName != null)
                    hash = hash * 59 + this.BeezUPColumnName.GetHashCode();
                if (this.CustomConfiguration != null)
                    hash = hash * 59 + this.CustomConfiguration.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
