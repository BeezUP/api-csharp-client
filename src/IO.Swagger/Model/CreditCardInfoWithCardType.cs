/* 
 * BeezUP API
 *
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditCardInfoWithCardType
    /// </summary>
    [DataContract]
    public partial class CreditCardInfoWithCardType :  IEquatable<CreditCardInfoWithCardType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardInfoWithCardType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditCardInfoWithCardType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardInfoWithCardType" /> class.
        /// </summary>
        /// <param name="CardNumber">CardNumber (required).</param>
        /// <param name="ExpirationMonth">ExpirationMonth (required).</param>
        /// <param name="ExpirationYear">ExpirationYear (required).</param>
        /// <param name="CardType">Your credit card type. Example: VISA, MasterCard, etc... (required).</param>
        public CreditCardInfoWithCardType(CardNumber CardNumber = default(CardNumber), ExpirationMonth ExpirationMonth = default(ExpirationMonth), ExpirationYear ExpirationYear = default(ExpirationYear), string CardType = default(string))
        {
            // to ensure "CardNumber" is required (not null)
            if (CardNumber == null)
            {
                throw new InvalidDataException("CardNumber is a required property for CreditCardInfoWithCardType and cannot be null");
            }
            else
            {
                this.CardNumber = CardNumber;
            }
            // to ensure "ExpirationMonth" is required (not null)
            if (ExpirationMonth == null)
            {
                throw new InvalidDataException("ExpirationMonth is a required property for CreditCardInfoWithCardType and cannot be null");
            }
            else
            {
                this.ExpirationMonth = ExpirationMonth;
            }
            // to ensure "ExpirationYear" is required (not null)
            if (ExpirationYear == null)
            {
                throw new InvalidDataException("ExpirationYear is a required property for CreditCardInfoWithCardType and cannot be null");
            }
            else
            {
                this.ExpirationYear = ExpirationYear;
            }
            // to ensure "CardType" is required (not null)
            if (CardType == null)
            {
                throw new InvalidDataException("CardType is a required property for CreditCardInfoWithCardType and cannot be null");
            }
            else
            {
                this.CardType = CardType;
            }
        }
        
        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public CardNumber CardNumber { get; set; }
        /// <summary>
        /// Gets or Sets ExpirationMonth
        /// </summary>
        [DataMember(Name="expirationMonth", EmitDefaultValue=false)]
        public ExpirationMonth ExpirationMonth { get; set; }
        /// <summary>
        /// Gets or Sets ExpirationYear
        /// </summary>
        [DataMember(Name="expirationYear", EmitDefaultValue=false)]
        public ExpirationYear ExpirationYear { get; set; }
        /// <summary>
        /// Your credit card type. Example: VISA, MasterCard, etc...
        /// </summary>
        /// <value>Your credit card type. Example: VISA, MasterCard, etc...</value>
        [DataMember(Name="cardType", EmitDefaultValue=false)]
        public string CardType { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardInfoWithCardType {\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreditCardInfoWithCardType);
        }

        /// <summary>
        /// Returns true if CreditCardInfoWithCardType instances are equal
        /// </summary>
        /// <param name="other">Instance of CreditCardInfoWithCardType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardInfoWithCardType other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CardNumber == other.CardNumber ||
                    this.CardNumber != null &&
                    this.CardNumber.Equals(other.CardNumber)
                ) && 
                (
                    this.ExpirationMonth == other.ExpirationMonth ||
                    this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(other.ExpirationMonth)
                ) && 
                (
                    this.ExpirationYear == other.ExpirationYear ||
                    this.ExpirationYear != null &&
                    this.ExpirationYear.Equals(other.ExpirationYear)
                ) && 
                (
                    this.CardType == other.CardType ||
                    this.CardType != null &&
                    this.CardType.Equals(other.CardType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CardNumber != null)
                    hash = hash * 59 + this.CardNumber.GetHashCode();
                if (this.ExpirationMonth != null)
                    hash = hash * 59 + this.ExpirationMonth.GetHashCode();
                if (this.ExpirationYear != null)
                    hash = hash * 59 + this.ExpirationYear.GetHashCode();
                if (this.CardType != null)
                    hash = hash * 59 + this.CardType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
