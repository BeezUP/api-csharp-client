/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportAdvancedFilters
    /// </summary>
    [DataContract]
    public partial class ReportAdvancedFilters :  IEquatable<ReportAdvancedFilters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportAdvancedFilters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportAdvancedFilters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportAdvancedFilters" /> class.
        /// </summary>
        /// <param name="MargingType">MargingType (required).</param>
        /// <param name="GlobalMarginPercent">If the margin type is &#39;Global&#39;, indicate the percentage of sale price..</param>
        /// <param name="LinkClickToOrderType">LinkClickToOrderType (required).</param>
        /// <param name="LinkClickToOrderMaxDay">If the linkOrderType is OnClickDate, indicate the max day to search the click from the order.</param>
        /// <param name="OnlyPaymentValidatedOrders">If true, you will get the only the orders with payment validated. Otherwise, you will get all orders validated or not. (required) (default to false).</param>
        /// <param name="OnlyDirectSales">If true, you will get only direct sales. Otherwise the indirect sales will be included. (required) (default to false).</param>
        /// <param name="PerformanceIndicatorFormula">PerformanceIndicatorFormula (required).</param>
        public ReportAdvancedFilters(MargingType MargingType = default(MargingType), int? GlobalMarginPercent = default(int?), LinkClickToOrderType LinkClickToOrderType = default(LinkClickToOrderType), int? LinkClickToOrderMaxDay = default(int?), bool? OnlyPaymentValidatedOrders = false, bool? OnlyDirectSales = false, PerformanceIndicatorFormula PerformanceIndicatorFormula = default(PerformanceIndicatorFormula))
        {
            // to ensure "MargingType" is required (not null)
            if (MargingType == null)
            {
                throw new InvalidDataException("MargingType is a required property for ReportAdvancedFilters and cannot be null");
            }
            else
            {
                this.MargingType = MargingType;
            }
            // to ensure "LinkClickToOrderType" is required (not null)
            if (LinkClickToOrderType == null)
            {
                throw new InvalidDataException("LinkClickToOrderType is a required property for ReportAdvancedFilters and cannot be null");
            }
            else
            {
                this.LinkClickToOrderType = LinkClickToOrderType;
            }
            // to ensure "OnlyPaymentValidatedOrders" is required (not null)
            if (OnlyPaymentValidatedOrders == null)
            {
                throw new InvalidDataException("OnlyPaymentValidatedOrders is a required property for ReportAdvancedFilters and cannot be null");
            }
            else
            {
                this.OnlyPaymentValidatedOrders = OnlyPaymentValidatedOrders;
            }
            // to ensure "OnlyDirectSales" is required (not null)
            if (OnlyDirectSales == null)
            {
                throw new InvalidDataException("OnlyDirectSales is a required property for ReportAdvancedFilters and cannot be null");
            }
            else
            {
                this.OnlyDirectSales = OnlyDirectSales;
            }
            // to ensure "PerformanceIndicatorFormula" is required (not null)
            if (PerformanceIndicatorFormula == null)
            {
                throw new InvalidDataException("PerformanceIndicatorFormula is a required property for ReportAdvancedFilters and cannot be null");
            }
            else
            {
                this.PerformanceIndicatorFormula = PerformanceIndicatorFormula;
            }
            this.GlobalMarginPercent = GlobalMarginPercent;
            this.LinkClickToOrderMaxDay = LinkClickToOrderMaxDay;
        }
        
        /// <summary>
        /// Gets or Sets MargingType
        /// </summary>
        [DataMember(Name="margingType", EmitDefaultValue=false)]
        public MargingType MargingType { get; set; }
        /// <summary>
        /// If the margin type is &#39;Global&#39;, indicate the percentage of sale price.
        /// </summary>
        /// <value>If the margin type is &#39;Global&#39;, indicate the percentage of sale price.</value>
        [DataMember(Name="globalMarginPercent", EmitDefaultValue=false)]
        public int? GlobalMarginPercent { get; set; }
        /// <summary>
        /// Gets or Sets LinkClickToOrderType
        /// </summary>
        [DataMember(Name="linkClickToOrderType", EmitDefaultValue=false)]
        public LinkClickToOrderType LinkClickToOrderType { get; set; }
        /// <summary>
        /// If the linkOrderType is OnClickDate, indicate the max day to search the click from the order
        /// </summary>
        /// <value>If the linkOrderType is OnClickDate, indicate the max day to search the click from the order</value>
        [DataMember(Name="linkClickToOrderMaxDay", EmitDefaultValue=false)]
        public int? LinkClickToOrderMaxDay { get; set; }
        /// <summary>
        /// If true, you will get the only the orders with payment validated. Otherwise, you will get all orders validated or not.
        /// </summary>
        /// <value>If true, you will get the only the orders with payment validated. Otherwise, you will get all orders validated or not.</value>
        [DataMember(Name="onlyPaymentValidatedOrders", EmitDefaultValue=false)]
        public bool? OnlyPaymentValidatedOrders { get; set; }
        /// <summary>
        /// If true, you will get only direct sales. Otherwise the indirect sales will be included.
        /// </summary>
        /// <value>If true, you will get only direct sales. Otherwise the indirect sales will be included.</value>
        [DataMember(Name="onlyDirectSales", EmitDefaultValue=false)]
        public bool? OnlyDirectSales { get; set; }
        /// <summary>
        /// Gets or Sets PerformanceIndicatorFormula
        /// </summary>
        [DataMember(Name="performanceIndicatorFormula", EmitDefaultValue=false)]
        public PerformanceIndicatorFormula PerformanceIndicatorFormula { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportAdvancedFilters {\n");
            sb.Append("  MargingType: ").Append(MargingType).Append("\n");
            sb.Append("  GlobalMarginPercent: ").Append(GlobalMarginPercent).Append("\n");
            sb.Append("  LinkClickToOrderType: ").Append(LinkClickToOrderType).Append("\n");
            sb.Append("  LinkClickToOrderMaxDay: ").Append(LinkClickToOrderMaxDay).Append("\n");
            sb.Append("  OnlyPaymentValidatedOrders: ").Append(OnlyPaymentValidatedOrders).Append("\n");
            sb.Append("  OnlyDirectSales: ").Append(OnlyDirectSales).Append("\n");
            sb.Append("  PerformanceIndicatorFormula: ").Append(PerformanceIndicatorFormula).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportAdvancedFilters);
        }

        /// <summary>
        /// Returns true if ReportAdvancedFilters instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportAdvancedFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportAdvancedFilters other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MargingType == other.MargingType ||
                    this.MargingType != null &&
                    this.MargingType.Equals(other.MargingType)
                ) && 
                (
                    this.GlobalMarginPercent == other.GlobalMarginPercent ||
                    this.GlobalMarginPercent != null &&
                    this.GlobalMarginPercent.Equals(other.GlobalMarginPercent)
                ) && 
                (
                    this.LinkClickToOrderType == other.LinkClickToOrderType ||
                    this.LinkClickToOrderType != null &&
                    this.LinkClickToOrderType.Equals(other.LinkClickToOrderType)
                ) && 
                (
                    this.LinkClickToOrderMaxDay == other.LinkClickToOrderMaxDay ||
                    this.LinkClickToOrderMaxDay != null &&
                    this.LinkClickToOrderMaxDay.Equals(other.LinkClickToOrderMaxDay)
                ) && 
                (
                    this.OnlyPaymentValidatedOrders == other.OnlyPaymentValidatedOrders ||
                    this.OnlyPaymentValidatedOrders != null &&
                    this.OnlyPaymentValidatedOrders.Equals(other.OnlyPaymentValidatedOrders)
                ) && 
                (
                    this.OnlyDirectSales == other.OnlyDirectSales ||
                    this.OnlyDirectSales != null &&
                    this.OnlyDirectSales.Equals(other.OnlyDirectSales)
                ) && 
                (
                    this.PerformanceIndicatorFormula == other.PerformanceIndicatorFormula ||
                    this.PerformanceIndicatorFormula != null &&
                    this.PerformanceIndicatorFormula.Equals(other.PerformanceIndicatorFormula)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MargingType != null)
                    hash = hash * 59 + this.MargingType.GetHashCode();
                if (this.GlobalMarginPercent != null)
                    hash = hash * 59 + this.GlobalMarginPercent.GetHashCode();
                if (this.LinkClickToOrderType != null)
                    hash = hash * 59 + this.LinkClickToOrderType.GetHashCode();
                if (this.LinkClickToOrderMaxDay != null)
                    hash = hash * 59 + this.LinkClickToOrderMaxDay.GetHashCode();
                if (this.OnlyPaymentValidatedOrders != null)
                    hash = hash * 59 + this.OnlyPaymentValidatedOrders.GetHashCode();
                if (this.OnlyDirectSales != null)
                    hash = hash * 59 + this.OnlyDirectSales.GetHashCode();
                if (this.PerformanceIndicatorFormula != null)
                    hash = hash * 59 + this.PerformanceIndicatorFormula.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // GlobalMarginPercent (int?) maximum
            if(this.GlobalMarginPercent > (int?)100)
            {
                yield return new ValidationResult("Invalid value for GlobalMarginPercent, must be a value less than or equal to 100.", new [] { "GlobalMarginPercent" });
            }

            // GlobalMarginPercent (int?) minimum
            if(this.GlobalMarginPercent < (int?)0)
            {
                yield return new ValidationResult("Invalid value for GlobalMarginPercent, must be a value greater than or equal to 0.", new [] { "GlobalMarginPercent" });
            }

            // LinkClickToOrderMaxDay (int?) maximum
            if(this.LinkClickToOrderMaxDay > (int?)180)
            {
                yield return new ValidationResult("Invalid value for LinkClickToOrderMaxDay, must be a value less than or equal to 180.", new [] { "LinkClickToOrderMaxDay" });
            }

            // LinkClickToOrderMaxDay (int?) minimum
            if(this.LinkClickToOrderMaxDay < (int?)0)
            {
                yield return new ValidationResult("Invalid value for LinkClickToOrderMaxDay, must be a value greater than or equal to 0.", new [] { "LinkClickToOrderMaxDay" });
            }

            yield break;
        }
    }

}
