/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrackingStatus
    /// </summary>
    [DataContract]
    public partial class TrackingStatus :  IEquatable<TrackingStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackingStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingStatus" /> class.
        /// </summary>
        /// <param name="ClickSynchronizationUtcDate">The utc date of the latest click synchronized (required).</param>
        /// <param name="OrderSynchonizationUtcDate">The utc date of the latest order synchronized (required).</param>
        /// <param name="MarketplaceOrderSynchonizationUtcDate">The utc date of the latest marketplace order synchronized (required).</param>
        public TrackingStatus(DateTime? ClickSynchronizationUtcDate = default(DateTime?), DateTime? OrderSynchonizationUtcDate = default(DateTime?), DateTime? MarketplaceOrderSynchonizationUtcDate = default(DateTime?))
        {
            // to ensure "ClickSynchronizationUtcDate" is required (not null)
            if (ClickSynchronizationUtcDate == null)
            {
                throw new InvalidDataException("ClickSynchronizationUtcDate is a required property for TrackingStatus and cannot be null");
            }
            else
            {
                this.ClickSynchronizationUtcDate = ClickSynchronizationUtcDate;
            }
            // to ensure "OrderSynchonizationUtcDate" is required (not null)
            if (OrderSynchonizationUtcDate == null)
            {
                throw new InvalidDataException("OrderSynchonizationUtcDate is a required property for TrackingStatus and cannot be null");
            }
            else
            {
                this.OrderSynchonizationUtcDate = OrderSynchonizationUtcDate;
            }
            // to ensure "MarketplaceOrderSynchonizationUtcDate" is required (not null)
            if (MarketplaceOrderSynchonizationUtcDate == null)
            {
                throw new InvalidDataException("MarketplaceOrderSynchonizationUtcDate is a required property for TrackingStatus and cannot be null");
            }
            else
            {
                this.MarketplaceOrderSynchonizationUtcDate = MarketplaceOrderSynchonizationUtcDate;
            }
        }
        
        /// <summary>
        /// The utc date of the latest click synchronized
        /// </summary>
        /// <value>The utc date of the latest click synchronized</value>
        [DataMember(Name="clickSynchronizationUtcDate", EmitDefaultValue=false)]
        public DateTime? ClickSynchronizationUtcDate { get; set; }
        /// <summary>
        /// The utc date of the latest order synchronized
        /// </summary>
        /// <value>The utc date of the latest order synchronized</value>
        [DataMember(Name="orderSynchonizationUtcDate", EmitDefaultValue=false)]
        public DateTime? OrderSynchonizationUtcDate { get; set; }
        /// <summary>
        /// The utc date of the latest marketplace order synchronized
        /// </summary>
        /// <value>The utc date of the latest marketplace order synchronized</value>
        [DataMember(Name="marketplaceOrderSynchonizationUtcDate", EmitDefaultValue=false)]
        public DateTime? MarketplaceOrderSynchonizationUtcDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackingStatus {\n");
            sb.Append("  ClickSynchronizationUtcDate: ").Append(ClickSynchronizationUtcDate).Append("\n");
            sb.Append("  OrderSynchonizationUtcDate: ").Append(OrderSynchonizationUtcDate).Append("\n");
            sb.Append("  MarketplaceOrderSynchonizationUtcDate: ").Append(MarketplaceOrderSynchonizationUtcDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TrackingStatus);
        }

        /// <summary>
        /// Returns true if TrackingStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of TrackingStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackingStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClickSynchronizationUtcDate == other.ClickSynchronizationUtcDate ||
                    this.ClickSynchronizationUtcDate != null &&
                    this.ClickSynchronizationUtcDate.Equals(other.ClickSynchronizationUtcDate)
                ) && 
                (
                    this.OrderSynchonizationUtcDate == other.OrderSynchonizationUtcDate ||
                    this.OrderSynchonizationUtcDate != null &&
                    this.OrderSynchonizationUtcDate.Equals(other.OrderSynchonizationUtcDate)
                ) && 
                (
                    this.MarketplaceOrderSynchonizationUtcDate == other.MarketplaceOrderSynchonizationUtcDate ||
                    this.MarketplaceOrderSynchonizationUtcDate != null &&
                    this.MarketplaceOrderSynchonizationUtcDate.Equals(other.MarketplaceOrderSynchonizationUtcDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClickSynchronizationUtcDate != null)
                    hash = hash * 59 + this.ClickSynchronizationUtcDate.GetHashCode();
                if (this.OrderSynchonizationUtcDate != null)
                    hash = hash * 59 + this.OrderSynchonizationUtcDate.GetHashCode();
                if (this.MarketplaceOrderSynchonizationUtcDate != null)
                    hash = hash * 59 + this.MarketplaceOrderSynchonizationUtcDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
