/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StoreHeader
    /// </summary>
    [DataContract]
    public partial class StoreHeader :  IEquatable<StoreHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreHeader" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Url">Url (required).</param>
        /// <param name="CountryIsoCodeAlpha3">CountryIsoCodeAlpha3 (required).</param>
        /// <param name="Sectors">Sectors (required).</param>
        /// <param name="StoreId">StoreId (required).</param>
        /// <param name="UserRole">UserRole (required).</param>
        /// <param name="Status">Status (required).</param>
        /// <param name="OwnerUserId">The user id of the owner of the store (required).</param>
        /// <param name="ShareCount">The share count related to this store (required).</param>
        /// <param name="CreationUtcDate">The creation date of the store (required).</param>
        /// <param name="Links">Links.</param>
        public StoreHeader(StoreName Name = default(StoreName), StoreUrl Url = default(StoreUrl), StoreCountryIsoCodeAlpha3 CountryIsoCodeAlpha3 = default(StoreCountryIsoCodeAlpha3), StoreSectors Sectors = default(StoreSectors), BeezUPCommonStoreId StoreId = default(BeezUPCommonStoreId), StoreUserRole UserRole = default(StoreUserRole), StoreStatus Status = default(StoreStatus), string OwnerUserId = default(string), int? ShareCount = default(int?), DateTime? CreationUtcDate = default(DateTime?), StoreHeaderLinks Links = default(StoreHeaderLinks))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Url" is required (not null)
            if (Url == null)
            {
                throw new InvalidDataException("Url is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.Url = Url;
            }
            // to ensure "CountryIsoCodeAlpha3" is required (not null)
            if (CountryIsoCodeAlpha3 == null)
            {
                throw new InvalidDataException("CountryIsoCodeAlpha3 is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.CountryIsoCodeAlpha3 = CountryIsoCodeAlpha3;
            }
            // to ensure "Sectors" is required (not null)
            if (Sectors == null)
            {
                throw new InvalidDataException("Sectors is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.Sectors = Sectors;
            }
            // to ensure "StoreId" is required (not null)
            if (StoreId == null)
            {
                throw new InvalidDataException("StoreId is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.StoreId = StoreId;
            }
            // to ensure "UserRole" is required (not null)
            if (UserRole == null)
            {
                throw new InvalidDataException("UserRole is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.UserRole = UserRole;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "OwnerUserId" is required (not null)
            if (OwnerUserId == null)
            {
                throw new InvalidDataException("OwnerUserId is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.OwnerUserId = OwnerUserId;
            }
            // to ensure "ShareCount" is required (not null)
            if (ShareCount == null)
            {
                throw new InvalidDataException("ShareCount is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.ShareCount = ShareCount;
            }
            // to ensure "CreationUtcDate" is required (not null)
            if (CreationUtcDate == null)
            {
                throw new InvalidDataException("CreationUtcDate is a required property for StoreHeader and cannot be null");
            }
            else
            {
                this.CreationUtcDate = CreationUtcDate;
            }
            this.Links = Links;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public StoreName Name { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public StoreUrl Url { get; set; }
        /// <summary>
        /// Gets or Sets CountryIsoCodeAlpha3
        /// </summary>
        [DataMember(Name="countryIsoCodeAlpha3", EmitDefaultValue=false)]
        public StoreCountryIsoCodeAlpha3 CountryIsoCodeAlpha3 { get; set; }
        /// <summary>
        /// Gets or Sets Sectors
        /// </summary>
        [DataMember(Name="sectors", EmitDefaultValue=false)]
        public StoreSectors Sectors { get; set; }
        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name="storeId", EmitDefaultValue=false)]
        public BeezUPCommonStoreId StoreId { get; set; }
        /// <summary>
        /// Gets or Sets UserRole
        /// </summary>
        [DataMember(Name="userRole", EmitDefaultValue=false)]
        public StoreUserRole UserRole { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StoreStatus Status { get; set; }
        /// <summary>
        /// The user id of the owner of the store
        /// </summary>
        /// <value>The user id of the owner of the store</value>
        [DataMember(Name="ownerUserId", EmitDefaultValue=false)]
        public string OwnerUserId { get; set; }
        /// <summary>
        /// The share count related to this store
        /// </summary>
        /// <value>The share count related to this store</value>
        [DataMember(Name="shareCount", EmitDefaultValue=false)]
        public int? ShareCount { get; set; }
        /// <summary>
        /// The creation date of the store
        /// </summary>
        /// <value>The creation date of the store</value>
        [DataMember(Name="creationUtcDate", EmitDefaultValue=false)]
        public DateTime? CreationUtcDate { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public StoreHeaderLinks Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreHeader {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  CountryIsoCodeAlpha3: ").Append(CountryIsoCodeAlpha3).Append("\n");
            sb.Append("  Sectors: ").Append(Sectors).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  UserRole: ").Append(UserRole).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OwnerUserId: ").Append(OwnerUserId).Append("\n");
            sb.Append("  ShareCount: ").Append(ShareCount).Append("\n");
            sb.Append("  CreationUtcDate: ").Append(CreationUtcDate).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StoreHeader);
        }

        /// <summary>
        /// Returns true if StoreHeader instances are equal
        /// </summary>
        /// <param name="other">Instance of StoreHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreHeader other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.CountryIsoCodeAlpha3 == other.CountryIsoCodeAlpha3 ||
                    this.CountryIsoCodeAlpha3 != null &&
                    this.CountryIsoCodeAlpha3.Equals(other.CountryIsoCodeAlpha3)
                ) && 
                (
                    this.Sectors == other.Sectors ||
                    this.Sectors != null &&
                    this.Sectors.Equals(other.Sectors)
                ) && 
                (
                    this.StoreId == other.StoreId ||
                    this.StoreId != null &&
                    this.StoreId.Equals(other.StoreId)
                ) && 
                (
                    this.UserRole == other.UserRole ||
                    this.UserRole != null &&
                    this.UserRole.Equals(other.UserRole)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.OwnerUserId == other.OwnerUserId ||
                    this.OwnerUserId != null &&
                    this.OwnerUserId.Equals(other.OwnerUserId)
                ) && 
                (
                    this.ShareCount == other.ShareCount ||
                    this.ShareCount != null &&
                    this.ShareCount.Equals(other.ShareCount)
                ) && 
                (
                    this.CreationUtcDate == other.CreationUtcDate ||
                    this.CreationUtcDate != null &&
                    this.CreationUtcDate.Equals(other.CreationUtcDate)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.CountryIsoCodeAlpha3 != null)
                    hash = hash * 59 + this.CountryIsoCodeAlpha3.GetHashCode();
                if (this.Sectors != null)
                    hash = hash * 59 + this.Sectors.GetHashCode();
                if (this.StoreId != null)
                    hash = hash * 59 + this.StoreId.GetHashCode();
                if (this.UserRole != null)
                    hash = hash * 59 + this.UserRole.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.OwnerUserId != null)
                    hash = hash * 59 + this.OwnerUserId.GetHashCode();
                if (this.ShareCount != null)
                    hash = hash * 59 + this.ShareCount.GetHashCode();
                if (this.CreationUtcDate != null)
                    hash = hash * 59 + this.CreationUtcDate.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
