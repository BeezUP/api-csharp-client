/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateContract
    /// </summary>
    [DataContract]
    public partial class CreateContract :  IEquatable<CreateContract>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateContract" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateContract() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateContract" /> class.
        /// </summary>
        /// <param name="OfferId">OfferId (required).</param>
        /// <param name="StoreCount">StoreCount (required).</param>
        /// <param name="CouponDiscountCode">CouponDiscountCode.</param>
        /// <param name="CouponOfferCode">CouponOfferCode.</param>
        /// <param name="BillingPeriodInMonth">BillingPeriodInMonth (required).</param>
        public CreateContract(OfferId OfferId = default(OfferId), StoreCount StoreCount = default(StoreCount), CouponDiscountCode CouponDiscountCode = default(CouponDiscountCode), CouponOfferCode CouponOfferCode = default(CouponOfferCode), BillingPeriodInMonth BillingPeriodInMonth = default(BillingPeriodInMonth))
        {
            // to ensure "OfferId" is required (not null)
            if (OfferId == null)
            {
                throw new InvalidDataException("OfferId is a required property for CreateContract and cannot be null");
            }
            else
            {
                this.OfferId = OfferId;
            }
            // to ensure "StoreCount" is required (not null)
            if (StoreCount == null)
            {
                throw new InvalidDataException("StoreCount is a required property for CreateContract and cannot be null");
            }
            else
            {
                this.StoreCount = StoreCount;
            }
            // to ensure "BillingPeriodInMonth" is required (not null)
            if (BillingPeriodInMonth == null)
            {
                throw new InvalidDataException("BillingPeriodInMonth is a required property for CreateContract and cannot be null");
            }
            else
            {
                this.BillingPeriodInMonth = BillingPeriodInMonth;
            }
            this.CouponDiscountCode = CouponDiscountCode;
            this.CouponOfferCode = CouponOfferCode;
        }
        
        /// <summary>
        /// Gets or Sets OfferId
        /// </summary>
        [DataMember(Name="offerId", EmitDefaultValue=false)]
        public OfferId OfferId { get; set; }
        /// <summary>
        /// Gets or Sets StoreCount
        /// </summary>
        [DataMember(Name="storeCount", EmitDefaultValue=false)]
        public StoreCount StoreCount { get; set; }
        /// <summary>
        /// Gets or Sets CouponDiscountCode
        /// </summary>
        [DataMember(Name="couponDiscountCode", EmitDefaultValue=false)]
        public CouponDiscountCode CouponDiscountCode { get; set; }
        /// <summary>
        /// Gets or Sets CouponOfferCode
        /// </summary>
        [DataMember(Name="couponOfferCode", EmitDefaultValue=false)]
        public CouponOfferCode CouponOfferCode { get; set; }
        /// <summary>
        /// Gets or Sets BillingPeriodInMonth
        /// </summary>
        [DataMember(Name="billingPeriodInMonth", EmitDefaultValue=false)]
        public BillingPeriodInMonth BillingPeriodInMonth { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateContract {\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  StoreCount: ").Append(StoreCount).Append("\n");
            sb.Append("  CouponDiscountCode: ").Append(CouponDiscountCode).Append("\n");
            sb.Append("  CouponOfferCode: ").Append(CouponOfferCode).Append("\n");
            sb.Append("  BillingPeriodInMonth: ").Append(BillingPeriodInMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateContract);
        }

        /// <summary>
        /// Returns true if CreateContract instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateContract other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OfferId == other.OfferId ||
                    this.OfferId != null &&
                    this.OfferId.Equals(other.OfferId)
                ) && 
                (
                    this.StoreCount == other.StoreCount ||
                    this.StoreCount != null &&
                    this.StoreCount.Equals(other.StoreCount)
                ) && 
                (
                    this.CouponDiscountCode == other.CouponDiscountCode ||
                    this.CouponDiscountCode != null &&
                    this.CouponDiscountCode.Equals(other.CouponDiscountCode)
                ) && 
                (
                    this.CouponOfferCode == other.CouponOfferCode ||
                    this.CouponOfferCode != null &&
                    this.CouponOfferCode.Equals(other.CouponOfferCode)
                ) && 
                (
                    this.BillingPeriodInMonth == other.BillingPeriodInMonth ||
                    this.BillingPeriodInMonth != null &&
                    this.BillingPeriodInMonth.Equals(other.BillingPeriodInMonth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OfferId != null)
                    hash = hash * 59 + this.OfferId.GetHashCode();
                if (this.StoreCount != null)
                    hash = hash * 59 + this.StoreCount.GetHashCode();
                if (this.CouponDiscountCode != null)
                    hash = hash * 59 + this.CouponDiscountCode.GetHashCode();
                if (this.CouponOfferCode != null)
                    hash = hash * 59 + this.CouponOfferCode.GetHashCode();
                if (this.BillingPeriodInMonth != null)
                    hash = hash * 59 + this.BillingPeriodInMonth.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
