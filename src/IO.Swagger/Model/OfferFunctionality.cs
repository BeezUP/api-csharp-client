/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OfferFunctionality
    /// </summary>
    [DataContract]
    public partial class OfferFunctionality :  IEquatable<OfferFunctionality>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferFunctionality" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OfferFunctionality() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OfferFunctionality" /> class.
        /// </summary>
        /// <param name="FunctionalityCode">The functionality code (required).</param>
        /// <param name="MaxValueInteger">The max value in integer for this feature in this offer.</param>
        /// <param name="Unlimited">Is this feature is unlimited for this offer? (required).</param>
        /// <param name="Text">A description text of this feature.</param>
        public OfferFunctionality(string FunctionalityCode = default(string), int? MaxValueInteger = default(int?), bool? Unlimited = default(bool?), string Text = default(string))
        {
            // to ensure "FunctionalityCode" is required (not null)
            if (FunctionalityCode == null)
            {
                throw new InvalidDataException("FunctionalityCode is a required property for OfferFunctionality and cannot be null");
            }
            else
            {
                this.FunctionalityCode = FunctionalityCode;
            }
            // to ensure "Unlimited" is required (not null)
            if (Unlimited == null)
            {
                throw new InvalidDataException("Unlimited is a required property for OfferFunctionality and cannot be null");
            }
            else
            {
                this.Unlimited = Unlimited;
            }
            this.MaxValueInteger = MaxValueInteger;
            this.Text = Text;
        }
        
        /// <summary>
        /// The functionality code
        /// </summary>
        /// <value>The functionality code</value>
        [DataMember(Name="functionalityCode", EmitDefaultValue=false)]
        public string FunctionalityCode { get; set; }
        /// <summary>
        /// The max value in integer for this feature in this offer
        /// </summary>
        /// <value>The max value in integer for this feature in this offer</value>
        [DataMember(Name="maxValueInteger", EmitDefaultValue=false)]
        public int? MaxValueInteger { get; set; }
        /// <summary>
        /// Is this feature is unlimited for this offer?
        /// </summary>
        /// <value>Is this feature is unlimited for this offer?</value>
        [DataMember(Name="unlimited", EmitDefaultValue=false)]
        public bool? Unlimited { get; set; }
        /// <summary>
        /// A description text of this feature
        /// </summary>
        /// <value>A description text of this feature</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferFunctionality {\n");
            sb.Append("  FunctionalityCode: ").Append(FunctionalityCode).Append("\n");
            sb.Append("  MaxValueInteger: ").Append(MaxValueInteger).Append("\n");
            sb.Append("  Unlimited: ").Append(Unlimited).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OfferFunctionality);
        }

        /// <summary>
        /// Returns true if OfferFunctionality instances are equal
        /// </summary>
        /// <param name="other">Instance of OfferFunctionality to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferFunctionality other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FunctionalityCode == other.FunctionalityCode ||
                    this.FunctionalityCode != null &&
                    this.FunctionalityCode.Equals(other.FunctionalityCode)
                ) && 
                (
                    this.MaxValueInteger == other.MaxValueInteger ||
                    this.MaxValueInteger != null &&
                    this.MaxValueInteger.Equals(other.MaxValueInteger)
                ) && 
                (
                    this.Unlimited == other.Unlimited ||
                    this.Unlimited != null &&
                    this.Unlimited.Equals(other.Unlimited)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FunctionalityCode != null)
                    hash = hash * 59 + this.FunctionalityCode.GetHashCode();
                if (this.MaxValueInteger != null)
                    hash = hash * 59 + this.MaxValueInteger.GetHashCode();
                if (this.Unlimited != null)
                    hash = hash * 59 + this.Unlimited.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
