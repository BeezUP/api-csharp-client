/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The catalog importation reporting
    /// </summary>
    [DataContract]
    public partial class ImportationReporting :  IEquatable<ImportationReporting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportationReporting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportationReporting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportationReporting" /> class.
        /// </summary>
        /// <param name="StepName">The last step name of the importation process.</param>
        /// <param name="UserId">UserId.</param>
        /// <param name="Success">Indicate if the importation succeed or not..</param>
        /// <param name="TotalProductCount">Indicate the total product count detected in the catalog during the importation..</param>
        /// <param name="TotalProductErrorCount">Indicate the total product count in error detected in the catalog during the importation..</param>
        /// <param name="TotalProductSuccessCount">Indicate the total product count in success in the catalog during the importation..</param>
        /// <param name="Errors">Indicate the error message list related to this importation..</param>
        /// <param name="LastUpdateUtcDate">Indicate the last update UTC date of the reporting. (required).</param>
        /// <param name="AutoImported">Indicate if this importation is an auto import or not..</param>
        /// <param name="BeginUtcDate">Indicate the begin UTC date of this importation. (required).</param>
        /// <param name="EndUtcDate">Indicate the end UTC date of this importation..</param>
        /// <param name="InputConfigurationUrl">Indicate the input url of this importation..</param>
        /// <param name="Steps">Indicate the steps that have been passed during the importation process (required).</param>
        public ImportationReporting(string StepName = default(string), BeezUPCommonUserId UserId = default(BeezUPCommonUserId), bool? Success = default(bool?), int? TotalProductCount = default(int?), int? TotalProductErrorCount = default(int?), int? TotalProductSuccessCount = default(int?), List<BeezUPCommonUserErrorMessage> Errors = default(List<BeezUPCommonUserErrorMessage>), DateTime? LastUpdateUtcDate = default(DateTime?), bool? AutoImported = default(bool?), DateTime? BeginUtcDate = default(DateTime?), DateTime? EndUtcDate = default(DateTime?), string InputConfigurationUrl = default(string), Dictionary<string, bool?> Steps = default(Dictionary<string, bool?>))
        {
            // to ensure "LastUpdateUtcDate" is required (not null)
            if (LastUpdateUtcDate == null)
            {
                throw new InvalidDataException("LastUpdateUtcDate is a required property for ImportationReporting and cannot be null");
            }
            else
            {
                this.LastUpdateUtcDate = LastUpdateUtcDate;
            }
            // to ensure "BeginUtcDate" is required (not null)
            if (BeginUtcDate == null)
            {
                throw new InvalidDataException("BeginUtcDate is a required property for ImportationReporting and cannot be null");
            }
            else
            {
                this.BeginUtcDate = BeginUtcDate;
            }
            // to ensure "Steps" is required (not null)
            if (Steps == null)
            {
                throw new InvalidDataException("Steps is a required property for ImportationReporting and cannot be null");
            }
            else
            {
                this.Steps = Steps;
            }
            this.StepName = StepName;
            this.UserId = UserId;
            this.Success = Success;
            this.TotalProductCount = TotalProductCount;
            this.TotalProductErrorCount = TotalProductErrorCount;
            this.TotalProductSuccessCount = TotalProductSuccessCount;
            this.Errors = Errors;
            this.AutoImported = AutoImported;
            this.EndUtcDate = EndUtcDate;
            this.InputConfigurationUrl = InputConfigurationUrl;
        }
        
        /// <summary>
        /// The last step name of the importation process
        /// </summary>
        /// <value>The last step name of the importation process</value>
        [DataMember(Name="stepName", EmitDefaultValue=false)]
        public string StepName { get; set; }
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public BeezUPCommonUserId UserId { get; set; }
        /// <summary>
        /// Indicate if the importation succeed or not.
        /// </summary>
        /// <value>Indicate if the importation succeed or not.</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }
        /// <summary>
        /// Indicate the total product count detected in the catalog during the importation.
        /// </summary>
        /// <value>Indicate the total product count detected in the catalog during the importation.</value>
        [DataMember(Name="totalProductCount", EmitDefaultValue=false)]
        public int? TotalProductCount { get; set; }
        /// <summary>
        /// Indicate the total product count in error detected in the catalog during the importation.
        /// </summary>
        /// <value>Indicate the total product count in error detected in the catalog during the importation.</value>
        [DataMember(Name="totalProductErrorCount", EmitDefaultValue=false)]
        public int? TotalProductErrorCount { get; set; }
        /// <summary>
        /// Indicate the total product count in success in the catalog during the importation.
        /// </summary>
        /// <value>Indicate the total product count in success in the catalog during the importation.</value>
        [DataMember(Name="totalProductSuccessCount", EmitDefaultValue=false)]
        public int? TotalProductSuccessCount { get; set; }
        /// <summary>
        /// Indicate the error message list related to this importation.
        /// </summary>
        /// <value>Indicate the error message list related to this importation.</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<BeezUPCommonUserErrorMessage> Errors { get; set; }
        /// <summary>
        /// Indicate the last update UTC date of the reporting.
        /// </summary>
        /// <value>Indicate the last update UTC date of the reporting.</value>
        [DataMember(Name="lastUpdateUtcDate", EmitDefaultValue=false)]
        public DateTime? LastUpdateUtcDate { get; set; }
        /// <summary>
        /// Indicate if this importation is an auto import or not.
        /// </summary>
        /// <value>Indicate if this importation is an auto import or not.</value>
        [DataMember(Name="autoImported", EmitDefaultValue=false)]
        public bool? AutoImported { get; set; }
        /// <summary>
        /// Indicate the begin UTC date of this importation.
        /// </summary>
        /// <value>Indicate the begin UTC date of this importation.</value>
        [DataMember(Name="beginUtcDate", EmitDefaultValue=false)]
        public DateTime? BeginUtcDate { get; set; }
        /// <summary>
        /// Indicate the end UTC date of this importation.
        /// </summary>
        /// <value>Indicate the end UTC date of this importation.</value>
        [DataMember(Name="endUtcDate", EmitDefaultValue=false)]
        public DateTime? EndUtcDate { get; set; }
        /// <summary>
        /// Indicate the input url of this importation.
        /// </summary>
        /// <value>Indicate the input url of this importation.</value>
        [DataMember(Name="inputConfigurationUrl", EmitDefaultValue=false)]
        public string InputConfigurationUrl { get; set; }
        /// <summary>
        /// Indicate the steps that have been passed during the importation process
        /// </summary>
        /// <value>Indicate the steps that have been passed during the importation process</value>
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public Dictionary<string, bool?> Steps { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportationReporting {\n");
            sb.Append("  StepName: ").Append(StepName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  TotalProductCount: ").Append(TotalProductCount).Append("\n");
            sb.Append("  TotalProductErrorCount: ").Append(TotalProductErrorCount).Append("\n");
            sb.Append("  TotalProductSuccessCount: ").Append(TotalProductSuccessCount).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  LastUpdateUtcDate: ").Append(LastUpdateUtcDate).Append("\n");
            sb.Append("  AutoImported: ").Append(AutoImported).Append("\n");
            sb.Append("  BeginUtcDate: ").Append(BeginUtcDate).Append("\n");
            sb.Append("  EndUtcDate: ").Append(EndUtcDate).Append("\n");
            sb.Append("  InputConfigurationUrl: ").Append(InputConfigurationUrl).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ImportationReporting);
        }

        /// <summary>
        /// Returns true if ImportationReporting instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportationReporting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportationReporting other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StepName == other.StepName ||
                    this.StepName != null &&
                    this.StepName.Equals(other.StepName)
                ) && 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.TotalProductCount == other.TotalProductCount ||
                    this.TotalProductCount != null &&
                    this.TotalProductCount.Equals(other.TotalProductCount)
                ) && 
                (
                    this.TotalProductErrorCount == other.TotalProductErrorCount ||
                    this.TotalProductErrorCount != null &&
                    this.TotalProductErrorCount.Equals(other.TotalProductErrorCount)
                ) && 
                (
                    this.TotalProductSuccessCount == other.TotalProductSuccessCount ||
                    this.TotalProductSuccessCount != null &&
                    this.TotalProductSuccessCount.Equals(other.TotalProductSuccessCount)
                ) && 
                (
                    this.Errors == other.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    this.LastUpdateUtcDate == other.LastUpdateUtcDate ||
                    this.LastUpdateUtcDate != null &&
                    this.LastUpdateUtcDate.Equals(other.LastUpdateUtcDate)
                ) && 
                (
                    this.AutoImported == other.AutoImported ||
                    this.AutoImported != null &&
                    this.AutoImported.Equals(other.AutoImported)
                ) && 
                (
                    this.BeginUtcDate == other.BeginUtcDate ||
                    this.BeginUtcDate != null &&
                    this.BeginUtcDate.Equals(other.BeginUtcDate)
                ) && 
                (
                    this.EndUtcDate == other.EndUtcDate ||
                    this.EndUtcDate != null &&
                    this.EndUtcDate.Equals(other.EndUtcDate)
                ) && 
                (
                    this.InputConfigurationUrl == other.InputConfigurationUrl ||
                    this.InputConfigurationUrl != null &&
                    this.InputConfigurationUrl.Equals(other.InputConfigurationUrl)
                ) && 
                (
                    this.Steps == other.Steps ||
                    this.Steps != null &&
                    this.Steps.SequenceEqual(other.Steps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StepName != null)
                    hash = hash * 59 + this.StepName.GetHashCode();
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.TotalProductCount != null)
                    hash = hash * 59 + this.TotalProductCount.GetHashCode();
                if (this.TotalProductErrorCount != null)
                    hash = hash * 59 + this.TotalProductErrorCount.GetHashCode();
                if (this.TotalProductSuccessCount != null)
                    hash = hash * 59 + this.TotalProductSuccessCount.GetHashCode();
                if (this.Errors != null)
                    hash = hash * 59 + this.Errors.GetHashCode();
                if (this.LastUpdateUtcDate != null)
                    hash = hash * 59 + this.LastUpdateUtcDate.GetHashCode();
                if (this.AutoImported != null)
                    hash = hash * 59 + this.AutoImported.GetHashCode();
                if (this.BeginUtcDate != null)
                    hash = hash * 59 + this.BeginUtcDate.GetHashCode();
                if (this.EndUtcDate != null)
                    hash = hash * 59 + this.EndUtcDate.GetHashCode();
                if (this.InputConfigurationUrl != null)
                    hash = hash * 59 + this.InputConfigurationUrl.GetHashCode();
                if (this.Steps != null)
                    hash = hash * 59 + this.Steps.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
