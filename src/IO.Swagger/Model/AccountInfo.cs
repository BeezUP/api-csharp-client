/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccountInfo
    /// </summary>
    [DataContract]
    public partial class AccountInfo :  IEquatable<AccountInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountInfo" /> class.
        /// </summary>
        /// <param name="UserId">UserId (required).</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="PersonalInfo">PersonalInfo (required).</param>
        /// <param name="Status">Status (required).</param>
        /// <param name="CompanyInfo">CompanyInfo (required).</param>
        /// <param name="ProfilePictureUrl">ProfilePictureUrl (required).</param>
        /// <param name="Links">Links (required).</param>
        /// <param name="Info">Info.</param>
        public AccountInfo(BeezUPCommonUserId UserId = default(BeezUPCommonUserId), BeezUPCommonEmail Email = default(BeezUPCommonEmail), PersonalInfo PersonalInfo = default(PersonalInfo), AccountStatus Status = default(AccountStatus), CompanyInfo CompanyInfo = default(CompanyInfo), ProfilePictureUrl ProfilePictureUrl = default(ProfilePictureUrl), AccountInfoLinks Links = default(AccountInfoLinks), BeezUPCommonInfoSummaries Info = default(BeezUPCommonInfoSummaries))
        {
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "PersonalInfo" is required (not null)
            if (PersonalInfo == null)
            {
                throw new InvalidDataException("PersonalInfo is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.PersonalInfo = PersonalInfo;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "CompanyInfo" is required (not null)
            if (CompanyInfo == null)
            {
                throw new InvalidDataException("CompanyInfo is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.CompanyInfo = CompanyInfo;
            }
            // to ensure "ProfilePictureUrl" is required (not null)
            if (ProfilePictureUrl == null)
            {
                throw new InvalidDataException("ProfilePictureUrl is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.ProfilePictureUrl = ProfilePictureUrl;
            }
            // to ensure "Links" is required (not null)
            if (Links == null)
            {
                throw new InvalidDataException("Links is a required property for AccountInfo and cannot be null");
            }
            else
            {
                this.Links = Links;
            }
            this.Info = Info;
        }
        
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public BeezUPCommonUserId UserId { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public BeezUPCommonEmail Email { get; set; }
        /// <summary>
        /// Gets or Sets PersonalInfo
        /// </summary>
        [DataMember(Name="personalInfo", EmitDefaultValue=false)]
        public PersonalInfo PersonalInfo { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public AccountStatus Status { get; set; }
        /// <summary>
        /// Gets or Sets CompanyInfo
        /// </summary>
        [DataMember(Name="companyInfo", EmitDefaultValue=false)]
        public CompanyInfo CompanyInfo { get; set; }
        /// <summary>
        /// Gets or Sets ProfilePictureUrl
        /// </summary>
        [DataMember(Name="profilePictureUrl", EmitDefaultValue=false)]
        public ProfilePictureUrl ProfilePictureUrl { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public AccountInfoLinks Links { get; set; }
        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public BeezUPCommonInfoSummaries Info { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountInfo {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PersonalInfo: ").Append(PersonalInfo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CompanyInfo: ").Append(CompanyInfo).Append("\n");
            sb.Append("  ProfilePictureUrl: ").Append(ProfilePictureUrl).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccountInfo);
        }

        /// <summary>
        /// Returns true if AccountInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.PersonalInfo == other.PersonalInfo ||
                    this.PersonalInfo != null &&
                    this.PersonalInfo.Equals(other.PersonalInfo)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.CompanyInfo == other.CompanyInfo ||
                    this.CompanyInfo != null &&
                    this.CompanyInfo.Equals(other.CompanyInfo)
                ) && 
                (
                    this.ProfilePictureUrl == other.ProfilePictureUrl ||
                    this.ProfilePictureUrl != null &&
                    this.ProfilePictureUrl.Equals(other.ProfilePictureUrl)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Info == other.Info ||
                    this.Info != null &&
                    this.Info.Equals(other.Info)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.PersonalInfo != null)
                    hash = hash * 59 + this.PersonalInfo.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.CompanyInfo != null)
                    hash = hash * 59 + this.CompanyInfo.GetHashCode();
                if (this.ProfilePictureUrl != null)
                    hash = hash * 59 + this.ProfilePictureUrl.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Info != null)
                    hash = hash * 59 + this.Info.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
