/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProfilePictureInfoWithDefault
    /// </summary>
    [DataContract]
    public partial class ProfilePictureInfoWithDefault :  IEquatable<ProfilePictureInfoWithDefault>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilePictureInfoWithDefault" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProfilePictureInfoWithDefault() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilePictureInfoWithDefault" /> class.
        /// </summary>
        /// <param name="ProfilePictureUrl">ProfilePictureUrl.</param>
        /// <param name="UseGravatarProfilePicture">UseGravatarProfilePicture (required).</param>
        /// <param name="DefaultPictureUrl">DefaultPictureUrl (required).</param>
        public ProfilePictureInfoWithDefault(ProfilePictureUrl ProfilePictureUrl = default(ProfilePictureUrl), UseGravatarProfilePicture UseGravatarProfilePicture = default(UseGravatarProfilePicture), ProfilePictureUrl DefaultPictureUrl = default(ProfilePictureUrl))
        {
            // to ensure "UseGravatarProfilePicture" is required (not null)
            if (UseGravatarProfilePicture == null)
            {
                throw new InvalidDataException("UseGravatarProfilePicture is a required property for ProfilePictureInfoWithDefault and cannot be null");
            }
            else
            {
                this.UseGravatarProfilePicture = UseGravatarProfilePicture;
            }
            // to ensure "DefaultPictureUrl" is required (not null)
            if (DefaultPictureUrl == null)
            {
                throw new InvalidDataException("DefaultPictureUrl is a required property for ProfilePictureInfoWithDefault and cannot be null");
            }
            else
            {
                this.DefaultPictureUrl = DefaultPictureUrl;
            }
            this.ProfilePictureUrl = ProfilePictureUrl;
        }
        
        /// <summary>
        /// Gets or Sets ProfilePictureUrl
        /// </summary>
        [DataMember(Name="profilePictureUrl", EmitDefaultValue=false)]
        public ProfilePictureUrl ProfilePictureUrl { get; set; }
        /// <summary>
        /// Gets or Sets UseGravatarProfilePicture
        /// </summary>
        [DataMember(Name="useGravatarProfilePicture", EmitDefaultValue=false)]
        public UseGravatarProfilePicture UseGravatarProfilePicture { get; set; }
        /// <summary>
        /// Gets or Sets DefaultPictureUrl
        /// </summary>
        [DataMember(Name="defaultPictureUrl", EmitDefaultValue=false)]
        public ProfilePictureUrl DefaultPictureUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfilePictureInfoWithDefault {\n");
            sb.Append("  ProfilePictureUrl: ").Append(ProfilePictureUrl).Append("\n");
            sb.Append("  UseGravatarProfilePicture: ").Append(UseGravatarProfilePicture).Append("\n");
            sb.Append("  DefaultPictureUrl: ").Append(DefaultPictureUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProfilePictureInfoWithDefault);
        }

        /// <summary>
        /// Returns true if ProfilePictureInfoWithDefault instances are equal
        /// </summary>
        /// <param name="other">Instance of ProfilePictureInfoWithDefault to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfilePictureInfoWithDefault other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProfilePictureUrl == other.ProfilePictureUrl ||
                    this.ProfilePictureUrl != null &&
                    this.ProfilePictureUrl.Equals(other.ProfilePictureUrl)
                ) && 
                (
                    this.UseGravatarProfilePicture == other.UseGravatarProfilePicture ||
                    this.UseGravatarProfilePicture != null &&
                    this.UseGravatarProfilePicture.Equals(other.UseGravatarProfilePicture)
                ) && 
                (
                    this.DefaultPictureUrl == other.DefaultPictureUrl ||
                    this.DefaultPictureUrl != null &&
                    this.DefaultPictureUrl.Equals(other.DefaultPictureUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProfilePictureUrl != null)
                    hash = hash * 59 + this.ProfilePictureUrl.GetHashCode();
                if (this.UseGravatarProfilePicture != null)
                    hash = hash * 59 + this.UseGravatarProfilePicture.GetHashCode();
                if (this.DefaultPictureUrl != null)
                    hash = hash * 59 + this.DefaultPictureUrl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
