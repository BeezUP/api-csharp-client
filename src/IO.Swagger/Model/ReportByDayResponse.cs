/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportByDayResponse
    /// </summary>
    [DataContract]
    public partial class ReportByDayResponse :  IEquatable<ReportByDayResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportByDayResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportByDayResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportByDayResponse" /> class.
        /// </summary>
        /// <param name="CurrencyCode">CurrencyCode (required).</param>
        /// <param name="GlobalPerformanceIndicators">GlobalPerformanceIndicators (required).</param>
        /// <param name="Days">Days (required).</param>
        public ReportByDayResponse(BeezUPCommonCurrencyCode CurrencyCode = default(BeezUPCommonCurrencyCode), List<GlobalPerformanceIndicatorByChannel> GlobalPerformanceIndicators = default(List<GlobalPerformanceIndicatorByChannel>), List<ReportByDay> Days = default(List<ReportByDay>))
        {
            // to ensure "CurrencyCode" is required (not null)
            if (CurrencyCode == null)
            {
                throw new InvalidDataException("CurrencyCode is a required property for ReportByDayResponse and cannot be null");
            }
            else
            {
                this.CurrencyCode = CurrencyCode;
            }
            // to ensure "GlobalPerformanceIndicators" is required (not null)
            if (GlobalPerformanceIndicators == null)
            {
                throw new InvalidDataException("GlobalPerformanceIndicators is a required property for ReportByDayResponse and cannot be null");
            }
            else
            {
                this.GlobalPerformanceIndicators = GlobalPerformanceIndicators;
            }
            // to ensure "Days" is required (not null)
            if (Days == null)
            {
                throw new InvalidDataException("Days is a required property for ReportByDayResponse and cannot be null");
            }
            else
            {
                this.Days = Days;
            }
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public BeezUPCommonCurrencyCode CurrencyCode { get; set; }
        /// <summary>
        /// Gets or Sets GlobalPerformanceIndicators
        /// </summary>
        [DataMember(Name="globalPerformanceIndicators", EmitDefaultValue=false)]
        public List<GlobalPerformanceIndicatorByChannel> GlobalPerformanceIndicators { get; set; }
        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name="days", EmitDefaultValue=false)]
        public List<ReportByDay> Days { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportByDayResponse {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  GlobalPerformanceIndicators: ").Append(GlobalPerformanceIndicators).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportByDayResponse);
        }

        /// <summary>
        /// Returns true if ReportByDayResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportByDayResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportByDayResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.GlobalPerformanceIndicators == other.GlobalPerformanceIndicators ||
                    this.GlobalPerformanceIndicators != null &&
                    this.GlobalPerformanceIndicators.SequenceEqual(other.GlobalPerformanceIndicators)
                ) && 
                (
                    this.Days == other.Days ||
                    this.Days != null &&
                    this.Days.SequenceEqual(other.Days)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.GlobalPerformanceIndicators != null)
                    hash = hash * 59 + this.GlobalPerformanceIndicators.GetHashCode();
                if (this.Days != null)
                    hash = hash * 59 + this.Days.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
