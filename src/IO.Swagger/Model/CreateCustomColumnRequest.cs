/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The request message to create a custom column
    /// </summary>
    [DataContract]
    public partial class CreateCustomColumnRequest :  IEquatable<CreateCustomColumnRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCustomColumnRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCustomColumnRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCustomColumnRequest" /> class.
        /// </summary>
        /// <param name="UserColumnName">UserColumnName (required).</param>
        /// <param name="EncryptedExpression">EncryptedExpression (required).</param>
        /// <param name="EncryptedBlocklyExpression">EncryptedBlocklyExpression (required).</param>
        /// <param name="DisplayGroupName">DisplayGroupName (required).</param>
        public CreateCustomColumnRequest(UserColumName UserColumnName = default(UserColumName), EncryptedExpression EncryptedExpression = default(EncryptedExpression), EncryptedBlocklyExpression EncryptedBlocklyExpression = default(EncryptedBlocklyExpression), DisplayGroupName DisplayGroupName = default(DisplayGroupName))
        {
            // to ensure "UserColumnName" is required (not null)
            if (UserColumnName == null)
            {
                throw new InvalidDataException("UserColumnName is a required property for CreateCustomColumnRequest and cannot be null");
            }
            else
            {
                this.UserColumnName = UserColumnName;
            }
            // to ensure "EncryptedExpression" is required (not null)
            if (EncryptedExpression == null)
            {
                throw new InvalidDataException("EncryptedExpression is a required property for CreateCustomColumnRequest and cannot be null");
            }
            else
            {
                this.EncryptedExpression = EncryptedExpression;
            }
            // to ensure "EncryptedBlocklyExpression" is required (not null)
            if (EncryptedBlocklyExpression == null)
            {
                throw new InvalidDataException("EncryptedBlocklyExpression is a required property for CreateCustomColumnRequest and cannot be null");
            }
            else
            {
                this.EncryptedBlocklyExpression = EncryptedBlocklyExpression;
            }
            // to ensure "DisplayGroupName" is required (not null)
            if (DisplayGroupName == null)
            {
                throw new InvalidDataException("DisplayGroupName is a required property for CreateCustomColumnRequest and cannot be null");
            }
            else
            {
                this.DisplayGroupName = DisplayGroupName;
            }
        }
        
        /// <summary>
        /// Gets or Sets UserColumnName
        /// </summary>
        [DataMember(Name="userColumnName", EmitDefaultValue=false)]
        public UserColumName UserColumnName { get; set; }
        /// <summary>
        /// Gets or Sets EncryptedExpression
        /// </summary>
        [DataMember(Name="encryptedExpression", EmitDefaultValue=false)]
        public EncryptedExpression EncryptedExpression { get; set; }
        /// <summary>
        /// Gets or Sets EncryptedBlocklyExpression
        /// </summary>
        [DataMember(Name="encryptedBlocklyExpression", EmitDefaultValue=false)]
        public EncryptedBlocklyExpression EncryptedBlocklyExpression { get; set; }
        /// <summary>
        /// Gets or Sets DisplayGroupName
        /// </summary>
        [DataMember(Name="displayGroupName", EmitDefaultValue=false)]
        public DisplayGroupName DisplayGroupName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCustomColumnRequest {\n");
            sb.Append("  UserColumnName: ").Append(UserColumnName).Append("\n");
            sb.Append("  EncryptedExpression: ").Append(EncryptedExpression).Append("\n");
            sb.Append("  EncryptedBlocklyExpression: ").Append(EncryptedBlocklyExpression).Append("\n");
            sb.Append("  DisplayGroupName: ").Append(DisplayGroupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateCustomColumnRequest);
        }

        /// <summary>
        /// Returns true if CreateCustomColumnRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateCustomColumnRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCustomColumnRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserColumnName == other.UserColumnName ||
                    this.UserColumnName != null &&
                    this.UserColumnName.Equals(other.UserColumnName)
                ) && 
                (
                    this.EncryptedExpression == other.EncryptedExpression ||
                    this.EncryptedExpression != null &&
                    this.EncryptedExpression.Equals(other.EncryptedExpression)
                ) && 
                (
                    this.EncryptedBlocklyExpression == other.EncryptedBlocklyExpression ||
                    this.EncryptedBlocklyExpression != null &&
                    this.EncryptedBlocklyExpression.Equals(other.EncryptedBlocklyExpression)
                ) && 
                (
                    this.DisplayGroupName == other.DisplayGroupName ||
                    this.DisplayGroupName != null &&
                    this.DisplayGroupName.Equals(other.DisplayGroupName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserColumnName != null)
                    hash = hash * 59 + this.UserColumnName.GetHashCode();
                if (this.EncryptedExpression != null)
                    hash = hash * 59 + this.EncryptedExpression.GetHashCode();
                if (this.EncryptedBlocklyExpression != null)
                    hash = hash * 59 + this.EncryptedBlocklyExpression.GetHashCode();
                if (this.DisplayGroupName != null)
                    hash = hash * 59 + this.DisplayGroupName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
