/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The exclusion filter operator
    /// </summary>
    [DataContract]
    public partial class ExclusionFilterOperator :  IEquatable<ExclusionFilterOperator>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExclusionFilterOperator" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="ExpectedChannelColumnDataType">ExpectedChannelColumnDataType.</param>
        /// <param name="ValueRequired">This operator requires a value.</param>
        /// <param name="ExpectedValueDataType">ExpectedValueDataType.</param>
        public ExclusionFilterOperator(ExclusionFilterOperatorName Name = default(ExclusionFilterOperatorName), ExclusionFilterOperatorDataType ExpectedChannelColumnDataType = default(ExclusionFilterOperatorDataType), bool? ValueRequired = default(bool?), ExclusionFilterOperatorDataType ExpectedValueDataType = default(ExclusionFilterOperatorDataType))
        {
            this.Name = Name;
            this.ExpectedChannelColumnDataType = ExpectedChannelColumnDataType;
            this.ValueRequired = ValueRequired;
            this.ExpectedValueDataType = ExpectedValueDataType;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public ExclusionFilterOperatorName Name { get; set; }
        /// <summary>
        /// Gets or Sets ExpectedChannelColumnDataType
        /// </summary>
        [DataMember(Name="expectedChannelColumnDataType", EmitDefaultValue=false)]
        public ExclusionFilterOperatorDataType ExpectedChannelColumnDataType { get; set; }
        /// <summary>
        /// This operator requires a value
        /// </summary>
        /// <value>This operator requires a value</value>
        [DataMember(Name="valueRequired", EmitDefaultValue=false)]
        public bool? ValueRequired { get; set; }
        /// <summary>
        /// Gets or Sets ExpectedValueDataType
        /// </summary>
        [DataMember(Name="expectedValueDataType", EmitDefaultValue=false)]
        public ExclusionFilterOperatorDataType ExpectedValueDataType { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExclusionFilterOperator {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExpectedChannelColumnDataType: ").Append(ExpectedChannelColumnDataType).Append("\n");
            sb.Append("  ValueRequired: ").Append(ValueRequired).Append("\n");
            sb.Append("  ExpectedValueDataType: ").Append(ExpectedValueDataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExclusionFilterOperator);
        }

        /// <summary>
        /// Returns true if ExclusionFilterOperator instances are equal
        /// </summary>
        /// <param name="other">Instance of ExclusionFilterOperator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExclusionFilterOperator other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ExpectedChannelColumnDataType == other.ExpectedChannelColumnDataType ||
                    this.ExpectedChannelColumnDataType != null &&
                    this.ExpectedChannelColumnDataType.Equals(other.ExpectedChannelColumnDataType)
                ) && 
                (
                    this.ValueRequired == other.ValueRequired ||
                    this.ValueRequired != null &&
                    this.ValueRequired.Equals(other.ValueRequired)
                ) && 
                (
                    this.ExpectedValueDataType == other.ExpectedValueDataType ||
                    this.ExpectedValueDataType != null &&
                    this.ExpectedValueDataType.Equals(other.ExpectedValueDataType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ExpectedChannelColumnDataType != null)
                    hash = hash * 59 + this.ExpectedChannelColumnDataType.GetHashCode();
                if (this.ValueRequired != null)
                    hash = hash * 59 + this.ValueRequired.GetHashCode();
                if (this.ExpectedValueDataType != null)
                    hash = hash * 59 + this.ExpectedValueDataType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
