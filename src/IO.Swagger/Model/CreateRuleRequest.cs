/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateRuleRequest
    /// </summary>
    [DataContract]
    public partial class CreateRuleRequest :  IEquatable<CreateRuleRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRuleRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRuleRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRuleRequest" /> class.
        /// </summary>
        /// <param name="OptimisationActionName">OptimisationActionName (required).</param>
        /// <param name="RuleName">The name of the rule (required).</param>
        /// <param name="ReportFilterId">The report filter to use for the rule (required).</param>
        /// <param name="StartUtcDate">The start validity utc date of the rule.</param>
        /// <param name="EndUtcDate">The end validity utc date of the rule.</param>
        public CreateRuleRequest(OptimisationActionName OptimisationActionName = default(OptimisationActionName), string RuleName = default(string), string ReportFilterId = default(string), DateTime? StartUtcDate = default(DateTime?), DateTime? EndUtcDate = default(DateTime?))
        {
            // to ensure "OptimisationActionName" is required (not null)
            if (OptimisationActionName == null)
            {
                throw new InvalidDataException("OptimisationActionName is a required property for CreateRuleRequest and cannot be null");
            }
            else
            {
                this.OptimisationActionName = OptimisationActionName;
            }
            // to ensure "RuleName" is required (not null)
            if (RuleName == null)
            {
                throw new InvalidDataException("RuleName is a required property for CreateRuleRequest and cannot be null");
            }
            else
            {
                this.RuleName = RuleName;
            }
            // to ensure "ReportFilterId" is required (not null)
            if (ReportFilterId == null)
            {
                throw new InvalidDataException("ReportFilterId is a required property for CreateRuleRequest and cannot be null");
            }
            else
            {
                this.ReportFilterId = ReportFilterId;
            }
            this.StartUtcDate = StartUtcDate;
            this.EndUtcDate = EndUtcDate;
        }
        
        /// <summary>
        /// Gets or Sets OptimisationActionName
        /// </summary>
        [DataMember(Name="optimisationActionName", EmitDefaultValue=false)]
        public OptimisationActionName OptimisationActionName { get; set; }
        /// <summary>
        /// The name of the rule
        /// </summary>
        /// <value>The name of the rule</value>
        [DataMember(Name="ruleName", EmitDefaultValue=false)]
        public string RuleName { get; set; }
        /// <summary>
        /// The report filter to use for the rule
        /// </summary>
        /// <value>The report filter to use for the rule</value>
        [DataMember(Name="reportFilterId", EmitDefaultValue=false)]
        public string ReportFilterId { get; set; }
        /// <summary>
        /// The start validity utc date of the rule
        /// </summary>
        /// <value>The start validity utc date of the rule</value>
        [DataMember(Name="startUtcDate", EmitDefaultValue=false)]
        public DateTime? StartUtcDate { get; set; }
        /// <summary>
        /// The end validity utc date of the rule
        /// </summary>
        /// <value>The end validity utc date of the rule</value>
        [DataMember(Name="endUtcDate", EmitDefaultValue=false)]
        public DateTime? EndUtcDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRuleRequest {\n");
            sb.Append("  OptimisationActionName: ").Append(OptimisationActionName).Append("\n");
            sb.Append("  RuleName: ").Append(RuleName).Append("\n");
            sb.Append("  ReportFilterId: ").Append(ReportFilterId).Append("\n");
            sb.Append("  StartUtcDate: ").Append(StartUtcDate).Append("\n");
            sb.Append("  EndUtcDate: ").Append(EndUtcDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateRuleRequest);
        }

        /// <summary>
        /// Returns true if CreateRuleRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateRuleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRuleRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OptimisationActionName == other.OptimisationActionName ||
                    this.OptimisationActionName != null &&
                    this.OptimisationActionName.Equals(other.OptimisationActionName)
                ) && 
                (
                    this.RuleName == other.RuleName ||
                    this.RuleName != null &&
                    this.RuleName.Equals(other.RuleName)
                ) && 
                (
                    this.ReportFilterId == other.ReportFilterId ||
                    this.ReportFilterId != null &&
                    this.ReportFilterId.Equals(other.ReportFilterId)
                ) && 
                (
                    this.StartUtcDate == other.StartUtcDate ||
                    this.StartUtcDate != null &&
                    this.StartUtcDate.Equals(other.StartUtcDate)
                ) && 
                (
                    this.EndUtcDate == other.EndUtcDate ||
                    this.EndUtcDate != null &&
                    this.EndUtcDate.Equals(other.EndUtcDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OptimisationActionName != null)
                    hash = hash * 59 + this.OptimisationActionName.GetHashCode();
                if (this.RuleName != null)
                    hash = hash * 59 + this.RuleName.GetHashCode();
                if (this.ReportFilterId != null)
                    hash = hash * 59 + this.ReportFilterId.GetHashCode();
                if (this.StartUtcDate != null)
                    hash = hash * 59 + this.StartUtcDate.GetHashCode();
                if (this.EndUtcDate != null)
                    hash = hash * 59 + this.EndUtcDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
