/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// This update will replace the following values.
    /// </summary>
    [DataContract]
    public partial class UpdateRuleRequest :  IEquatable<UpdateRuleRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRuleRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateRuleRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRuleRequest" /> class.
        /// </summary>
        /// <param name="RuleName">The name of the rule (required).</param>
        /// <param name="StartUtcDate">Not required. The start validity utc date of the rule..</param>
        /// <param name="EndUtcDate">Not required. The end validity utc date of the rule.</param>
        public UpdateRuleRequest(string RuleName = default(string), DateTime? StartUtcDate = default(DateTime?), DateTime? EndUtcDate = default(DateTime?))
        {
            // to ensure "RuleName" is required (not null)
            if (RuleName == null)
            {
                throw new InvalidDataException("RuleName is a required property for UpdateRuleRequest and cannot be null");
            }
            else
            {
                this.RuleName = RuleName;
            }
            this.StartUtcDate = StartUtcDate;
            this.EndUtcDate = EndUtcDate;
        }
        
        /// <summary>
        /// The name of the rule
        /// </summary>
        /// <value>The name of the rule</value>
        [DataMember(Name="ruleName", EmitDefaultValue=false)]
        public string RuleName { get; set; }
        /// <summary>
        /// Not required. The start validity utc date of the rule.
        /// </summary>
        /// <value>Not required. The start validity utc date of the rule.</value>
        [DataMember(Name="startUtcDate", EmitDefaultValue=false)]
        public DateTime? StartUtcDate { get; set; }
        /// <summary>
        /// Not required. The end validity utc date of the rule
        /// </summary>
        /// <value>Not required. The end validity utc date of the rule</value>
        [DataMember(Name="endUtcDate", EmitDefaultValue=false)]
        public DateTime? EndUtcDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateRuleRequest {\n");
            sb.Append("  RuleName: ").Append(RuleName).Append("\n");
            sb.Append("  StartUtcDate: ").Append(StartUtcDate).Append("\n");
            sb.Append("  EndUtcDate: ").Append(EndUtcDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdateRuleRequest);
        }

        /// <summary>
        /// Returns true if UpdateRuleRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateRuleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateRuleRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RuleName == other.RuleName ||
                    this.RuleName != null &&
                    this.RuleName.Equals(other.RuleName)
                ) && 
                (
                    this.StartUtcDate == other.StartUtcDate ||
                    this.StartUtcDate != null &&
                    this.StartUtcDate.Equals(other.StartUtcDate)
                ) && 
                (
                    this.EndUtcDate == other.EndUtcDate ||
                    this.EndUtcDate != null &&
                    this.EndUtcDate.Equals(other.EndUtcDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RuleName != null)
                    hash = hash * 59 + this.RuleName.GetHashCode();
                if (this.StartUtcDate != null)
                    hash = hash * 59 + this.StartUtcDate.GetHashCode();
                if (this.EndUtcDate != null)
                    hash = hash * 59 + this.EndUtcDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
