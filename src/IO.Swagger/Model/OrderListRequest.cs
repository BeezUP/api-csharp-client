/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OrderListRequest
    /// </summary>
    [DataContract]
    public partial class OrderListRequest :  IEquatable<OrderListRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderListRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderListRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderListRequest" /> class.
        /// </summary>
        /// <param name="MarketplaceTechnicalCodes">MarketplaceTechnicalCodes.</param>
        /// <param name="MarketplaceBusinessCodes">MarketplaceBusinessCodes.</param>
        /// <param name="AccountIds">Account id list.</param>
        /// <param name="BeezUPOrderStatuses">BeezUPOrderStatuses.</param>
        /// <param name="DateSearchType">DateSearchType (required).</param>
        /// <param name="BeginPeriodUtcDate">The begin period you want to make the search. \\ The period MUST not be greater than 30 days. The begin period MUST be lower than the end period.   (required).</param>
        /// <param name="EndPeriodUtcDate">The end period of you search. \\ The period MUST not be greater than 30 days. \\ The end period MUST be greater than the begin period.  The end period MUST be lower to the current date.  (required).</param>
        /// <param name="OrderBuyerName">OrderBuyerName.</param>
        /// <param name="MarketplaceOrderIds">MarketplaceOrderIds.</param>
        /// <param name="OrderMerchantOrderIds">Merchant order id list.</param>
        /// <param name="PageSize">PageSize (required).</param>
        /// <param name="PageNumber">PageNumber (required).</param>
        public OrderListRequest(List<BeezUPCommonMarketplaceTechnicalCode> MarketplaceTechnicalCodes = default(List<BeezUPCommonMarketplaceTechnicalCode>), List<BeezUPCommonMarketplaceBusinessCode> MarketplaceBusinessCodes = default(List<BeezUPCommonMarketplaceBusinessCode>), List<AccountId> AccountIds = default(List<AccountId>), List<BeezUPOrderStatus> BeezUPOrderStatuses = default(List<BeezUPOrderStatus>), DateSearchType DateSearchType = default(DateSearchType), DateTime? BeginPeriodUtcDate = default(DateTime?), DateTime? EndPeriodUtcDate = default(DateTime?), OrderBuyerName OrderBuyerName = default(OrderBuyerName), List<MarketplaceOrderId> MarketplaceOrderIds = default(List<MarketplaceOrderId>), List<OrderMerchantOrderId> OrderMerchantOrderIds = default(List<OrderMerchantOrderId>), PageSize PageSize = default(PageSize), PageNumber PageNumber = default(PageNumber))
        {
            // to ensure "DateSearchType" is required (not null)
            if (DateSearchType == null)
            {
                throw new InvalidDataException("DateSearchType is a required property for OrderListRequest and cannot be null");
            }
            else
            {
                this.DateSearchType = DateSearchType;
            }
            // to ensure "BeginPeriodUtcDate" is required (not null)
            if (BeginPeriodUtcDate == null)
            {
                throw new InvalidDataException("BeginPeriodUtcDate is a required property for OrderListRequest and cannot be null");
            }
            else
            {
                this.BeginPeriodUtcDate = BeginPeriodUtcDate;
            }
            // to ensure "EndPeriodUtcDate" is required (not null)
            if (EndPeriodUtcDate == null)
            {
                throw new InvalidDataException("EndPeriodUtcDate is a required property for OrderListRequest and cannot be null");
            }
            else
            {
                this.EndPeriodUtcDate = EndPeriodUtcDate;
            }
            // to ensure "PageSize" is required (not null)
            if (PageSize == null)
            {
                throw new InvalidDataException("PageSize is a required property for OrderListRequest and cannot be null");
            }
            else
            {
                this.PageSize = PageSize;
            }
            // to ensure "PageNumber" is required (not null)
            if (PageNumber == null)
            {
                throw new InvalidDataException("PageNumber is a required property for OrderListRequest and cannot be null");
            }
            else
            {
                this.PageNumber = PageNumber;
            }
            this.MarketplaceTechnicalCodes = MarketplaceTechnicalCodes;
            this.MarketplaceBusinessCodes = MarketplaceBusinessCodes;
            this.AccountIds = AccountIds;
            this.BeezUPOrderStatuses = BeezUPOrderStatuses;
            this.OrderBuyerName = OrderBuyerName;
            this.MarketplaceOrderIds = MarketplaceOrderIds;
            this.OrderMerchantOrderIds = OrderMerchantOrderIds;
        }
        
        /// <summary>
        /// Gets or Sets MarketplaceTechnicalCodes
        /// </summary>
        [DataMember(Name="marketplaceTechnicalCodes", EmitDefaultValue=false)]
        public List<BeezUPCommonMarketplaceTechnicalCode> MarketplaceTechnicalCodes { get; set; }
        /// <summary>
        /// Gets or Sets MarketplaceBusinessCodes
        /// </summary>
        [DataMember(Name="marketplaceBusinessCodes", EmitDefaultValue=false)]
        public List<BeezUPCommonMarketplaceBusinessCode> MarketplaceBusinessCodes { get; set; }
        /// <summary>
        /// Account id list
        /// </summary>
        /// <value>Account id list</value>
        [DataMember(Name="accountIds", EmitDefaultValue=false)]
        public List<AccountId> AccountIds { get; set; }
        /// <summary>
        /// Gets or Sets BeezUPOrderStatuses
        /// </summary>
        [DataMember(Name="beezUPOrderStatuses", EmitDefaultValue=false)]
        public List<BeezUPOrderStatus> BeezUPOrderStatuses { get; set; }
        /// <summary>
        /// Gets or Sets DateSearchType
        /// </summary>
        [DataMember(Name="dateSearchType", EmitDefaultValue=false)]
        public DateSearchType DateSearchType { get; set; }
        /// <summary>
        /// The begin period you want to make the search. \\ The period MUST not be greater than 30 days. The begin period MUST be lower than the end period.  
        /// </summary>
        /// <value>The begin period you want to make the search. \\ The period MUST not be greater than 30 days. The begin period MUST be lower than the end period.  </value>
        [DataMember(Name="beginPeriodUtcDate", EmitDefaultValue=false)]
        public DateTime? BeginPeriodUtcDate { get; set; }
        /// <summary>
        /// The end period of you search. \\ The period MUST not be greater than 30 days. \\ The end period MUST be greater than the begin period.  The end period MUST be lower to the current date. 
        /// </summary>
        /// <value>The end period of you search. \\ The period MUST not be greater than 30 days. \\ The end period MUST be greater than the begin period.  The end period MUST be lower to the current date. </value>
        [DataMember(Name="endPeriodUtcDate", EmitDefaultValue=false)]
        public DateTime? EndPeriodUtcDate { get; set; }
        /// <summary>
        /// Gets or Sets OrderBuyerName
        /// </summary>
        [DataMember(Name="order_Buyer_Name", EmitDefaultValue=false)]
        public OrderBuyerName OrderBuyerName { get; set; }
        /// <summary>
        /// Gets or Sets MarketplaceOrderIds
        /// </summary>
        [DataMember(Name="marketplaceOrderIds", EmitDefaultValue=false)]
        public List<MarketplaceOrderId> MarketplaceOrderIds { get; set; }
        /// <summary>
        /// Merchant order id list
        /// </summary>
        /// <value>Merchant order id list</value>
        [DataMember(Name="order_MerchantOrderIds", EmitDefaultValue=false)]
        public List<OrderMerchantOrderId> OrderMerchantOrderIds { get; set; }
        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public PageSize PageSize { get; set; }
        /// <summary>
        /// Gets or Sets PageNumber
        /// </summary>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public PageNumber PageNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderListRequest {\n");
            sb.Append("  MarketplaceTechnicalCodes: ").Append(MarketplaceTechnicalCodes).Append("\n");
            sb.Append("  MarketplaceBusinessCodes: ").Append(MarketplaceBusinessCodes).Append("\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  BeezUPOrderStatuses: ").Append(BeezUPOrderStatuses).Append("\n");
            sb.Append("  DateSearchType: ").Append(DateSearchType).Append("\n");
            sb.Append("  BeginPeriodUtcDate: ").Append(BeginPeriodUtcDate).Append("\n");
            sb.Append("  EndPeriodUtcDate: ").Append(EndPeriodUtcDate).Append("\n");
            sb.Append("  OrderBuyerName: ").Append(OrderBuyerName).Append("\n");
            sb.Append("  MarketplaceOrderIds: ").Append(MarketplaceOrderIds).Append("\n");
            sb.Append("  OrderMerchantOrderIds: ").Append(OrderMerchantOrderIds).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderListRequest);
        }

        /// <summary>
        /// Returns true if OrderListRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderListRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderListRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MarketplaceTechnicalCodes == other.MarketplaceTechnicalCodes ||
                    this.MarketplaceTechnicalCodes != null &&
                    this.MarketplaceTechnicalCodes.SequenceEqual(other.MarketplaceTechnicalCodes)
                ) && 
                (
                    this.MarketplaceBusinessCodes == other.MarketplaceBusinessCodes ||
                    this.MarketplaceBusinessCodes != null &&
                    this.MarketplaceBusinessCodes.SequenceEqual(other.MarketplaceBusinessCodes)
                ) && 
                (
                    this.AccountIds == other.AccountIds ||
                    this.AccountIds != null &&
                    this.AccountIds.SequenceEqual(other.AccountIds)
                ) && 
                (
                    this.BeezUPOrderStatuses == other.BeezUPOrderStatuses ||
                    this.BeezUPOrderStatuses != null &&
                    this.BeezUPOrderStatuses.SequenceEqual(other.BeezUPOrderStatuses)
                ) && 
                (
                    this.DateSearchType == other.DateSearchType ||
                    this.DateSearchType != null &&
                    this.DateSearchType.Equals(other.DateSearchType)
                ) && 
                (
                    this.BeginPeriodUtcDate == other.BeginPeriodUtcDate ||
                    this.BeginPeriodUtcDate != null &&
                    this.BeginPeriodUtcDate.Equals(other.BeginPeriodUtcDate)
                ) && 
                (
                    this.EndPeriodUtcDate == other.EndPeriodUtcDate ||
                    this.EndPeriodUtcDate != null &&
                    this.EndPeriodUtcDate.Equals(other.EndPeriodUtcDate)
                ) && 
                (
                    this.OrderBuyerName == other.OrderBuyerName ||
                    this.OrderBuyerName != null &&
                    this.OrderBuyerName.Equals(other.OrderBuyerName)
                ) && 
                (
                    this.MarketplaceOrderIds == other.MarketplaceOrderIds ||
                    this.MarketplaceOrderIds != null &&
                    this.MarketplaceOrderIds.SequenceEqual(other.MarketplaceOrderIds)
                ) && 
                (
                    this.OrderMerchantOrderIds == other.OrderMerchantOrderIds ||
                    this.OrderMerchantOrderIds != null &&
                    this.OrderMerchantOrderIds.SequenceEqual(other.OrderMerchantOrderIds)
                ) && 
                (
                    this.PageSize == other.PageSize ||
                    this.PageSize != null &&
                    this.PageSize.Equals(other.PageSize)
                ) && 
                (
                    this.PageNumber == other.PageNumber ||
                    this.PageNumber != null &&
                    this.PageNumber.Equals(other.PageNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MarketplaceTechnicalCodes != null)
                    hash = hash * 59 + this.MarketplaceTechnicalCodes.GetHashCode();
                if (this.MarketplaceBusinessCodes != null)
                    hash = hash * 59 + this.MarketplaceBusinessCodes.GetHashCode();
                if (this.AccountIds != null)
                    hash = hash * 59 + this.AccountIds.GetHashCode();
                if (this.BeezUPOrderStatuses != null)
                    hash = hash * 59 + this.BeezUPOrderStatuses.GetHashCode();
                if (this.DateSearchType != null)
                    hash = hash * 59 + this.DateSearchType.GetHashCode();
                if (this.BeginPeriodUtcDate != null)
                    hash = hash * 59 + this.BeginPeriodUtcDate.GetHashCode();
                if (this.EndPeriodUtcDate != null)
                    hash = hash * 59 + this.EndPeriodUtcDate.GetHashCode();
                if (this.OrderBuyerName != null)
                    hash = hash * 59 + this.OrderBuyerName.GetHashCode();
                if (this.MarketplaceOrderIds != null)
                    hash = hash * 59 + this.MarketplaceOrderIds.GetHashCode();
                if (this.OrderMerchantOrderIds != null)
                    hash = hash * 59 + this.OrderMerchantOrderIds.GetHashCode();
                if (this.PageSize != null)
                    hash = hash * 59 + this.PageSize.GetHashCode();
                if (this.PageNumber != null)
                    hash = hash * 59 + this.PageNumber.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
