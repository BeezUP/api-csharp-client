/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetChannelCatalogProductInfoListRequest
    /// </summary>
    [DataContract]
    public partial class GetChannelCatalogProductInfoListRequest :  IEquatable<GetChannelCatalogProductInfoListRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetChannelCatalogProductInfoListRequest" /> class.
        /// </summary>
        /// <param name="Sku">Search by product sku. If null the filter will not be taken in account..</param>
        /// <param name="Title">Search by product title. If null the filter will not be taken in account..</param>
        /// <param name="Overrided">Search overrided products. If null the filter will not be taken in account..</param>
        /// <param name="Disabled">Search disabled products. If null the filter will not be taken in account..</param>
        /// <param name="CategoryMapped">Search product with category mapped with the channel. If null the filter will not be taken in account..</param>
        /// <param name="Excluded">Search excluded products by at least an exclusion filter. If null the filter will not be taken in account..</param>
        /// <param name="Active">If false, search for product absent from the current catalog. If null the filter will not be taken in account..</param>
        public GetChannelCatalogProductInfoListRequest(string Sku = default(string), string Title = default(string), bool? Overrided = default(bool?), bool? Disabled = default(bool?), bool? CategoryMapped = default(bool?), bool? Excluded = default(bool?), bool? Active = default(bool?))
        {
            this.Sku = Sku;
            this.Title = Title;
            this.Overrided = Overrided;
            this.Disabled = Disabled;
            this.CategoryMapped = CategoryMapped;
            this.Excluded = Excluded;
            this.Active = Active;
        }
        
        /// <summary>
        /// Search by product sku. If null the filter will not be taken in account.
        /// </summary>
        /// <value>Search by product sku. If null the filter will not be taken in account.</value>
        [DataMember(Name="sku", EmitDefaultValue=false)]
        public string Sku { get; set; }
        /// <summary>
        /// Search by product title. If null the filter will not be taken in account.
        /// </summary>
        /// <value>Search by product title. If null the filter will not be taken in account.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Search overrided products. If null the filter will not be taken in account.
        /// </summary>
        /// <value>Search overrided products. If null the filter will not be taken in account.</value>
        [DataMember(Name="overrided", EmitDefaultValue=false)]
        public bool? Overrided { get; set; }
        /// <summary>
        /// Search disabled products. If null the filter will not be taken in account.
        /// </summary>
        /// <value>Search disabled products. If null the filter will not be taken in account.</value>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public bool? Disabled { get; set; }
        /// <summary>
        /// Search product with category mapped with the channel. If null the filter will not be taken in account.
        /// </summary>
        /// <value>Search product with category mapped with the channel. If null the filter will not be taken in account.</value>
        [DataMember(Name="categoryMapped", EmitDefaultValue=false)]
        public bool? CategoryMapped { get; set; }
        /// <summary>
        /// Search excluded products by at least an exclusion filter. If null the filter will not be taken in account.
        /// </summary>
        /// <value>Search excluded products by at least an exclusion filter. If null the filter will not be taken in account.</value>
        [DataMember(Name="excluded", EmitDefaultValue=false)]
        public bool? Excluded { get; set; }
        /// <summary>
        /// If false, search for product absent from the current catalog. If null the filter will not be taken in account.
        /// </summary>
        /// <value>If false, search for product absent from the current catalog. If null the filter will not be taken in account.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetChannelCatalogProductInfoListRequest {\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Overrided: ").Append(Overrided).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  CategoryMapped: ").Append(CategoryMapped).Append("\n");
            sb.Append("  Excluded: ").Append(Excluded).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetChannelCatalogProductInfoListRequest);
        }

        /// <summary>
        /// Returns true if GetChannelCatalogProductInfoListRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of GetChannelCatalogProductInfoListRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetChannelCatalogProductInfoListRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Sku == other.Sku ||
                    this.Sku != null &&
                    this.Sku.Equals(other.Sku)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Overrided == other.Overrided ||
                    this.Overrided != null &&
                    this.Overrided.Equals(other.Overrided)
                ) && 
                (
                    this.Disabled == other.Disabled ||
                    this.Disabled != null &&
                    this.Disabled.Equals(other.Disabled)
                ) && 
                (
                    this.CategoryMapped == other.CategoryMapped ||
                    this.CategoryMapped != null &&
                    this.CategoryMapped.Equals(other.CategoryMapped)
                ) && 
                (
                    this.Excluded == other.Excluded ||
                    this.Excluded != null &&
                    this.Excluded.Equals(other.Excluded)
                ) && 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.Equals(other.Active)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Sku != null)
                    hash = hash * 59 + this.Sku.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Overrided != null)
                    hash = hash * 59 + this.Overrided.GetHashCode();
                if (this.Disabled != null)
                    hash = hash * 59 + this.Disabled.GetHashCode();
                if (this.CategoryMapped != null)
                    hash = hash * 59 + this.CategoryMapped.GetHashCode();
                if (this.Excluded != null)
                    hash = hash * 59 + this.Excluded.GetHashCode();
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
