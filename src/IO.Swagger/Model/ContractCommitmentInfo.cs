/* 
 * BeezUP API
 *
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describe the commitment information related to the offer.
    /// </summary>
    [DataContract]
    public partial class ContractCommitmentInfo :  IEquatable<ContractCommitmentInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractCommitmentInfo" /> class.
        /// </summary>
        /// <param name="CommitmentCalculatedFinishDate">The commitment end date related to the offer.</param>
        /// <param name="NewContractStartDate">The start date related to the offer.</param>
        /// <param name="CommitmentPeriodInMonth">The commitment period in month related to the offer.</param>
        /// <param name="TrialPeriodInMonth">The trial period in month related to the offer.</param>
        /// <param name="TrialPeriodFinishDate">The trial period end date related to the offer.</param>
        /// <param name="PaymentDelayInDays">The payment delay in days related to the offer.</param>
        /// <param name="OfferId">OfferId.</param>
        /// <param name="OfferName">The offer Name.</param>
        /// <param name="CurrentContractId">Your current contract id.</param>
        /// <param name="CommercialUserId">Your current commercial user id.</param>
        /// <param name="Model">Interal usage: Old offer type. The model description.</param>
        /// <param name="CurrentContractTerminationDate">The current contract termination date.</param>
        /// <param name="RequestedPaymentMethod">RequestedPaymentMethod.</param>
        /// <param name="CurrentCustomerPaymentMethod">CurrentCustomerPaymentMethod.</param>
        /// <param name="ContractType">Internal usage: Old offer type. Your contract type.</param>
        /// <param name="IsModelMustBeTransmittedInNewContract">Internal usage: Old offer type. Is the current contract model needs to be converted into a new contract type.</param>
        /// <param name="FixedAndVariableClickInfo">FixedAndVariableClickInfo.</param>
        /// <param name="VariableModelInfo">VariableModelInfo.</param>
        /// <param name="PaymentMethodAuthorized">PaymentMethodAuthorized.</param>
        /// <param name="CouponOfferCode">CouponOfferCode.</param>
        /// <param name="CommercialCreatorUserId">The commercial that is responsible of the creation of your account.</param>
        /// <param name="MinBillingPeriodInMonths">The minimum billing period in month authorized for this offer..</param>
        /// <param name="IsCustomerWantsToTerminateHisContract">If true, this means you want to leave us and that&#39;s sad... :&#39;-(.</param>
        public ContractCommitmentInfo(DateTime? CommitmentCalculatedFinishDate = default(DateTime?), DateTime? NewContractStartDate = default(DateTime?), int? CommitmentPeriodInMonth = default(int?), int? TrialPeriodInMonth = default(int?), DateTime? TrialPeriodFinishDate = default(DateTime?), int? PaymentDelayInDays = default(int?), OfferId OfferId = default(OfferId), string OfferName = default(string), string CurrentContractId = default(string), string CommercialUserId = default(string), string Model = default(string), DateTime? CurrentContractTerminationDate = default(DateTime?), PaymentMethod RequestedPaymentMethod = default(PaymentMethod), PaymentMethod CurrentCustomerPaymentMethod = default(PaymentMethod), int? ContractType = default(int?), bool? IsModelMustBeTransmittedInNewContract = default(bool?), FixedAndVariableClickModelInfo FixedAndVariableClickInfo = default(FixedAndVariableClickModelInfo), VariableModelInfo VariableModelInfo = default(VariableModelInfo), PaymentMethod PaymentMethodAuthorized = default(PaymentMethod), CouponOfferCode CouponOfferCode = default(CouponOfferCode), string CommercialCreatorUserId = default(string), int? MinBillingPeriodInMonths = default(int?), bool? IsCustomerWantsToTerminateHisContract = default(bool?))
        {
            this.CommitmentCalculatedFinishDate = CommitmentCalculatedFinishDate;
            this.NewContractStartDate = NewContractStartDate;
            this.CommitmentPeriodInMonth = CommitmentPeriodInMonth;
            this.TrialPeriodInMonth = TrialPeriodInMonth;
            this.TrialPeriodFinishDate = TrialPeriodFinishDate;
            this.PaymentDelayInDays = PaymentDelayInDays;
            this.OfferId = OfferId;
            this.OfferName = OfferName;
            this.CurrentContractId = CurrentContractId;
            this.CommercialUserId = CommercialUserId;
            this.Model = Model;
            this.CurrentContractTerminationDate = CurrentContractTerminationDate;
            this.RequestedPaymentMethod = RequestedPaymentMethod;
            this.CurrentCustomerPaymentMethod = CurrentCustomerPaymentMethod;
            this.ContractType = ContractType;
            this.IsModelMustBeTransmittedInNewContract = IsModelMustBeTransmittedInNewContract;
            this.FixedAndVariableClickInfo = FixedAndVariableClickInfo;
            this.VariableModelInfo = VariableModelInfo;
            this.PaymentMethodAuthorized = PaymentMethodAuthorized;
            this.CouponOfferCode = CouponOfferCode;
            this.CommercialCreatorUserId = CommercialCreatorUserId;
            this.MinBillingPeriodInMonths = MinBillingPeriodInMonths;
            this.IsCustomerWantsToTerminateHisContract = IsCustomerWantsToTerminateHisContract;
        }
        
        /// <summary>
        /// The commitment end date related to the offer
        /// </summary>
        /// <value>The commitment end date related to the offer</value>
        [DataMember(Name="commitmentCalculatedFinishDate", EmitDefaultValue=false)]
        public DateTime? CommitmentCalculatedFinishDate { get; set; }
        /// <summary>
        /// The start date related to the offer
        /// </summary>
        /// <value>The start date related to the offer</value>
        [DataMember(Name="newContractStartDate", EmitDefaultValue=false)]
        public DateTime? NewContractStartDate { get; set; }
        /// <summary>
        /// The commitment period in month related to the offer
        /// </summary>
        /// <value>The commitment period in month related to the offer</value>
        [DataMember(Name="commitmentPeriodInMonth", EmitDefaultValue=false)]
        public int? CommitmentPeriodInMonth { get; set; }
        /// <summary>
        /// The trial period in month related to the offer
        /// </summary>
        /// <value>The trial period in month related to the offer</value>
        [DataMember(Name="trialPeriodInMonth", EmitDefaultValue=false)]
        public int? TrialPeriodInMonth { get; set; }
        /// <summary>
        /// The trial period end date related to the offer
        /// </summary>
        /// <value>The trial period end date related to the offer</value>
        [DataMember(Name="trialPeriodFinishDate", EmitDefaultValue=false)]
        public DateTime? TrialPeriodFinishDate { get; set; }
        /// <summary>
        /// The payment delay in days related to the offer
        /// </summary>
        /// <value>The payment delay in days related to the offer</value>
        [DataMember(Name="paymentDelayInDays", EmitDefaultValue=false)]
        public int? PaymentDelayInDays { get; set; }
        /// <summary>
        /// Gets or Sets OfferId
        /// </summary>
        [DataMember(Name="offerId", EmitDefaultValue=false)]
        public OfferId OfferId { get; set; }
        /// <summary>
        /// The offer Name
        /// </summary>
        /// <value>The offer Name</value>
        [DataMember(Name="offerName", EmitDefaultValue=false)]
        public string OfferName { get; set; }
        /// <summary>
        /// Your current contract id
        /// </summary>
        /// <value>Your current contract id</value>
        [DataMember(Name="currentContractId", EmitDefaultValue=false)]
        public string CurrentContractId { get; set; }
        /// <summary>
        /// Your current commercial user id
        /// </summary>
        /// <value>Your current commercial user id</value>
        [DataMember(Name="commercialUserId", EmitDefaultValue=false)]
        public string CommercialUserId { get; set; }
        /// <summary>
        /// Interal usage: Old offer type. The model description
        /// </summary>
        /// <value>Interal usage: Old offer type. The model description</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }
        /// <summary>
        /// The current contract termination date
        /// </summary>
        /// <value>The current contract termination date</value>
        [DataMember(Name="currentContractTerminationDate", EmitDefaultValue=false)]
        public DateTime? CurrentContractTerminationDate { get; set; }
        /// <summary>
        /// Gets or Sets RequestedPaymentMethod
        /// </summary>
        [DataMember(Name="requestedPaymentMethod", EmitDefaultValue=false)]
        public PaymentMethod RequestedPaymentMethod { get; set; }
        /// <summary>
        /// Gets or Sets CurrentCustomerPaymentMethod
        /// </summary>
        [DataMember(Name="currentCustomerPaymentMethod", EmitDefaultValue=false)]
        public PaymentMethod CurrentCustomerPaymentMethod { get; set; }
        /// <summary>
        /// Internal usage: Old offer type. Your contract type
        /// </summary>
        /// <value>Internal usage: Old offer type. Your contract type</value>
        [DataMember(Name="contractType", EmitDefaultValue=false)]
        public int? ContractType { get; set; }
        /// <summary>
        /// Internal usage: Old offer type. Is the current contract model needs to be converted into a new contract type
        /// </summary>
        /// <value>Internal usage: Old offer type. Is the current contract model needs to be converted into a new contract type</value>
        [DataMember(Name="isModelMustBeTransmittedInNewContract", EmitDefaultValue=false)]
        public bool? IsModelMustBeTransmittedInNewContract { get; set; }
        /// <summary>
        /// Gets or Sets FixedAndVariableClickInfo
        /// </summary>
        [DataMember(Name="fixedAndVariableClickInfo", EmitDefaultValue=false)]
        public FixedAndVariableClickModelInfo FixedAndVariableClickInfo { get; set; }
        /// <summary>
        /// Gets or Sets VariableModelInfo
        /// </summary>
        [DataMember(Name="variableModelInfo", EmitDefaultValue=false)]
        public VariableModelInfo VariableModelInfo { get; set; }
        /// <summary>
        /// Gets or Sets PaymentMethodAuthorized
        /// </summary>
        [DataMember(Name="paymentMethodAuthorized", EmitDefaultValue=false)]
        public PaymentMethod PaymentMethodAuthorized { get; set; }
        /// <summary>
        /// Gets or Sets CouponOfferCode
        /// </summary>
        [DataMember(Name="couponOfferCode", EmitDefaultValue=false)]
        public CouponOfferCode CouponOfferCode { get; set; }
        /// <summary>
        /// The commercial that is responsible of the creation of your account
        /// </summary>
        /// <value>The commercial that is responsible of the creation of your account</value>
        [DataMember(Name="commercialCreatorUserId", EmitDefaultValue=false)]
        public string CommercialCreatorUserId { get; set; }
        /// <summary>
        /// The minimum billing period in month authorized for this offer.
        /// </summary>
        /// <value>The minimum billing period in month authorized for this offer.</value>
        [DataMember(Name="minBillingPeriodInMonths", EmitDefaultValue=false)]
        public int? MinBillingPeriodInMonths { get; set; }
        /// <summary>
        /// If true, this means you want to leave us and that&#39;s sad... :&#39;-(
        /// </summary>
        /// <value>If true, this means you want to leave us and that&#39;s sad... :&#39;-(</value>
        [DataMember(Name="isCustomerWantsToTerminateHisContract", EmitDefaultValue=false)]
        public bool? IsCustomerWantsToTerminateHisContract { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractCommitmentInfo {\n");
            sb.Append("  CommitmentCalculatedFinishDate: ").Append(CommitmentCalculatedFinishDate).Append("\n");
            sb.Append("  NewContractStartDate: ").Append(NewContractStartDate).Append("\n");
            sb.Append("  CommitmentPeriodInMonth: ").Append(CommitmentPeriodInMonth).Append("\n");
            sb.Append("  TrialPeriodInMonth: ").Append(TrialPeriodInMonth).Append("\n");
            sb.Append("  TrialPeriodFinishDate: ").Append(TrialPeriodFinishDate).Append("\n");
            sb.Append("  PaymentDelayInDays: ").Append(PaymentDelayInDays).Append("\n");
            sb.Append("  OfferId: ").Append(OfferId).Append("\n");
            sb.Append("  OfferName: ").Append(OfferName).Append("\n");
            sb.Append("  CurrentContractId: ").Append(CurrentContractId).Append("\n");
            sb.Append("  CommercialUserId: ").Append(CommercialUserId).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  CurrentContractTerminationDate: ").Append(CurrentContractTerminationDate).Append("\n");
            sb.Append("  RequestedPaymentMethod: ").Append(RequestedPaymentMethod).Append("\n");
            sb.Append("  CurrentCustomerPaymentMethod: ").Append(CurrentCustomerPaymentMethod).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  IsModelMustBeTransmittedInNewContract: ").Append(IsModelMustBeTransmittedInNewContract).Append("\n");
            sb.Append("  FixedAndVariableClickInfo: ").Append(FixedAndVariableClickInfo).Append("\n");
            sb.Append("  VariableModelInfo: ").Append(VariableModelInfo).Append("\n");
            sb.Append("  PaymentMethodAuthorized: ").Append(PaymentMethodAuthorized).Append("\n");
            sb.Append("  CouponOfferCode: ").Append(CouponOfferCode).Append("\n");
            sb.Append("  CommercialCreatorUserId: ").Append(CommercialCreatorUserId).Append("\n");
            sb.Append("  MinBillingPeriodInMonths: ").Append(MinBillingPeriodInMonths).Append("\n");
            sb.Append("  IsCustomerWantsToTerminateHisContract: ").Append(IsCustomerWantsToTerminateHisContract).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContractCommitmentInfo);
        }

        /// <summary>
        /// Returns true if ContractCommitmentInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ContractCommitmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractCommitmentInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CommitmentCalculatedFinishDate == other.CommitmentCalculatedFinishDate ||
                    this.CommitmentCalculatedFinishDate != null &&
                    this.CommitmentCalculatedFinishDate.Equals(other.CommitmentCalculatedFinishDate)
                ) && 
                (
                    this.NewContractStartDate == other.NewContractStartDate ||
                    this.NewContractStartDate != null &&
                    this.NewContractStartDate.Equals(other.NewContractStartDate)
                ) && 
                (
                    this.CommitmentPeriodInMonth == other.CommitmentPeriodInMonth ||
                    this.CommitmentPeriodInMonth != null &&
                    this.CommitmentPeriodInMonth.Equals(other.CommitmentPeriodInMonth)
                ) && 
                (
                    this.TrialPeriodInMonth == other.TrialPeriodInMonth ||
                    this.TrialPeriodInMonth != null &&
                    this.TrialPeriodInMonth.Equals(other.TrialPeriodInMonth)
                ) && 
                (
                    this.TrialPeriodFinishDate == other.TrialPeriodFinishDate ||
                    this.TrialPeriodFinishDate != null &&
                    this.TrialPeriodFinishDate.Equals(other.TrialPeriodFinishDate)
                ) && 
                (
                    this.PaymentDelayInDays == other.PaymentDelayInDays ||
                    this.PaymentDelayInDays != null &&
                    this.PaymentDelayInDays.Equals(other.PaymentDelayInDays)
                ) && 
                (
                    this.OfferId == other.OfferId ||
                    this.OfferId != null &&
                    this.OfferId.Equals(other.OfferId)
                ) && 
                (
                    this.OfferName == other.OfferName ||
                    this.OfferName != null &&
                    this.OfferName.Equals(other.OfferName)
                ) && 
                (
                    this.CurrentContractId == other.CurrentContractId ||
                    this.CurrentContractId != null &&
                    this.CurrentContractId.Equals(other.CurrentContractId)
                ) && 
                (
                    this.CommercialUserId == other.CommercialUserId ||
                    this.CommercialUserId != null &&
                    this.CommercialUserId.Equals(other.CommercialUserId)
                ) && 
                (
                    this.Model == other.Model ||
                    this.Model != null &&
                    this.Model.Equals(other.Model)
                ) && 
                (
                    this.CurrentContractTerminationDate == other.CurrentContractTerminationDate ||
                    this.CurrentContractTerminationDate != null &&
                    this.CurrentContractTerminationDate.Equals(other.CurrentContractTerminationDate)
                ) && 
                (
                    this.RequestedPaymentMethod == other.RequestedPaymentMethod ||
                    this.RequestedPaymentMethod != null &&
                    this.RequestedPaymentMethod.Equals(other.RequestedPaymentMethod)
                ) && 
                (
                    this.CurrentCustomerPaymentMethod == other.CurrentCustomerPaymentMethod ||
                    this.CurrentCustomerPaymentMethod != null &&
                    this.CurrentCustomerPaymentMethod.Equals(other.CurrentCustomerPaymentMethod)
                ) && 
                (
                    this.ContractType == other.ContractType ||
                    this.ContractType != null &&
                    this.ContractType.Equals(other.ContractType)
                ) && 
                (
                    this.IsModelMustBeTransmittedInNewContract == other.IsModelMustBeTransmittedInNewContract ||
                    this.IsModelMustBeTransmittedInNewContract != null &&
                    this.IsModelMustBeTransmittedInNewContract.Equals(other.IsModelMustBeTransmittedInNewContract)
                ) && 
                (
                    this.FixedAndVariableClickInfo == other.FixedAndVariableClickInfo ||
                    this.FixedAndVariableClickInfo != null &&
                    this.FixedAndVariableClickInfo.Equals(other.FixedAndVariableClickInfo)
                ) && 
                (
                    this.VariableModelInfo == other.VariableModelInfo ||
                    this.VariableModelInfo != null &&
                    this.VariableModelInfo.Equals(other.VariableModelInfo)
                ) && 
                (
                    this.PaymentMethodAuthorized == other.PaymentMethodAuthorized ||
                    this.PaymentMethodAuthorized != null &&
                    this.PaymentMethodAuthorized.Equals(other.PaymentMethodAuthorized)
                ) && 
                (
                    this.CouponOfferCode == other.CouponOfferCode ||
                    this.CouponOfferCode != null &&
                    this.CouponOfferCode.Equals(other.CouponOfferCode)
                ) && 
                (
                    this.CommercialCreatorUserId == other.CommercialCreatorUserId ||
                    this.CommercialCreatorUserId != null &&
                    this.CommercialCreatorUserId.Equals(other.CommercialCreatorUserId)
                ) && 
                (
                    this.MinBillingPeriodInMonths == other.MinBillingPeriodInMonths ||
                    this.MinBillingPeriodInMonths != null &&
                    this.MinBillingPeriodInMonths.Equals(other.MinBillingPeriodInMonths)
                ) && 
                (
                    this.IsCustomerWantsToTerminateHisContract == other.IsCustomerWantsToTerminateHisContract ||
                    this.IsCustomerWantsToTerminateHisContract != null &&
                    this.IsCustomerWantsToTerminateHisContract.Equals(other.IsCustomerWantsToTerminateHisContract)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CommitmentCalculatedFinishDate != null)
                    hash = hash * 59 + this.CommitmentCalculatedFinishDate.GetHashCode();
                if (this.NewContractStartDate != null)
                    hash = hash * 59 + this.NewContractStartDate.GetHashCode();
                if (this.CommitmentPeriodInMonth != null)
                    hash = hash * 59 + this.CommitmentPeriodInMonth.GetHashCode();
                if (this.TrialPeriodInMonth != null)
                    hash = hash * 59 + this.TrialPeriodInMonth.GetHashCode();
                if (this.TrialPeriodFinishDate != null)
                    hash = hash * 59 + this.TrialPeriodFinishDate.GetHashCode();
                if (this.PaymentDelayInDays != null)
                    hash = hash * 59 + this.PaymentDelayInDays.GetHashCode();
                if (this.OfferId != null)
                    hash = hash * 59 + this.OfferId.GetHashCode();
                if (this.OfferName != null)
                    hash = hash * 59 + this.OfferName.GetHashCode();
                if (this.CurrentContractId != null)
                    hash = hash * 59 + this.CurrentContractId.GetHashCode();
                if (this.CommercialUserId != null)
                    hash = hash * 59 + this.CommercialUserId.GetHashCode();
                if (this.Model != null)
                    hash = hash * 59 + this.Model.GetHashCode();
                if (this.CurrentContractTerminationDate != null)
                    hash = hash * 59 + this.CurrentContractTerminationDate.GetHashCode();
                if (this.RequestedPaymentMethod != null)
                    hash = hash * 59 + this.RequestedPaymentMethod.GetHashCode();
                if (this.CurrentCustomerPaymentMethod != null)
                    hash = hash * 59 + this.CurrentCustomerPaymentMethod.GetHashCode();
                if (this.ContractType != null)
                    hash = hash * 59 + this.ContractType.GetHashCode();
                if (this.IsModelMustBeTransmittedInNewContract != null)
                    hash = hash * 59 + this.IsModelMustBeTransmittedInNewContract.GetHashCode();
                if (this.FixedAndVariableClickInfo != null)
                    hash = hash * 59 + this.FixedAndVariableClickInfo.GetHashCode();
                if (this.VariableModelInfo != null)
                    hash = hash * 59 + this.VariableModelInfo.GetHashCode();
                if (this.PaymentMethodAuthorized != null)
                    hash = hash * 59 + this.PaymentMethodAuthorized.GetHashCode();
                if (this.CouponOfferCode != null)
                    hash = hash * 59 + this.CouponOfferCode.GetHashCode();
                if (this.CommercialCreatorUserId != null)
                    hash = hash * 59 + this.CommercialCreatorUserId.GetHashCode();
                if (this.MinBillingPeriodInMonths != null)
                    hash = hash * 59 + this.MinBillingPeriodInMonths.GetHashCode();
                if (this.IsCustomerWantsToTerminateHisContract != null)
                    hash = hash * 59 + this.IsCustomerWantsToTerminateHisContract.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
