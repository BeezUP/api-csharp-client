/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describe the discount information related to the offer.
    /// </summary>
    [DataContract]
    public partial class ContractDiscountInfo :  IEquatable<ContractDiscountInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractDiscountInfo" /> class.
        /// </summary>
        /// <param name="AmountCodePromoDiscountPerMonth">The amount discounted per month.</param>
        /// <param name="DiscountDurationInMonth">Duration of the discount in month.</param>
        /// <param name="PercentDiscount">Percentage of the discount.</param>
        /// <param name="PromotionalCodeValidity">PromotionalCodeValidity.</param>
        /// <param name="AmountCodePromoDiscount">The discount amount.</param>
        /// <param name="CouponDiscountCode">The discount code.</param>
        /// <param name="CouponDiscountId">Internal use: The discount id.</param>
        /// <param name="IsCouponDiscountLinkedToCouponOffer">Is this discount is related to a coupon offer.</param>
        /// <param name="CustomerHasActualDiscount">Do you have currently a discount on your contract ?.</param>
        public ContractDiscountInfo(double? AmountCodePromoDiscountPerMonth = default(double?), int? DiscountDurationInMonth = default(int?), double? PercentDiscount = default(double?), PromotionalCodeValidity PromotionalCodeValidity = default(PromotionalCodeValidity), double? AmountCodePromoDiscount = default(double?), string CouponDiscountCode = default(string), int? CouponDiscountId = default(int?), bool? IsCouponDiscountLinkedToCouponOffer = default(bool?), bool? CustomerHasActualDiscount = default(bool?))
        {
            this.AmountCodePromoDiscountPerMonth = AmountCodePromoDiscountPerMonth;
            this.DiscountDurationInMonth = DiscountDurationInMonth;
            this.PercentDiscount = PercentDiscount;
            this.PromotionalCodeValidity = PromotionalCodeValidity;
            this.AmountCodePromoDiscount = AmountCodePromoDiscount;
            this.CouponDiscountCode = CouponDiscountCode;
            this.CouponDiscountId = CouponDiscountId;
            this.IsCouponDiscountLinkedToCouponOffer = IsCouponDiscountLinkedToCouponOffer;
            this.CustomerHasActualDiscount = CustomerHasActualDiscount;
        }
        
        /// <summary>
        /// The amount discounted per month
        /// </summary>
        /// <value>The amount discounted per month</value>
        [DataMember(Name="amountCodePromoDiscountPerMonth", EmitDefaultValue=false)]
        public double? AmountCodePromoDiscountPerMonth { get; set; }
        /// <summary>
        /// Duration of the discount in month
        /// </summary>
        /// <value>Duration of the discount in month</value>
        [DataMember(Name="discountDurationInMonth", EmitDefaultValue=false)]
        public int? DiscountDurationInMonth { get; set; }
        /// <summary>
        /// Percentage of the discount
        /// </summary>
        /// <value>Percentage of the discount</value>
        [DataMember(Name="percentDiscount", EmitDefaultValue=false)]
        public double? PercentDiscount { get; set; }
        /// <summary>
        /// Gets or Sets PromotionalCodeValidity
        /// </summary>
        [DataMember(Name="promotionalCodeValidity", EmitDefaultValue=false)]
        public PromotionalCodeValidity PromotionalCodeValidity { get; set; }
        /// <summary>
        /// The discount amount
        /// </summary>
        /// <value>The discount amount</value>
        [DataMember(Name="amountCodePromoDiscount", EmitDefaultValue=false)]
        public double? AmountCodePromoDiscount { get; set; }
        /// <summary>
        /// The discount code
        /// </summary>
        /// <value>The discount code</value>
        [DataMember(Name="couponDiscountCode", EmitDefaultValue=false)]
        public string CouponDiscountCode { get; set; }
        /// <summary>
        /// Internal use: The discount id
        /// </summary>
        /// <value>Internal use: The discount id</value>
        [DataMember(Name="couponDiscountId", EmitDefaultValue=false)]
        public int? CouponDiscountId { get; set; }
        /// <summary>
        /// Is this discount is related to a coupon offer
        /// </summary>
        /// <value>Is this discount is related to a coupon offer</value>
        [DataMember(Name="isCouponDiscountLinkedToCouponOffer", EmitDefaultValue=false)]
        public bool? IsCouponDiscountLinkedToCouponOffer { get; set; }
        /// <summary>
        /// Do you have currently a discount on your contract ?
        /// </summary>
        /// <value>Do you have currently a discount on your contract ?</value>
        [DataMember(Name="customerHasActualDiscount", EmitDefaultValue=false)]
        public bool? CustomerHasActualDiscount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractDiscountInfo {\n");
            sb.Append("  AmountCodePromoDiscountPerMonth: ").Append(AmountCodePromoDiscountPerMonth).Append("\n");
            sb.Append("  DiscountDurationInMonth: ").Append(DiscountDurationInMonth).Append("\n");
            sb.Append("  PercentDiscount: ").Append(PercentDiscount).Append("\n");
            sb.Append("  PromotionalCodeValidity: ").Append(PromotionalCodeValidity).Append("\n");
            sb.Append("  AmountCodePromoDiscount: ").Append(AmountCodePromoDiscount).Append("\n");
            sb.Append("  CouponDiscountCode: ").Append(CouponDiscountCode).Append("\n");
            sb.Append("  CouponDiscountId: ").Append(CouponDiscountId).Append("\n");
            sb.Append("  IsCouponDiscountLinkedToCouponOffer: ").Append(IsCouponDiscountLinkedToCouponOffer).Append("\n");
            sb.Append("  CustomerHasActualDiscount: ").Append(CustomerHasActualDiscount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContractDiscountInfo);
        }

        /// <summary>
        /// Returns true if ContractDiscountInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ContractDiscountInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractDiscountInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AmountCodePromoDiscountPerMonth == other.AmountCodePromoDiscountPerMonth ||
                    this.AmountCodePromoDiscountPerMonth != null &&
                    this.AmountCodePromoDiscountPerMonth.Equals(other.AmountCodePromoDiscountPerMonth)
                ) && 
                (
                    this.DiscountDurationInMonth == other.DiscountDurationInMonth ||
                    this.DiscountDurationInMonth != null &&
                    this.DiscountDurationInMonth.Equals(other.DiscountDurationInMonth)
                ) && 
                (
                    this.PercentDiscount == other.PercentDiscount ||
                    this.PercentDiscount != null &&
                    this.PercentDiscount.Equals(other.PercentDiscount)
                ) && 
                (
                    this.PromotionalCodeValidity == other.PromotionalCodeValidity ||
                    this.PromotionalCodeValidity != null &&
                    this.PromotionalCodeValidity.Equals(other.PromotionalCodeValidity)
                ) && 
                (
                    this.AmountCodePromoDiscount == other.AmountCodePromoDiscount ||
                    this.AmountCodePromoDiscount != null &&
                    this.AmountCodePromoDiscount.Equals(other.AmountCodePromoDiscount)
                ) && 
                (
                    this.CouponDiscountCode == other.CouponDiscountCode ||
                    this.CouponDiscountCode != null &&
                    this.CouponDiscountCode.Equals(other.CouponDiscountCode)
                ) && 
                (
                    this.CouponDiscountId == other.CouponDiscountId ||
                    this.CouponDiscountId != null &&
                    this.CouponDiscountId.Equals(other.CouponDiscountId)
                ) && 
                (
                    this.IsCouponDiscountLinkedToCouponOffer == other.IsCouponDiscountLinkedToCouponOffer ||
                    this.IsCouponDiscountLinkedToCouponOffer != null &&
                    this.IsCouponDiscountLinkedToCouponOffer.Equals(other.IsCouponDiscountLinkedToCouponOffer)
                ) && 
                (
                    this.CustomerHasActualDiscount == other.CustomerHasActualDiscount ||
                    this.CustomerHasActualDiscount != null &&
                    this.CustomerHasActualDiscount.Equals(other.CustomerHasActualDiscount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AmountCodePromoDiscountPerMonth != null)
                    hash = hash * 59 + this.AmountCodePromoDiscountPerMonth.GetHashCode();
                if (this.DiscountDurationInMonth != null)
                    hash = hash * 59 + this.DiscountDurationInMonth.GetHashCode();
                if (this.PercentDiscount != null)
                    hash = hash * 59 + this.PercentDiscount.GetHashCode();
                if (this.PromotionalCodeValidity != null)
                    hash = hash * 59 + this.PromotionalCodeValidity.GetHashCode();
                if (this.AmountCodePromoDiscount != null)
                    hash = hash * 59 + this.AmountCodePromoDiscount.GetHashCode();
                if (this.CouponDiscountCode != null)
                    hash = hash * 59 + this.CouponDiscountCode.GetHashCode();
                if (this.CouponDiscountId != null)
                    hash = hash * 59 + this.CouponDiscountId.GetHashCode();
                if (this.IsCouponDiscountLinkedToCouponOffer != null)
                    hash = hash * 59 + this.IsCouponDiscountLinkedToCouponOffer.GetHashCode();
                if (this.CustomerHasActualDiscount != null)
                    hash = hash * 59 + this.CustomerHasActualDiscount.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
