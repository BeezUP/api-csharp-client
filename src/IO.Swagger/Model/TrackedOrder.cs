/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrackedOrder
    /// </summary>
    [DataContract]
    public partial class TrackedOrder :  IEquatable<TrackedOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackedOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedOrder" /> class.
        /// </summary>
        /// <param name="UtcDate">The utc date of the order. (required).</param>
        /// <param name="Channel">Channel (required).</param>
        /// <param name="MerchantOrderId">The merchant order identifier (required).</param>
        /// <param name="TotalAmount">The total amount related to the order. (required).</param>
        /// <param name="CurrencyCode">CurrencyCode (required).</param>
        /// <param name="PaymentValidated">Indicate if the payment of this order has been validated or not. (required).</param>
        /// <param name="Products">the product list related to this order. (required).</param>
        public TrackedOrder(DateTime? UtcDate = default(DateTime?), BeezUPCommonChannelBasicInfo Channel = default(BeezUPCommonChannelBasicInfo), string MerchantOrderId = default(string), decimal? TotalAmount = default(decimal?), BeezUPCommonCurrencyCode CurrencyCode = default(BeezUPCommonCurrencyCode), bool? PaymentValidated = default(bool?), List<TrackedOrderProduct> Products = default(List<TrackedOrderProduct>))
        {
            // to ensure "UtcDate" is required (not null)
            if (UtcDate == null)
            {
                throw new InvalidDataException("UtcDate is a required property for TrackedOrder and cannot be null");
            }
            else
            {
                this.UtcDate = UtcDate;
            }
            // to ensure "Channel" is required (not null)
            if (Channel == null)
            {
                throw new InvalidDataException("Channel is a required property for TrackedOrder and cannot be null");
            }
            else
            {
                this.Channel = Channel;
            }
            // to ensure "MerchantOrderId" is required (not null)
            if (MerchantOrderId == null)
            {
                throw new InvalidDataException("MerchantOrderId is a required property for TrackedOrder and cannot be null");
            }
            else
            {
                this.MerchantOrderId = MerchantOrderId;
            }
            // to ensure "TotalAmount" is required (not null)
            if (TotalAmount == null)
            {
                throw new InvalidDataException("TotalAmount is a required property for TrackedOrder and cannot be null");
            }
            else
            {
                this.TotalAmount = TotalAmount;
            }
            // to ensure "CurrencyCode" is required (not null)
            if (CurrencyCode == null)
            {
                throw new InvalidDataException("CurrencyCode is a required property for TrackedOrder and cannot be null");
            }
            else
            {
                this.CurrencyCode = CurrencyCode;
            }
            // to ensure "PaymentValidated" is required (not null)
            if (PaymentValidated == null)
            {
                throw new InvalidDataException("PaymentValidated is a required property for TrackedOrder and cannot be null");
            }
            else
            {
                this.PaymentValidated = PaymentValidated;
            }
            // to ensure "Products" is required (not null)
            if (Products == null)
            {
                throw new InvalidDataException("Products is a required property for TrackedOrder and cannot be null");
            }
            else
            {
                this.Products = Products;
            }
        }
        
        /// <summary>
        /// The utc date of the order.
        /// </summary>
        /// <value>The utc date of the order.</value>
        [DataMember(Name="utcDate", EmitDefaultValue=false)]
        public DateTime? UtcDate { get; set; }
        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public BeezUPCommonChannelBasicInfo Channel { get; set; }
        /// <summary>
        /// The merchant order identifier
        /// </summary>
        /// <value>The merchant order identifier</value>
        [DataMember(Name="merchantOrderId", EmitDefaultValue=false)]
        public string MerchantOrderId { get; set; }
        /// <summary>
        /// The total amount related to the order.
        /// </summary>
        /// <value>The total amount related to the order.</value>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public decimal? TotalAmount { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public BeezUPCommonCurrencyCode CurrencyCode { get; set; }
        /// <summary>
        /// Indicate if the payment of this order has been validated or not.
        /// </summary>
        /// <value>Indicate if the payment of this order has been validated or not.</value>
        [DataMember(Name="paymentValidated", EmitDefaultValue=false)]
        public bool? PaymentValidated { get; set; }
        /// <summary>
        /// the product list related to this order.
        /// </summary>
        /// <value>the product list related to this order.</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<TrackedOrderProduct> Products { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackedOrder {\n");
            sb.Append("  UtcDate: ").Append(UtcDate).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  MerchantOrderId: ").Append(MerchantOrderId).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  PaymentValidated: ").Append(PaymentValidated).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TrackedOrder);
        }

        /// <summary>
        /// Returns true if TrackedOrder instances are equal
        /// </summary>
        /// <param name="other">Instance of TrackedOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackedOrder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UtcDate == other.UtcDate ||
                    this.UtcDate != null &&
                    this.UtcDate.Equals(other.UtcDate)
                ) && 
                (
                    this.Channel == other.Channel ||
                    this.Channel != null &&
                    this.Channel.Equals(other.Channel)
                ) && 
                (
                    this.MerchantOrderId == other.MerchantOrderId ||
                    this.MerchantOrderId != null &&
                    this.MerchantOrderId.Equals(other.MerchantOrderId)
                ) && 
                (
                    this.TotalAmount == other.TotalAmount ||
                    this.TotalAmount != null &&
                    this.TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.PaymentValidated == other.PaymentValidated ||
                    this.PaymentValidated != null &&
                    this.PaymentValidated.Equals(other.PaymentValidated)
                ) && 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UtcDate != null)
                    hash = hash * 59 + this.UtcDate.GetHashCode();
                if (this.Channel != null)
                    hash = hash * 59 + this.Channel.GetHashCode();
                if (this.MerchantOrderId != null)
                    hash = hash * 59 + this.MerchantOrderId.GetHashCode();
                if (this.TotalAmount != null)
                    hash = hash * 59 + this.TotalAmount.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.PaymentValidated != null)
                    hash = hash * 59 + this.PaymentValidated.GetHashCode();
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
