/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describe the prorata info based on your previous invoice
    /// </summary>
    [DataContract]
    public partial class PreviousFixPeriodInvoiceProrataInfo :  IEquatable<PreviousFixPeriodInvoiceProrataInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreviousFixPeriodInvoiceProrataInfo" /> class.
        /// </summary>
        /// <param name="ComputedProrataToBeDeducted">The prorata amount.</param>
        /// <param name="InvoiceNumber">The previous invoice number.</param>
        /// <param name="AmountToBePaid">The amount to be payed of the previous invoice.</param>
        /// <param name="AmountAfterTax">The amout after tax of the previous invoice.</param>
        /// <param name="ContractId">The contract id related to the previous invoice.</param>
        /// <param name="FixedPeriodEndDate">The fixed end period of the previous invoice.</param>
        /// <param name="FixedPeriodStartDate">The fixed start period of the previous invoice.</param>
        public PreviousFixPeriodInvoiceProrataInfo(double? ComputedProrataToBeDeducted = default(double?), string InvoiceNumber = default(string), double? AmountToBePaid = default(double?), double? AmountAfterTax = default(double?), string ContractId = default(string), DateTime? FixedPeriodEndDate = default(DateTime?), DateTime? FixedPeriodStartDate = default(DateTime?))
        {
            this.ComputedProrataToBeDeducted = ComputedProrataToBeDeducted;
            this.InvoiceNumber = InvoiceNumber;
            this.AmountToBePaid = AmountToBePaid;
            this.AmountAfterTax = AmountAfterTax;
            this.ContractId = ContractId;
            this.FixedPeriodEndDate = FixedPeriodEndDate;
            this.FixedPeriodStartDate = FixedPeriodStartDate;
        }
        
        /// <summary>
        /// The prorata amount
        /// </summary>
        /// <value>The prorata amount</value>
        [DataMember(Name="computedProrataToBeDeducted", EmitDefaultValue=false)]
        public double? ComputedProrataToBeDeducted { get; set; }
        /// <summary>
        /// The previous invoice number
        /// </summary>
        /// <value>The previous invoice number</value>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }
        /// <summary>
        /// The amount to be payed of the previous invoice
        /// </summary>
        /// <value>The amount to be payed of the previous invoice</value>
        [DataMember(Name="amountToBePaid", EmitDefaultValue=false)]
        public double? AmountToBePaid { get; set; }
        /// <summary>
        /// The amout after tax of the previous invoice
        /// </summary>
        /// <value>The amout after tax of the previous invoice</value>
        [DataMember(Name="amountAfterTax", EmitDefaultValue=false)]
        public double? AmountAfterTax { get; set; }
        /// <summary>
        /// The contract id related to the previous invoice
        /// </summary>
        /// <value>The contract id related to the previous invoice</value>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public string ContractId { get; set; }
        /// <summary>
        /// The fixed end period of the previous invoice
        /// </summary>
        /// <value>The fixed end period of the previous invoice</value>
        [DataMember(Name="fixedPeriodEndDate", EmitDefaultValue=false)]
        public DateTime? FixedPeriodEndDate { get; set; }
        /// <summary>
        /// The fixed start period of the previous invoice
        /// </summary>
        /// <value>The fixed start period of the previous invoice</value>
        [DataMember(Name="fixedPeriodStartDate", EmitDefaultValue=false)]
        public DateTime? FixedPeriodStartDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreviousFixPeriodInvoiceProrataInfo {\n");
            sb.Append("  ComputedProrataToBeDeducted: ").Append(ComputedProrataToBeDeducted).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  AmountToBePaid: ").Append(AmountToBePaid).Append("\n");
            sb.Append("  AmountAfterTax: ").Append(AmountAfterTax).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  FixedPeriodEndDate: ").Append(FixedPeriodEndDate).Append("\n");
            sb.Append("  FixedPeriodStartDate: ").Append(FixedPeriodStartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PreviousFixPeriodInvoiceProrataInfo);
        }

        /// <summary>
        /// Returns true if PreviousFixPeriodInvoiceProrataInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PreviousFixPeriodInvoiceProrataInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreviousFixPeriodInvoiceProrataInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ComputedProrataToBeDeducted == other.ComputedProrataToBeDeducted ||
                    this.ComputedProrataToBeDeducted != null &&
                    this.ComputedProrataToBeDeducted.Equals(other.ComputedProrataToBeDeducted)
                ) && 
                (
                    this.InvoiceNumber == other.InvoiceNumber ||
                    this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    this.AmountToBePaid == other.AmountToBePaid ||
                    this.AmountToBePaid != null &&
                    this.AmountToBePaid.Equals(other.AmountToBePaid)
                ) && 
                (
                    this.AmountAfterTax == other.AmountAfterTax ||
                    this.AmountAfterTax != null &&
                    this.AmountAfterTax.Equals(other.AmountAfterTax)
                ) && 
                (
                    this.ContractId == other.ContractId ||
                    this.ContractId != null &&
                    this.ContractId.Equals(other.ContractId)
                ) && 
                (
                    this.FixedPeriodEndDate == other.FixedPeriodEndDate ||
                    this.FixedPeriodEndDate != null &&
                    this.FixedPeriodEndDate.Equals(other.FixedPeriodEndDate)
                ) && 
                (
                    this.FixedPeriodStartDate == other.FixedPeriodStartDate ||
                    this.FixedPeriodStartDate != null &&
                    this.FixedPeriodStartDate.Equals(other.FixedPeriodStartDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ComputedProrataToBeDeducted != null)
                    hash = hash * 59 + this.ComputedProrataToBeDeducted.GetHashCode();
                if (this.InvoiceNumber != null)
                    hash = hash * 59 + this.InvoiceNumber.GetHashCode();
                if (this.AmountToBePaid != null)
                    hash = hash * 59 + this.AmountToBePaid.GetHashCode();
                if (this.AmountAfterTax != null)
                    hash = hash * 59 + this.AmountAfterTax.GetHashCode();
                if (this.ContractId != null)
                    hash = hash * 59 + this.ContractId.GetHashCode();
                if (this.FixedPeriodEndDate != null)
                    hash = hash * 59 + this.FixedPeriodEndDate.GetHashCode();
                if (this.FixedPeriodStartDate != null)
                    hash = hash * 59 + this.FixedPeriodStartDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
