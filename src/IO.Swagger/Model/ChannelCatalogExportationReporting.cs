/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChannelCatalogExportationReporting
    /// </summary>
    [DataContract]
    public partial class ChannelCatalogExportationReporting :  IEquatable<ChannelCatalogExportationReporting>, IValidatableObject
    {
        /// <summary>
        /// The cache status during the exportation
        /// </summary>
        /// <value>The cache status during the exportation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CacheStatusEnum
        {
            
            /// <summary>
            /// Enum Error for "Error"
            /// </summary>
            [EnumMember(Value = "Error")]
            Error,
            
            /// <summary>
            /// Enum Available for "Available"
            /// </summary>
            [EnumMember(Value = "Available")]
            Available,
            
            /// <summary>
            /// Enum GeneratedManually for "GeneratedManually"
            /// </summary>
            [EnumMember(Value = "GeneratedManually")]
            GeneratedManually
        }

        /// <summary>
        /// The cache status during the exportation
        /// </summary>
        /// <value>The cache status during the exportation</value>
        [DataMember(Name="cacheStatus", EmitDefaultValue=false)]
        public CacheStatusEnum? CacheStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogExportationReporting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelCatalogExportationReporting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogExportationReporting" /> class.
        /// </summary>
        /// <param name="ExportationUtcDate">The exportation UTC date (required).</param>
        /// <param name="ExportationDuration">The exportation duration. \\ &#39;00:01:00&#39; measn 1 minute. .</param>
        /// <param name="CacheStatus">The cache status during the exportation.</param>
        /// <param name="ExportedProductCount">The exportated product count during this exportation.</param>
        /// <param name="ClientIpAddress">The IP address of the client who requests this exportation (required).</param>
        /// <param name="ClientUserAgent">The http header User-Agent sent by the client who requests this operation (required).</param>
        public ChannelCatalogExportationReporting(DateTime? ExportationUtcDate = default(DateTime?), string ExportationDuration = default(string), CacheStatusEnum? CacheStatus = default(CacheStatusEnum?), int? ExportedProductCount = default(int?), string ClientIpAddress = default(string), string ClientUserAgent = default(string))
        {
            // to ensure "ExportationUtcDate" is required (not null)
            if (ExportationUtcDate == null)
            {
                throw new InvalidDataException("ExportationUtcDate is a required property for ChannelCatalogExportationReporting and cannot be null");
            }
            else
            {
                this.ExportationUtcDate = ExportationUtcDate;
            }
            // to ensure "ClientIpAddress" is required (not null)
            if (ClientIpAddress == null)
            {
                throw new InvalidDataException("ClientIpAddress is a required property for ChannelCatalogExportationReporting and cannot be null");
            }
            else
            {
                this.ClientIpAddress = ClientIpAddress;
            }
            // to ensure "ClientUserAgent" is required (not null)
            if (ClientUserAgent == null)
            {
                throw new InvalidDataException("ClientUserAgent is a required property for ChannelCatalogExportationReporting and cannot be null");
            }
            else
            {
                this.ClientUserAgent = ClientUserAgent;
            }
            this.ExportationDuration = ExportationDuration;
            this.CacheStatus = CacheStatus;
            this.ExportedProductCount = ExportedProductCount;
        }
        
        /// <summary>
        /// The exportation UTC date
        /// </summary>
        /// <value>The exportation UTC date</value>
        [DataMember(Name="exportationUtcDate", EmitDefaultValue=false)]
        public DateTime? ExportationUtcDate { get; set; }
        /// <summary>
        /// The exportation duration. \\ &#39;00:01:00&#39; measn 1 minute. 
        /// </summary>
        /// <value>The exportation duration. \\ &#39;00:01:00&#39; measn 1 minute. </value>
        [DataMember(Name="exportationDuration", EmitDefaultValue=false)]
        public string ExportationDuration { get; set; }
        /// <summary>
        /// The exportated product count during this exportation
        /// </summary>
        /// <value>The exportated product count during this exportation</value>
        [DataMember(Name="exportedProductCount", EmitDefaultValue=false)]
        public int? ExportedProductCount { get; set; }
        /// <summary>
        /// The IP address of the client who requests this exportation
        /// </summary>
        /// <value>The IP address of the client who requests this exportation</value>
        [DataMember(Name="clientIpAddress", EmitDefaultValue=false)]
        public string ClientIpAddress { get; set; }
        /// <summary>
        /// The http header User-Agent sent by the client who requests this operation
        /// </summary>
        /// <value>The http header User-Agent sent by the client who requests this operation</value>
        [DataMember(Name="clientUserAgent", EmitDefaultValue=false)]
        public string ClientUserAgent { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelCatalogExportationReporting {\n");
            sb.Append("  ExportationUtcDate: ").Append(ExportationUtcDate).Append("\n");
            sb.Append("  ExportationDuration: ").Append(ExportationDuration).Append("\n");
            sb.Append("  CacheStatus: ").Append(CacheStatus).Append("\n");
            sb.Append("  ExportedProductCount: ").Append(ExportedProductCount).Append("\n");
            sb.Append("  ClientIpAddress: ").Append(ClientIpAddress).Append("\n");
            sb.Append("  ClientUserAgent: ").Append(ClientUserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelCatalogExportationReporting);
        }

        /// <summary>
        /// Returns true if ChannelCatalogExportationReporting instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelCatalogExportationReporting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelCatalogExportationReporting other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExportationUtcDate == other.ExportationUtcDate ||
                    this.ExportationUtcDate != null &&
                    this.ExportationUtcDate.Equals(other.ExportationUtcDate)
                ) && 
                (
                    this.ExportationDuration == other.ExportationDuration ||
                    this.ExportationDuration != null &&
                    this.ExportationDuration.Equals(other.ExportationDuration)
                ) && 
                (
                    this.CacheStatus == other.CacheStatus ||
                    this.CacheStatus != null &&
                    this.CacheStatus.Equals(other.CacheStatus)
                ) && 
                (
                    this.ExportedProductCount == other.ExportedProductCount ||
                    this.ExportedProductCount != null &&
                    this.ExportedProductCount.Equals(other.ExportedProductCount)
                ) && 
                (
                    this.ClientIpAddress == other.ClientIpAddress ||
                    this.ClientIpAddress != null &&
                    this.ClientIpAddress.Equals(other.ClientIpAddress)
                ) && 
                (
                    this.ClientUserAgent == other.ClientUserAgent ||
                    this.ClientUserAgent != null &&
                    this.ClientUserAgent.Equals(other.ClientUserAgent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExportationUtcDate != null)
                    hash = hash * 59 + this.ExportationUtcDate.GetHashCode();
                if (this.ExportationDuration != null)
                    hash = hash * 59 + this.ExportationDuration.GetHashCode();
                if (this.CacheStatus != null)
                    hash = hash * 59 + this.CacheStatus.GetHashCode();
                if (this.ExportedProductCount != null)
                    hash = hash * 59 + this.ExportedProductCount.GetHashCode();
                if (this.ClientIpAddress != null)
                    hash = hash * 59 + this.ClientIpAddress.GetHashCode();
                if (this.ClientUserAgent != null)
                    hash = hash * 59 + this.ClientUserAgent.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // ExportationDuration (string) pattern
            Regex regexExportationDuration = new Regex(@"(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])", RegexOptions.CultureInvariant);
            if (false == regexExportationDuration.Match(this.ExportationDuration).Success)
            {
                yield return new ValidationResult("Invalid value for ExportationDuration, must match a pattern of /(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])/.", new [] { "ExportationDuration" });
            }

            yield break;
        }
    }

}
