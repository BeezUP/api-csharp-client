/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrackedClick
    /// </summary>
    [DataContract]
    public partial class TrackedClick :  IEquatable<TrackedClick>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedClick" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackedClick() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedClick" /> class.
        /// </summary>
        /// <param name="UtcDate">The utc date of the click (required).</param>
        /// <param name="Product">Product (required).</param>
        /// <param name="IpAddress">The user&#39;s IP address related to this click (required).</param>
        /// <param name="Channel">Channel (required).</param>
        public TrackedClick(DateTime? UtcDate = default(DateTime?), BeezUPCommonProductBasicInfo Product = default(BeezUPCommonProductBasicInfo), string IpAddress = default(string), BeezUPCommonChannelBasicInfo Channel = default(BeezUPCommonChannelBasicInfo))
        {
            // to ensure "UtcDate" is required (not null)
            if (UtcDate == null)
            {
                throw new InvalidDataException("UtcDate is a required property for TrackedClick and cannot be null");
            }
            else
            {
                this.UtcDate = UtcDate;
            }
            // to ensure "Product" is required (not null)
            if (Product == null)
            {
                throw new InvalidDataException("Product is a required property for TrackedClick and cannot be null");
            }
            else
            {
                this.Product = Product;
            }
            // to ensure "IpAddress" is required (not null)
            if (IpAddress == null)
            {
                throw new InvalidDataException("IpAddress is a required property for TrackedClick and cannot be null");
            }
            else
            {
                this.IpAddress = IpAddress;
            }
            // to ensure "Channel" is required (not null)
            if (Channel == null)
            {
                throw new InvalidDataException("Channel is a required property for TrackedClick and cannot be null");
            }
            else
            {
                this.Channel = Channel;
            }
        }
        
        /// <summary>
        /// The utc date of the click
        /// </summary>
        /// <value>The utc date of the click</value>
        [DataMember(Name="utcDate", EmitDefaultValue=false)]
        public DateTime? UtcDate { get; set; }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public BeezUPCommonProductBasicInfo Product { get; set; }
        /// <summary>
        /// The user&#39;s IP address related to this click
        /// </summary>
        /// <value>The user&#39;s IP address related to this click</value>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }
        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public BeezUPCommonChannelBasicInfo Channel { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackedClick {\n");
            sb.Append("  UtcDate: ").Append(UtcDate).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TrackedClick);
        }

        /// <summary>
        /// Returns true if TrackedClick instances are equal
        /// </summary>
        /// <param name="other">Instance of TrackedClick to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackedClick other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UtcDate == other.UtcDate ||
                    this.UtcDate != null &&
                    this.UtcDate.Equals(other.UtcDate)
                ) && 
                (
                    this.Product == other.Product ||
                    this.Product != null &&
                    this.Product.Equals(other.Product)
                ) && 
                (
                    this.IpAddress == other.IpAddress ||
                    this.IpAddress != null &&
                    this.IpAddress.Equals(other.IpAddress)
                ) && 
                (
                    this.Channel == other.Channel ||
                    this.Channel != null &&
                    this.Channel.Equals(other.Channel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UtcDate != null)
                    hash = hash * 59 + this.UtcDate.GetHashCode();
                if (this.Product != null)
                    hash = hash * 59 + this.Product.GetHashCode();
                if (this.IpAddress != null)
                    hash = hash * 59 + this.IpAddress.GetHashCode();
                if (this.Channel != null)
                    hash = hash * 59 + this.Channel.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
