/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportByChannel
    /// </summary>
    [DataContract]
    public partial class ReportByChannel :  IEquatable<ReportByChannel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportByChannel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportByChannel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportByChannel" /> class.
        /// </summary>
        /// <param name="Channel">Channel (required).</param>
        /// <param name="EnabledProductCount">The enabled product count for this channel (required).</param>
        /// <param name="CatalogProductCount">The catalog product count for this channel (required).</param>
        /// <param name="ClickCount">The click count for this channel (required).</param>
        /// <param name="Cost">The cost for this channel (required).</param>
        /// <param name="OrderCount">The order count for this channel (required).</param>
        /// <param name="TurnOver">The Turnover for this channel (required).</param>
        /// <param name="Margin">The margin for this channel (required).</param>
        /// <param name="PerformanceIndicator">The performance indicator based on the performance indicator formula indicated in the request for this channel (required).</param>
        /// <param name="Links">Links.</param>
        public ReportByChannel(BeezUPCommonChannelBasicInfo Channel = default(BeezUPCommonChannelBasicInfo), int? EnabledProductCount = default(int?), int? CatalogProductCount = default(int?), int? ClickCount = default(int?), decimal? Cost = default(decimal?), int? OrderCount = default(int?), decimal? TurnOver = default(decimal?), decimal? Margin = default(decimal?), decimal? PerformanceIndicator = default(decimal?), ReportByChannelLinks Links = default(ReportByChannelLinks))
        {
            // to ensure "Channel" is required (not null)
            if (Channel == null)
            {
                throw new InvalidDataException("Channel is a required property for ReportByChannel and cannot be null");
            }
            else
            {
                this.Channel = Channel;
            }
            // to ensure "EnabledProductCount" is required (not null)
            if (EnabledProductCount == null)
            {
                throw new InvalidDataException("EnabledProductCount is a required property for ReportByChannel and cannot be null");
            }
            else
            {
                this.EnabledProductCount = EnabledProductCount;
            }
            // to ensure "CatalogProductCount" is required (not null)
            if (CatalogProductCount == null)
            {
                throw new InvalidDataException("CatalogProductCount is a required property for ReportByChannel and cannot be null");
            }
            else
            {
                this.CatalogProductCount = CatalogProductCount;
            }
            // to ensure "ClickCount" is required (not null)
            if (ClickCount == null)
            {
                throw new InvalidDataException("ClickCount is a required property for ReportByChannel and cannot be null");
            }
            else
            {
                this.ClickCount = ClickCount;
            }
            // to ensure "Cost" is required (not null)
            if (Cost == null)
            {
                throw new InvalidDataException("Cost is a required property for ReportByChannel and cannot be null");
            }
            else
            {
                this.Cost = Cost;
            }
            // to ensure "OrderCount" is required (not null)
            if (OrderCount == null)
            {
                throw new InvalidDataException("OrderCount is a required property for ReportByChannel and cannot be null");
            }
            else
            {
                this.OrderCount = OrderCount;
            }
            // to ensure "TurnOver" is required (not null)
            if (TurnOver == null)
            {
                throw new InvalidDataException("TurnOver is a required property for ReportByChannel and cannot be null");
            }
            else
            {
                this.TurnOver = TurnOver;
            }
            // to ensure "Margin" is required (not null)
            if (Margin == null)
            {
                throw new InvalidDataException("Margin is a required property for ReportByChannel and cannot be null");
            }
            else
            {
                this.Margin = Margin;
            }
            // to ensure "PerformanceIndicator" is required (not null)
            if (PerformanceIndicator == null)
            {
                throw new InvalidDataException("PerformanceIndicator is a required property for ReportByChannel and cannot be null");
            }
            else
            {
                this.PerformanceIndicator = PerformanceIndicator;
            }
            this.Links = Links;
        }
        
        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public BeezUPCommonChannelBasicInfo Channel { get; set; }
        /// <summary>
        /// The enabled product count for this channel
        /// </summary>
        /// <value>The enabled product count for this channel</value>
        [DataMember(Name="enabledProductCount", EmitDefaultValue=false)]
        public int? EnabledProductCount { get; set; }
        /// <summary>
        /// The catalog product count for this channel
        /// </summary>
        /// <value>The catalog product count for this channel</value>
        [DataMember(Name="catalogProductCount", EmitDefaultValue=false)]
        public int? CatalogProductCount { get; set; }
        /// <summary>
        /// The click count for this channel
        /// </summary>
        /// <value>The click count for this channel</value>
        [DataMember(Name="clickCount", EmitDefaultValue=false)]
        public int? ClickCount { get; set; }
        /// <summary>
        /// The cost for this channel
        /// </summary>
        /// <value>The cost for this channel</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public decimal? Cost { get; set; }
        /// <summary>
        /// The order count for this channel
        /// </summary>
        /// <value>The order count for this channel</value>
        [DataMember(Name="orderCount", EmitDefaultValue=false)]
        public int? OrderCount { get; set; }
        /// <summary>
        /// The Turnover for this channel
        /// </summary>
        /// <value>The Turnover for this channel</value>
        [DataMember(Name="turnOver", EmitDefaultValue=false)]
        public decimal? TurnOver { get; set; }
        /// <summary>
        /// The margin for this channel
        /// </summary>
        /// <value>The margin for this channel</value>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public decimal? Margin { get; set; }
        /// <summary>
        /// The performance indicator based on the performance indicator formula indicated in the request for this channel
        /// </summary>
        /// <value>The performance indicator based on the performance indicator formula indicated in the request for this channel</value>
        [DataMember(Name="performanceIndicator", EmitDefaultValue=false)]
        public decimal? PerformanceIndicator { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public ReportByChannelLinks Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportByChannel {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  EnabledProductCount: ").Append(EnabledProductCount).Append("\n");
            sb.Append("  CatalogProductCount: ").Append(CatalogProductCount).Append("\n");
            sb.Append("  ClickCount: ").Append(ClickCount).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  OrderCount: ").Append(OrderCount).Append("\n");
            sb.Append("  TurnOver: ").Append(TurnOver).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  PerformanceIndicator: ").Append(PerformanceIndicator).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportByChannel);
        }

        /// <summary>
        /// Returns true if ReportByChannel instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportByChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportByChannel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Channel == other.Channel ||
                    this.Channel != null &&
                    this.Channel.Equals(other.Channel)
                ) && 
                (
                    this.EnabledProductCount == other.EnabledProductCount ||
                    this.EnabledProductCount != null &&
                    this.EnabledProductCount.Equals(other.EnabledProductCount)
                ) && 
                (
                    this.CatalogProductCount == other.CatalogProductCount ||
                    this.CatalogProductCount != null &&
                    this.CatalogProductCount.Equals(other.CatalogProductCount)
                ) && 
                (
                    this.ClickCount == other.ClickCount ||
                    this.ClickCount != null &&
                    this.ClickCount.Equals(other.ClickCount)
                ) && 
                (
                    this.Cost == other.Cost ||
                    this.Cost != null &&
                    this.Cost.Equals(other.Cost)
                ) && 
                (
                    this.OrderCount == other.OrderCount ||
                    this.OrderCount != null &&
                    this.OrderCount.Equals(other.OrderCount)
                ) && 
                (
                    this.TurnOver == other.TurnOver ||
                    this.TurnOver != null &&
                    this.TurnOver.Equals(other.TurnOver)
                ) && 
                (
                    this.Margin == other.Margin ||
                    this.Margin != null &&
                    this.Margin.Equals(other.Margin)
                ) && 
                (
                    this.PerformanceIndicator == other.PerformanceIndicator ||
                    this.PerformanceIndicator != null &&
                    this.PerformanceIndicator.Equals(other.PerformanceIndicator)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Channel != null)
                    hash = hash * 59 + this.Channel.GetHashCode();
                if (this.EnabledProductCount != null)
                    hash = hash * 59 + this.EnabledProductCount.GetHashCode();
                if (this.CatalogProductCount != null)
                    hash = hash * 59 + this.CatalogProductCount.GetHashCode();
                if (this.ClickCount != null)
                    hash = hash * 59 + this.ClickCount.GetHashCode();
                if (this.Cost != null)
                    hash = hash * 59 + this.Cost.GetHashCode();
                if (this.OrderCount != null)
                    hash = hash * 59 + this.OrderCount.GetHashCode();
                if (this.TurnOver != null)
                    hash = hash * 59 + this.TurnOver.GetHashCode();
                if (this.Margin != null)
                    hash = hash * 59 + this.Margin.GetHashCode();
                if (this.PerformanceIndicator != null)
                    hash = hash * 59 + this.PerformanceIndicator.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
