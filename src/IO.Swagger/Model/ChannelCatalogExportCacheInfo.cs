/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChannelCatalogExportCacheInfo
    /// </summary>
    [DataContract]
    public partial class ChannelCatalogExportCacheInfo :  IEquatable<ChannelCatalogExportCacheInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogExportCacheInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelCatalogExportCacheInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogExportCacheInfo" /> class.
        /// </summary>
        /// <param name="CacheStatus">The cache status (required).</param>
        /// <param name="LastUpdateUtcDate">The last update UTC date of the cache.</param>
        /// <param name="LastContentChangeUtcDate">The last content change UTC date.</param>
        /// <param name="ExpirationUtcDate">The expiration UTC date of the cache.</param>
        /// <param name="FeedUrl">The feed url.</param>
        public ChannelCatalogExportCacheInfo(string CacheStatus = default(string), DateTime? LastUpdateUtcDate = default(DateTime?), DateTime? LastContentChangeUtcDate = default(DateTime?), DateTime? ExpirationUtcDate = default(DateTime?), string FeedUrl = default(string))
        {
            // to ensure "CacheStatus" is required (not null)
            if (CacheStatus == null)
            {
                throw new InvalidDataException("CacheStatus is a required property for ChannelCatalogExportCacheInfo and cannot be null");
            }
            else
            {
                this.CacheStatus = CacheStatus;
            }
            this.LastUpdateUtcDate = LastUpdateUtcDate;
            this.LastContentChangeUtcDate = LastContentChangeUtcDate;
            this.ExpirationUtcDate = ExpirationUtcDate;
            this.FeedUrl = FeedUrl;
        }
        
        /// <summary>
        /// The cache status
        /// </summary>
        /// <value>The cache status</value>
        [DataMember(Name="cacheStatus", EmitDefaultValue=false)]
        public string CacheStatus { get; set; }
        /// <summary>
        /// The last update UTC date of the cache
        /// </summary>
        /// <value>The last update UTC date of the cache</value>
        [DataMember(Name="lastUpdateUtcDate", EmitDefaultValue=false)]
        public DateTime? LastUpdateUtcDate { get; set; }
        /// <summary>
        /// The last content change UTC date
        /// </summary>
        /// <value>The last content change UTC date</value>
        [DataMember(Name="lastContentChangeUtcDate", EmitDefaultValue=false)]
        public DateTime? LastContentChangeUtcDate { get; set; }
        /// <summary>
        /// The expiration UTC date of the cache
        /// </summary>
        /// <value>The expiration UTC date of the cache</value>
        [DataMember(Name="expirationUtcDate", EmitDefaultValue=false)]
        public DateTime? ExpirationUtcDate { get; set; }
        /// <summary>
        /// The feed url
        /// </summary>
        /// <value>The feed url</value>
        [DataMember(Name="feedUrl", EmitDefaultValue=false)]
        public string FeedUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelCatalogExportCacheInfo {\n");
            sb.Append("  CacheStatus: ").Append(CacheStatus).Append("\n");
            sb.Append("  LastUpdateUtcDate: ").Append(LastUpdateUtcDate).Append("\n");
            sb.Append("  LastContentChangeUtcDate: ").Append(LastContentChangeUtcDate).Append("\n");
            sb.Append("  ExpirationUtcDate: ").Append(ExpirationUtcDate).Append("\n");
            sb.Append("  FeedUrl: ").Append(FeedUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelCatalogExportCacheInfo);
        }

        /// <summary>
        /// Returns true if ChannelCatalogExportCacheInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelCatalogExportCacheInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelCatalogExportCacheInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CacheStatus == other.CacheStatus ||
                    this.CacheStatus != null &&
                    this.CacheStatus.Equals(other.CacheStatus)
                ) && 
                (
                    this.LastUpdateUtcDate == other.LastUpdateUtcDate ||
                    this.LastUpdateUtcDate != null &&
                    this.LastUpdateUtcDate.Equals(other.LastUpdateUtcDate)
                ) && 
                (
                    this.LastContentChangeUtcDate == other.LastContentChangeUtcDate ||
                    this.LastContentChangeUtcDate != null &&
                    this.LastContentChangeUtcDate.Equals(other.LastContentChangeUtcDate)
                ) && 
                (
                    this.ExpirationUtcDate == other.ExpirationUtcDate ||
                    this.ExpirationUtcDate != null &&
                    this.ExpirationUtcDate.Equals(other.ExpirationUtcDate)
                ) && 
                (
                    this.FeedUrl == other.FeedUrl ||
                    this.FeedUrl != null &&
                    this.FeedUrl.Equals(other.FeedUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CacheStatus != null)
                    hash = hash * 59 + this.CacheStatus.GetHashCode();
                if (this.LastUpdateUtcDate != null)
                    hash = hash * 59 + this.LastUpdateUtcDate.GetHashCode();
                if (this.LastContentChangeUtcDate != null)
                    hash = hash * 59 + this.LastContentChangeUtcDate.GetHashCode();
                if (this.ExpirationUtcDate != null)
                    hash = hash * 59 + this.ExpirationUtcDate.GetHashCode();
                if (this.FeedUrl != null)
                    hash = hash * 59 + this.FeedUrl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
