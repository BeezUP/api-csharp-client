/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Channel Catalog Status
    /// </summary>
    [DataContract]
    public partial class ChannelCatalogStatus :  IEquatable<ChannelCatalogStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelCatalogStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogStatus" /> class.
        /// </summary>
        /// <param name="ExportedProductCount">ExportedProductCount (required).</param>
        /// <param name="ColumnMappingStatus">ColumnMappingStatus (required).</param>
        /// <param name="CategoryMappingStatus">CategoryMappingStatus (required).</param>
        /// <param name="ApiSettingStatus">ApiSettingStatus (required).</param>
        public ChannelCatalogStatus(int? ExportedProductCount = default(int?), ColumnMappingStatus ColumnMappingStatus = default(ColumnMappingStatus), CategoryMappingStatus CategoryMappingStatus = default(CategoryMappingStatus), ApiSettingStatus ApiSettingStatus = default(ApiSettingStatus))
        {
            // to ensure "ExportedProductCount" is required (not null)
            if (ExportedProductCount == null)
            {
                throw new InvalidDataException("ExportedProductCount is a required property for ChannelCatalogStatus and cannot be null");
            }
            else
            {
                this.ExportedProductCount = ExportedProductCount;
            }
            // to ensure "ColumnMappingStatus" is required (not null)
            if (ColumnMappingStatus == null)
            {
                throw new InvalidDataException("ColumnMappingStatus is a required property for ChannelCatalogStatus and cannot be null");
            }
            else
            {
                this.ColumnMappingStatus = ColumnMappingStatus;
            }
            // to ensure "CategoryMappingStatus" is required (not null)
            if (CategoryMappingStatus == null)
            {
                throw new InvalidDataException("CategoryMappingStatus is a required property for ChannelCatalogStatus and cannot be null");
            }
            else
            {
                this.CategoryMappingStatus = CategoryMappingStatus;
            }
            // to ensure "ApiSettingStatus" is required (not null)
            if (ApiSettingStatus == null)
            {
                throw new InvalidDataException("ApiSettingStatus is a required property for ChannelCatalogStatus and cannot be null");
            }
            else
            {
                this.ApiSettingStatus = ApiSettingStatus;
            }
        }
        
        /// <summary>
        /// Gets or Sets ExportedProductCount
        /// </summary>
        [DataMember(Name="exportedProductCount", EmitDefaultValue=false)]
        public int? ExportedProductCount { get; set; }
        /// <summary>
        /// Gets or Sets ColumnMappingStatus
        /// </summary>
        [DataMember(Name="columnMappingStatus", EmitDefaultValue=false)]
        public ColumnMappingStatus ColumnMappingStatus { get; set; }
        /// <summary>
        /// Gets or Sets CategoryMappingStatus
        /// </summary>
        [DataMember(Name="categoryMappingStatus", EmitDefaultValue=false)]
        public CategoryMappingStatus CategoryMappingStatus { get; set; }
        /// <summary>
        /// Gets or Sets ApiSettingStatus
        /// </summary>
        [DataMember(Name="apiSettingStatus", EmitDefaultValue=false)]
        public ApiSettingStatus ApiSettingStatus { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelCatalogStatus {\n");
            sb.Append("  ExportedProductCount: ").Append(ExportedProductCount).Append("\n");
            sb.Append("  ColumnMappingStatus: ").Append(ColumnMappingStatus).Append("\n");
            sb.Append("  CategoryMappingStatus: ").Append(CategoryMappingStatus).Append("\n");
            sb.Append("  ApiSettingStatus: ").Append(ApiSettingStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelCatalogStatus);
        }

        /// <summary>
        /// Returns true if ChannelCatalogStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelCatalogStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelCatalogStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExportedProductCount == other.ExportedProductCount ||
                    this.ExportedProductCount != null &&
                    this.ExportedProductCount.Equals(other.ExportedProductCount)
                ) && 
                (
                    this.ColumnMappingStatus == other.ColumnMappingStatus ||
                    this.ColumnMappingStatus != null &&
                    this.ColumnMappingStatus.Equals(other.ColumnMappingStatus)
                ) && 
                (
                    this.CategoryMappingStatus == other.CategoryMappingStatus ||
                    this.CategoryMappingStatus != null &&
                    this.CategoryMappingStatus.Equals(other.CategoryMappingStatus)
                ) && 
                (
                    this.ApiSettingStatus == other.ApiSettingStatus ||
                    this.ApiSettingStatus != null &&
                    this.ApiSettingStatus.Equals(other.ApiSettingStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExportedProductCount != null)
                    hash = hash * 59 + this.ExportedProductCount.GetHashCode();
                if (this.ColumnMappingStatus != null)
                    hash = hash * 59 + this.ColumnMappingStatus.GetHashCode();
                if (this.CategoryMappingStatus != null)
                    hash = hash * 59 + this.CategoryMappingStatus.GetHashCode();
                if (this.ApiSettingStatus != null)
                    hash = hash * 59 + this.ApiSettingStatus.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
