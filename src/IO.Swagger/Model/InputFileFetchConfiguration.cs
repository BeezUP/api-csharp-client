/* 
 * BeezUP API
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describe the way to download the file
    /// </summary>
    [DataContract]
    public partial class InputFileFetchConfiguration :  IEquatable<InputFileFetchConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFileFetchConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputFileFetchConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFileFetchConfiguration" /> class.
        /// </summary>
        /// <param name="Uri">Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed) (required).</param>
        /// <param name="Credential">Credential.</param>
        /// <param name="DownloadCatalogStrategy">DownloadCatalogStrategy (required).</param>
        /// <param name="CompressionFormatStrategy">CompressionFormatStrategy.</param>
        /// <param name="CompressedRelativePath">Indicate the relative path in the compressed file.</param>
        /// <param name="DownloadTimeout">Indicate the download time out in second (default to 30).</param>
        public InputFileFetchConfiguration(string Uri = default(string), Credential Credential = default(Credential), DownloadCatalogStrategy DownloadCatalogStrategy = default(DownloadCatalogStrategy), CompressionFormatStrategy CompressionFormatStrategy = default(CompressionFormatStrategy), string CompressedRelativePath = default(string), int? DownloadTimeout = 30)
        {
            // to ensure "Uri" is required (not null)
            if (Uri == null)
            {
                throw new InvalidDataException("Uri is a required property for InputFileFetchConfiguration and cannot be null");
            }
            else
            {
                this.Uri = Uri;
            }
            // to ensure "DownloadCatalogStrategy" is required (not null)
            if (DownloadCatalogStrategy == null)
            {
                throw new InvalidDataException("DownloadCatalogStrategy is a required property for InputFileFetchConfiguration and cannot be null");
            }
            else
            {
                this.DownloadCatalogStrategy = DownloadCatalogStrategy;
            }
            this.Credential = Credential;
            this.CompressionFormatStrategy = CompressionFormatStrategy;
            this.CompressedRelativePath = CompressedRelativePath;
            // use default value if no "DownloadTimeout" provided
            if (DownloadTimeout == null)
            {
                this.DownloadTimeout = 30;
            }
            else
            {
                this.DownloadTimeout = DownloadTimeout;
            }
        }
        
        /// <summary>
        /// Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)
        /// </summary>
        /// <value>Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }
        /// <summary>
        /// Gets or Sets Credential
        /// </summary>
        [DataMember(Name="credential", EmitDefaultValue=false)]
        public Credential Credential { get; set; }
        /// <summary>
        /// Gets or Sets DownloadCatalogStrategy
        /// </summary>
        [DataMember(Name="downloadCatalogStrategy", EmitDefaultValue=false)]
        public DownloadCatalogStrategy DownloadCatalogStrategy { get; set; }
        /// <summary>
        /// Gets or Sets CompressionFormatStrategy
        /// </summary>
        [DataMember(Name="compressionFormatStrategy", EmitDefaultValue=false)]
        public CompressionFormatStrategy CompressionFormatStrategy { get; set; }
        /// <summary>
        /// Indicate the relative path in the compressed file
        /// </summary>
        /// <value>Indicate the relative path in the compressed file</value>
        [DataMember(Name="compressedRelativePath", EmitDefaultValue=false)]
        public string CompressedRelativePath { get; set; }
        /// <summary>
        /// Indicate the download time out in second
        /// </summary>
        /// <value>Indicate the download time out in second</value>
        [DataMember(Name="downloadTimeout", EmitDefaultValue=false)]
        public int? DownloadTimeout { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputFileFetchConfiguration {\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Credential: ").Append(Credential).Append("\n");
            sb.Append("  DownloadCatalogStrategy: ").Append(DownloadCatalogStrategy).Append("\n");
            sb.Append("  CompressionFormatStrategy: ").Append(CompressionFormatStrategy).Append("\n");
            sb.Append("  CompressedRelativePath: ").Append(CompressedRelativePath).Append("\n");
            sb.Append("  DownloadTimeout: ").Append(DownloadTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InputFileFetchConfiguration);
        }

        /// <summary>
        /// Returns true if InputFileFetchConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of InputFileFetchConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputFileFetchConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                ) && 
                (
                    this.Credential == other.Credential ||
                    this.Credential != null &&
                    this.Credential.Equals(other.Credential)
                ) && 
                (
                    this.DownloadCatalogStrategy == other.DownloadCatalogStrategy ||
                    this.DownloadCatalogStrategy != null &&
                    this.DownloadCatalogStrategy.Equals(other.DownloadCatalogStrategy)
                ) && 
                (
                    this.CompressionFormatStrategy == other.CompressionFormatStrategy ||
                    this.CompressionFormatStrategy != null &&
                    this.CompressionFormatStrategy.Equals(other.CompressionFormatStrategy)
                ) && 
                (
                    this.CompressedRelativePath == other.CompressedRelativePath ||
                    this.CompressedRelativePath != null &&
                    this.CompressedRelativePath.Equals(other.CompressedRelativePath)
                ) && 
                (
                    this.DownloadTimeout == other.DownloadTimeout ||
                    this.DownloadTimeout != null &&
                    this.DownloadTimeout.Equals(other.DownloadTimeout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                if (this.Credential != null)
                    hash = hash * 59 + this.Credential.GetHashCode();
                if (this.DownloadCatalogStrategy != null)
                    hash = hash * 59 + this.DownloadCatalogStrategy.GetHashCode();
                if (this.CompressionFormatStrategy != null)
                    hash = hash * 59 + this.CompressionFormatStrategy.GetHashCode();
                if (this.CompressedRelativePath != null)
                    hash = hash * 59 + this.CompressedRelativePath.GetHashCode();
                if (this.DownloadTimeout != null)
                    hash = hash * 59 + this.DownloadTimeout.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
