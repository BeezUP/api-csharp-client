/* 
 * BeezUP API
 *
 * # The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **_/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **_/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserFriendInfo
    /// </summary>
    [DataContract]
    public partial class UserFriendInfo :  IEquatable<UserFriendInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserFriendInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserFriendInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserFriendInfo" /> class.
        /// </summary>
        /// <param name="UserId">Your friend&#39;s user id (required).</param>
        /// <param name="LastName">Your friend&#39;s user last name (required).</param>
        /// <param name="FirstName">Your friend&#39;s user first name (required).</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="ProfilePictureUrl">ProfilePictureUrl.</param>
        /// <param name="CountryIsoCodeAlpha3">CountryIsoCodeAlpha3 (required).</param>
        /// <param name="Company">Your friend&#39;s user company name (required).</param>
        /// <param name="WhatIDo">Your friend&#39;s user occupation in his company (required).</param>
        public UserFriendInfo(string UserId = default(string), string LastName = default(string), string FirstName = default(string), FriendEmail Email = default(FriendEmail), FriendProfilePictureUrl ProfilePictureUrl = default(FriendProfilePictureUrl), FriendCountryIsoCodeAlpha3 CountryIsoCodeAlpha3 = default(FriendCountryIsoCodeAlpha3), string Company = default(string), string WhatIDo = default(string))
        {
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for UserFriendInfo and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for UserFriendInfo and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for UserFriendInfo and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for UserFriendInfo and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "CountryIsoCodeAlpha3" is required (not null)
            if (CountryIsoCodeAlpha3 == null)
            {
                throw new InvalidDataException("CountryIsoCodeAlpha3 is a required property for UserFriendInfo and cannot be null");
            }
            else
            {
                this.CountryIsoCodeAlpha3 = CountryIsoCodeAlpha3;
            }
            // to ensure "Company" is required (not null)
            if (Company == null)
            {
                throw new InvalidDataException("Company is a required property for UserFriendInfo and cannot be null");
            }
            else
            {
                this.Company = Company;
            }
            // to ensure "WhatIDo" is required (not null)
            if (WhatIDo == null)
            {
                throw new InvalidDataException("WhatIDo is a required property for UserFriendInfo and cannot be null");
            }
            else
            {
                this.WhatIDo = WhatIDo;
            }
            this.ProfilePictureUrl = ProfilePictureUrl;
        }
        
        /// <summary>
        /// Your friend&#39;s user id
        /// </summary>
        /// <value>Your friend&#39;s user id</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }
        /// <summary>
        /// Your friend&#39;s user last name
        /// </summary>
        /// <value>Your friend&#39;s user last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Your friend&#39;s user first name
        /// </summary>
        /// <value>Your friend&#39;s user first name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public FriendEmail Email { get; set; }
        /// <summary>
        /// Gets or Sets ProfilePictureUrl
        /// </summary>
        [DataMember(Name="profilePictureUrl", EmitDefaultValue=false)]
        public FriendProfilePictureUrl ProfilePictureUrl { get; set; }
        /// <summary>
        /// Gets or Sets CountryIsoCodeAlpha3
        /// </summary>
        [DataMember(Name="countryIsoCodeAlpha3", EmitDefaultValue=false)]
        public FriendCountryIsoCodeAlpha3 CountryIsoCodeAlpha3 { get; set; }
        /// <summary>
        /// Your friend&#39;s user company name
        /// </summary>
        /// <value>Your friend&#39;s user company name</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// Your friend&#39;s user occupation in his company
        /// </summary>
        /// <value>Your friend&#39;s user occupation in his company</value>
        [DataMember(Name="whatIDo", EmitDefaultValue=false)]
        public string WhatIDo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserFriendInfo {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ProfilePictureUrl: ").Append(ProfilePictureUrl).Append("\n");
            sb.Append("  CountryIsoCodeAlpha3: ").Append(CountryIsoCodeAlpha3).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  WhatIDo: ").Append(WhatIDo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserFriendInfo);
        }

        /// <summary>
        /// Returns true if UserFriendInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of UserFriendInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserFriendInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.ProfilePictureUrl == other.ProfilePictureUrl ||
                    this.ProfilePictureUrl != null &&
                    this.ProfilePictureUrl.Equals(other.ProfilePictureUrl)
                ) && 
                (
                    this.CountryIsoCodeAlpha3 == other.CountryIsoCodeAlpha3 ||
                    this.CountryIsoCodeAlpha3 != null &&
                    this.CountryIsoCodeAlpha3.Equals(other.CountryIsoCodeAlpha3)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.WhatIDo == other.WhatIDo ||
                    this.WhatIDo != null &&
                    this.WhatIDo.Equals(other.WhatIDo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.ProfilePictureUrl != null)
                    hash = hash * 59 + this.ProfilePictureUrl.GetHashCode();
                if (this.CountryIsoCodeAlpha3 != null)
                    hash = hash * 59 + this.CountryIsoCodeAlpha3.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.WhatIDo != null)
                    hash = hash * 59 + this.WhatIDo.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
