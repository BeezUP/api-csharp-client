/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Links to retrieve/action on other entities
    /// </summary>
    [DataContract]
    public partial class RuleLinks :  IEquatable<RuleLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleLinks" /> class.
        /// </summary>
        /// <param name="Self">Self.</param>
        /// <param name="Run">Run.</param>
        /// <param name="Delete">Delete.</param>
        /// <param name="Moveup">Moveup.</param>
        /// <param name="Movedown">Movedown.</param>
        /// <param name="Enable">Enable.</param>
        /// <param name="Disable">Disable.</param>
        /// <param name="Update">Update.</param>
        /// <param name="ReportFilter">ReportFilter.</param>
        public RuleLinks(DefinitionslinksGetRuleLink Self = default(DefinitionslinksGetRuleLink), DefinitionslinksRunRuleLink Run = default(DefinitionslinksRunRuleLink), DefinitionslinksDeleteRuleLink Delete = default(DefinitionslinksDeleteRuleLink), DefinitionslinksMoveUpRuleLink Moveup = default(DefinitionslinksMoveUpRuleLink), DefinitionslinksMoveDownRuleLink Movedown = default(DefinitionslinksMoveDownRuleLink), DefinitionslinksEnableRuleLink Enable = default(DefinitionslinksEnableRuleLink), DefinitionslinksDisableRuleLink Disable = default(DefinitionslinksDisableRuleLink), DefinitionslinksUpdateRuleLink Update = default(DefinitionslinksUpdateRuleLink), DefinitionslinksGetReportFilterLink ReportFilter = default(DefinitionslinksGetReportFilterLink))
        {
            this.Self = Self;
            this.Run = Run;
            this.Delete = Delete;
            this.Moveup = Moveup;
            this.Movedown = Movedown;
            this.Enable = Enable;
            this.Disable = Disable;
            this.Update = Update;
            this.ReportFilter = ReportFilter;
        }
        
        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public DefinitionslinksGetRuleLink Self { get; set; }
        /// <summary>
        /// Gets or Sets Run
        /// </summary>
        [DataMember(Name="run", EmitDefaultValue=false)]
        public DefinitionslinksRunRuleLink Run { get; set; }
        /// <summary>
        /// Gets or Sets Delete
        /// </summary>
        [DataMember(Name="delete", EmitDefaultValue=false)]
        public DefinitionslinksDeleteRuleLink Delete { get; set; }
        /// <summary>
        /// Gets or Sets Moveup
        /// </summary>
        [DataMember(Name="moveup", EmitDefaultValue=false)]
        public DefinitionslinksMoveUpRuleLink Moveup { get; set; }
        /// <summary>
        /// Gets or Sets Movedown
        /// </summary>
        [DataMember(Name="movedown", EmitDefaultValue=false)]
        public DefinitionslinksMoveDownRuleLink Movedown { get; set; }
        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name="enable", EmitDefaultValue=false)]
        public DefinitionslinksEnableRuleLink Enable { get; set; }
        /// <summary>
        /// Gets or Sets Disable
        /// </summary>
        [DataMember(Name="disable", EmitDefaultValue=false)]
        public DefinitionslinksDisableRuleLink Disable { get; set; }
        /// <summary>
        /// Gets or Sets Update
        /// </summary>
        [DataMember(Name="update", EmitDefaultValue=false)]
        public DefinitionslinksUpdateRuleLink Update { get; set; }
        /// <summary>
        /// Gets or Sets ReportFilter
        /// </summary>
        [DataMember(Name="reportFilter", EmitDefaultValue=false)]
        public DefinitionslinksGetReportFilterLink ReportFilter { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Run: ").Append(Run).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  Moveup: ").Append(Moveup).Append("\n");
            sb.Append("  Movedown: ").Append(Movedown).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Disable: ").Append(Disable).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("  ReportFilter: ").Append(ReportFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RuleLinks);
        }

        /// <summary>
        /// Returns true if RuleLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of RuleLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleLinks other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Self == other.Self ||
                    this.Self != null &&
                    this.Self.Equals(other.Self)
                ) && 
                (
                    this.Run == other.Run ||
                    this.Run != null &&
                    this.Run.Equals(other.Run)
                ) && 
                (
                    this.Delete == other.Delete ||
                    this.Delete != null &&
                    this.Delete.Equals(other.Delete)
                ) && 
                (
                    this.Moveup == other.Moveup ||
                    this.Moveup != null &&
                    this.Moveup.Equals(other.Moveup)
                ) && 
                (
                    this.Movedown == other.Movedown ||
                    this.Movedown != null &&
                    this.Movedown.Equals(other.Movedown)
                ) && 
                (
                    this.Enable == other.Enable ||
                    this.Enable != null &&
                    this.Enable.Equals(other.Enable)
                ) && 
                (
                    this.Disable == other.Disable ||
                    this.Disable != null &&
                    this.Disable.Equals(other.Disable)
                ) && 
                (
                    this.Update == other.Update ||
                    this.Update != null &&
                    this.Update.Equals(other.Update)
                ) && 
                (
                    this.ReportFilter == other.ReportFilter ||
                    this.ReportFilter != null &&
                    this.ReportFilter.Equals(other.ReportFilter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Self != null)
                    hash = hash * 59 + this.Self.GetHashCode();
                if (this.Run != null)
                    hash = hash * 59 + this.Run.GetHashCode();
                if (this.Delete != null)
                    hash = hash * 59 + this.Delete.GetHashCode();
                if (this.Moveup != null)
                    hash = hash * 59 + this.Moveup.GetHashCode();
                if (this.Movedown != null)
                    hash = hash * 59 + this.Movedown.GetHashCode();
                if (this.Enable != null)
                    hash = hash * 59 + this.Enable.GetHashCode();
                if (this.Disable != null)
                    hash = hash * 59 + this.Disable.GetHashCode();
                if (this.Update != null)
                    hash = hash * 59 + this.Update.GetHashCode();
                if (this.ReportFilter != null)
                    hash = hash * 59 + this.ReportFilter.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
