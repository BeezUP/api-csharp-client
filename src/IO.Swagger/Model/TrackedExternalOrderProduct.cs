/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrackedExternalOrderProduct
    /// </summary>
    [DataContract]
    public partial class TrackedExternalOrderProduct :  IEquatable<TrackedExternalOrderProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedExternalOrderProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrackedExternalOrderProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackedExternalOrderProduct" /> class.
        /// </summary>
        /// <param name="ProductSku">The product sku received related to the external order. (required).</param>
        /// <param name="ProductTitle">We tried to get the catalog product title based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog..</param>
        /// <param name="ProductImageUrl">We tried to get the catalog product image Url based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog..</param>
        /// <param name="ProductActive">We tried to get the catalog product if it&#39;s still active based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog..</param>
        /// <param name="ProductId">We tried to get the catalog product identifier based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog..</param>
        /// <param name="UnitPrice">The product&#39;s unit price related to this external order. This property is voluntarily a string because the value could be an invalid one..</param>
        /// <param name="Quantity">Indicate the product&#39;s quantity ordered. This property is voluntarily a string because the value could be an invalid one.</param>
        /// <param name="Margin">Indicate the product&#39;s margin related to this order. This property is voluntarily a string because the value could be an invalid one.</param>
        public TrackedExternalOrderProduct(string ProductSku = default(string), string ProductTitle = default(string), string ProductImageUrl = default(string), bool? ProductActive = default(bool?), string ProductId = default(string), string UnitPrice = default(string), string Quantity = default(string), string Margin = default(string))
        {
            // to ensure "ProductSku" is required (not null)
            if (ProductSku == null)
            {
                throw new InvalidDataException("ProductSku is a required property for TrackedExternalOrderProduct and cannot be null");
            }
            else
            {
                this.ProductSku = ProductSku;
            }
            this.ProductTitle = ProductTitle;
            this.ProductImageUrl = ProductImageUrl;
            this.ProductActive = ProductActive;
            this.ProductId = ProductId;
            this.UnitPrice = UnitPrice;
            this.Quantity = Quantity;
            this.Margin = Margin;
        }
        
        /// <summary>
        /// The product sku received related to the external order.
        /// </summary>
        /// <value>The product sku received related to the external order.</value>
        [DataMember(Name="productSku", EmitDefaultValue=false)]
        public string ProductSku { get; set; }
        /// <summary>
        /// We tried to get the catalog product title based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
        /// </summary>
        /// <value>We tried to get the catalog product title based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.</value>
        [DataMember(Name="productTitle", EmitDefaultValue=false)]
        public string ProductTitle { get; set; }
        /// <summary>
        /// We tried to get the catalog product image Url based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
        /// </summary>
        /// <value>We tried to get the catalog product image Url based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.</value>
        [DataMember(Name="productImageUrl", EmitDefaultValue=false)]
        public string ProductImageUrl { get; set; }
        /// <summary>
        /// We tried to get the catalog product if it&#39;s still active based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
        /// </summary>
        /// <value>We tried to get the catalog product if it&#39;s still active based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.</value>
        [DataMember(Name="productActive", EmitDefaultValue=false)]
        public bool? ProductActive { get; set; }
        /// <summary>
        /// We tried to get the catalog product identifier based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
        /// </summary>
        /// <value>We tried to get the catalog product identifier based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.</value>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public string ProductId { get; set; }
        /// <summary>
        /// The product&#39;s unit price related to this external order. This property is voluntarily a string because the value could be an invalid one.
        /// </summary>
        /// <value>The product&#39;s unit price related to this external order. This property is voluntarily a string because the value could be an invalid one.</value>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public string UnitPrice { get; set; }
        /// <summary>
        /// Indicate the product&#39;s quantity ordered. This property is voluntarily a string because the value could be an invalid one
        /// </summary>
        /// <value>Indicate the product&#39;s quantity ordered. This property is voluntarily a string because the value could be an invalid one</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public string Quantity { get; set; }
        /// <summary>
        /// Indicate the product&#39;s margin related to this order. This property is voluntarily a string because the value could be an invalid one
        /// </summary>
        /// <value>Indicate the product&#39;s margin related to this order. This property is voluntarily a string because the value could be an invalid one</value>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public string Margin { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackedExternalOrderProduct {\n");
            sb.Append("  ProductSku: ").Append(ProductSku).Append("\n");
            sb.Append("  ProductTitle: ").Append(ProductTitle).Append("\n");
            sb.Append("  ProductImageUrl: ").Append(ProductImageUrl).Append("\n");
            sb.Append("  ProductActive: ").Append(ProductActive).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TrackedExternalOrderProduct);
        }

        /// <summary>
        /// Returns true if TrackedExternalOrderProduct instances are equal
        /// </summary>
        /// <param name="other">Instance of TrackedExternalOrderProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackedExternalOrderProduct other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProductSku == other.ProductSku ||
                    this.ProductSku != null &&
                    this.ProductSku.Equals(other.ProductSku)
                ) && 
                (
                    this.ProductTitle == other.ProductTitle ||
                    this.ProductTitle != null &&
                    this.ProductTitle.Equals(other.ProductTitle)
                ) && 
                (
                    this.ProductImageUrl == other.ProductImageUrl ||
                    this.ProductImageUrl != null &&
                    this.ProductImageUrl.Equals(other.ProductImageUrl)
                ) && 
                (
                    this.ProductActive == other.ProductActive ||
                    this.ProductActive != null &&
                    this.ProductActive.Equals(other.ProductActive)
                ) && 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.UnitPrice == other.UnitPrice ||
                    this.UnitPrice != null &&
                    this.UnitPrice.Equals(other.UnitPrice)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Margin == other.Margin ||
                    this.Margin != null &&
                    this.Margin.Equals(other.Margin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProductSku != null)
                    hash = hash * 59 + this.ProductSku.GetHashCode();
                if (this.ProductTitle != null)
                    hash = hash * 59 + this.ProductTitle.GetHashCode();
                if (this.ProductImageUrl != null)
                    hash = hash * 59 + this.ProductImageUrl.GetHashCode();
                if (this.ProductActive != null)
                    hash = hash * 59 + this.ProductActive.GetHashCode();
                if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                if (this.UnitPrice != null)
                    hash = hash * 59 + this.UnitPrice.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Margin != null)
                    hash = hash * 59 + this.Margin.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
