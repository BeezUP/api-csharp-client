/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ImportationTechnicalProgression
    /// </summary>
    [DataContract]
    public partial class ImportationTechnicalProgression :  IEquatable<ImportationTechnicalProgression>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportationTechnicalProgression" /> class.
        /// </summary>
        /// <param name="StepsProgression">Indicate for each step of the importation the uris to look at.</param>
        public ImportationTechnicalProgression(Dictionary<string, List<string>> StepsProgression = default(Dictionary<string, List<string>>))
        {
            this.StepsProgression = StepsProgression;
        }
        
        /// <summary>
        /// Indicate for each step of the importation the uris to look at
        /// </summary>
        /// <value>Indicate for each step of the importation the uris to look at</value>
        [DataMember(Name="stepsProgression", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> StepsProgression { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportationTechnicalProgression {\n");
            sb.Append("  StepsProgression: ").Append(StepsProgression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ImportationTechnicalProgression);
        }

        /// <summary>
        /// Returns true if ImportationTechnicalProgression instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportationTechnicalProgression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportationTechnicalProgression other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StepsProgression == other.StepsProgression ||
                    this.StepsProgression != null &&
                    this.StepsProgression.SequenceEqual(other.StepsProgression)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StepsProgression != null)
                    hash = hash * 59 + this.StepsProgression.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
