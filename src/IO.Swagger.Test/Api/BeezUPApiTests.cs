/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing BeezUPApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BeezUPApiTests
    {
        private BeezUPApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BeezUPApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BeezUPApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BeezUPApi
            //Assert.IsInstanceOfType(typeof(BeezUPApi), instance, "instance is a BeezUPApi");
        }

        
        /// <summary>
        /// Test ActivateUserAccount
        /// </summary>
        [Test]
        public void ActivateUserAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emailActivationId = null;
            //instance.ActivateUserAccount(emailActivationId);
            
        }
        
        /// <summary>
        /// Test AutoConfigureAutoImportInterval
        /// </summary>
        [Test]
        public void AutoConfigureAutoImportIntervalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ConfigureAutoImportIntervalRequest request = null;
            //instance.AutoConfigureAutoImportInterval(storeId, request);
            
        }
        
        /// <summary>
        /// Test AutoDeleteAutoImport
        /// </summary>
        [Test]
        public void AutoDeleteAutoImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //instance.AutoDeleteAutoImport(storeId);
            
        }
        
        /// <summary>
        /// Test AutoGetAutoImportConfiguration
        /// </summary>
        [Test]
        public void AutoGetAutoImportConfigurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.AutoGetAutoImportConfiguration(storeId);
            //Assert.IsInstanceOf<AutoImportConfiguration> (response, "response is AutoImportConfiguration");
        }
        
        /// <summary>
        /// Test AutoPauseAutoImport
        /// </summary>
        [Test]
        public void AutoPauseAutoImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //instance.AutoPauseAutoImport(storeId);
            
        }
        
        /// <summary>
        /// Test AutoResumeAutoImport
        /// </summary>
        [Test]
        public void AutoResumeAutoImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //instance.AutoResumeAutoImport(storeId);
            
        }
        
        /// <summary>
        /// Test AutoScheduleAutoImport
        /// </summary>
        [Test]
        public void AutoScheduleAutoImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ScheduleAutoImportRequest request = null;
            //instance.AutoScheduleAutoImport(storeId, request);
            
        }
        
        /// <summary>
        /// Test AutoStartAutoImport
        /// </summary>
        [Test]
        public void AutoStartAutoImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.AutoStartAutoImport(storeId);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test CatalogChangeCatalogColumnUserName
        /// </summary>
        [Test]
        public void CatalogChangeCatalogColumnUserNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //ChangeUserColumnNameRequest request = null;
            //instance.CatalogChangeCatalogColumnUserName(storeId, columnId, request);
            
        }
        
        /// <summary>
        /// Test CatalogChangeCustomColumnExpression
        /// </summary>
        [Test]
        public void CatalogChangeCustomColumnExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //ChangeCustomColumnExpressionRequest request = null;
            //instance.CatalogChangeCustomColumnExpression(storeId, columnId, request);
            
        }
        
        /// <summary>
        /// Test CatalogChangeCustomColumnUserName
        /// </summary>
        [Test]
        public void CatalogChangeCustomColumnUserNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //ChangeUserColumnNameRequest request = null;
            //instance.CatalogChangeCustomColumnUserName(storeId, columnId, request);
            
        }
        
        /// <summary>
        /// Test CatalogComputeExpression
        /// </summary>
        [Test]
        public void CatalogComputeExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ComputeExpressionRequest request = null;
            //var response = instance.CatalogComputeExpression(storeId, request);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CatalogDeleteCustomColumn
        /// </summary>
        [Test]
        public void CatalogDeleteCustomColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //instance.CatalogDeleteCustomColumn(storeId, columnId);
            
        }
        
        /// <summary>
        /// Test CatalogGetBeezUPColumns
        /// </summary>
        [Test]
        public void CatalogGetBeezUPColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CatalogGetBeezUPColumns();
            //Assert.IsInstanceOf<List<BeezUPColumnConfiguration>> (response, "response is List<BeezUPColumnConfiguration>");
        }
        
        /// <summary>
        /// Test CatalogGetCatalogColumns
        /// </summary>
        [Test]
        public void CatalogGetCatalogColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.CatalogGetCatalogColumns(storeId);
            //Assert.IsInstanceOf<CatalogColumns> (response, "response is CatalogColumns");
        }
        
        /// <summary>
        /// Test CatalogGetCategories
        /// </summary>
        [Test]
        public void CatalogGetCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //List<string> acceptEncoding = null;
            //var response = instance.CatalogGetCategories(storeId, acceptEncoding);
            //Assert.IsInstanceOf<Categories> (response, "response is Categories");
        }
        
        /// <summary>
        /// Test CatalogGetCustomColumnExpression
        /// </summary>
        [Test]
        public void CatalogGetCustomColumnExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //var response = instance.CatalogGetCustomColumnExpression(storeId, columnId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CatalogGetCustomColumns
        /// </summary>
        [Test]
        public void CatalogGetCustomColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.CatalogGetCustomColumns(storeId);
            //Assert.IsInstanceOf<CustomColumns> (response, "response is CustomColumns");
        }
        
        /// <summary>
        /// Test CatalogGetProduct
        /// </summary>
        [Test]
        public void CatalogGetProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string productId = null;
            //var response = instance.CatalogGetProduct(storeId, productId);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test CatalogGetProducts
        /// </summary>
        [Test]
        public void CatalogGetProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //GetProductsRequest request = null;
            //var response = instance.CatalogGetProducts(storeId, request);
            //Assert.IsInstanceOf<Products> (response, "response is Products");
        }
        
        /// <summary>
        /// Test CatalogGetRandomProducts
        /// </summary>
        [Test]
        public void CatalogGetRandomProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? count = null;
            //var response = instance.CatalogGetRandomProducts(storeId, count);
            //Assert.IsInstanceOf<Products> (response, "response is Products");
        }
        
        /// <summary>
        /// Test CatalogSaveCustomColumn
        /// </summary>
        [Test]
        public void CatalogSaveCustomColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //CreateCustomColumnRequest request = null;
            //instance.CatalogSaveCustomColumn(storeId, columnId, request);
            
        }
        
        /// <summary>
        /// Test ChangeOrder
        /// </summary>
        [Test]
        public void ChangeOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceTechnicalCode = null;
            //int? accountId = null;
            //string beezUPOrderId = null;
            //string changeOrderType = null;
            //string userName = null;
            //ChangeOrderRequest request = null;
            //string ifMatch = null;
            //bool? testMode = null;
            //instance.ChangeOrder(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, testMode);
            
        }
        
        /// <summary>
        /// Test ChangeOrderList
        /// </summary>
        [Test]
        public void ChangeOrderListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string changeOrderType = null;
            //string userName = null;
            //ChangeOrderListRequest request = null;
            //bool? testMode = null;
            //var response = instance.ChangeOrderList(changeOrderType, userName, request, testMode);
            //Assert.IsInstanceOf<BatchOrderOperationResponse> (response, "response is BatchOrderOperationResponse");
        }
        
        /// <summary>
        /// Test ChangePassword
        /// </summary>
        [Test]
        public void ChangePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChangePasswordRequest request = null;
            //instance.ChangePassword(request);
            
        }
        
        /// <summary>
        /// Test ClearMerchantOrderInfo
        /// </summary>
        [Test]
        public void ClearMerchantOrderInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceTechnicalCode = null;
            //int? accountId = null;
            //string beezUPOrderId = null;
            //instance.ClearMerchantOrderInfo(marketplaceTechnicalCode, accountId, beezUPOrderId);
            
        }
        
        /// <summary>
        /// Test ClearMerchantOrderInfoList
        /// </summary>
        [Test]
        public void ClearMerchantOrderInfoListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClearMerchantOrderInfoListRequest request = null;
            //var response = instance.ClearMerchantOrderInfoList(request);
            //Assert.IsInstanceOf<BatchOrderOperationResponse> (response, "response is BatchOrderOperationResponse");
        }
        
        /// <summary>
        /// Test ConfigureAutomaticTransitions
        /// </summary>
        [Test]
        public void ConfigureAutomaticTransitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SaveAutomaticTransitionRequest request = null;
            //instance.ConfigureAutomaticTransitions(request);
            
        }
        
        /// <summary>
        /// Test ConfigureChannelCatalogCostSettings
        /// </summary>
        [Test]
        public void ConfigureChannelCatalogCostSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //CostSettings request = null;
            //instance.ConfigureChannelCatalogCostSettings(channelCatalogId, request);
            
        }
        
        /// <summary>
        /// Test ConfigureChannelCatalogExclusionFilters
        /// </summary>
        [Test]
        public void ConfigureChannelCatalogExclusionFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //ExclusionFilters request = null;
            //instance.ConfigureChannelCatalogExclusionFilters(channelCatalogId, request);
            
        }
        
        /// <summary>
        /// Test ConfigureChannelCatalogGeneralSettings
        /// </summary>
        [Test]
        public void ConfigureChannelCatalogGeneralSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //GeneralSettings request = null;
            //instance.ConfigureChannelCatalogGeneralSettings(channelCatalogId, request);
            
        }
        
        /// <summary>
        /// Test CreateChannelCatalog
        /// </summary>
        [Test]
        public void CreateChannelCatalogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateChannelCatalogRequest request = null;
            //var response = instance.CreateChannelCatalog(request);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test CreateContract
        /// </summary>
        [Test]
        public void CreateContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateContract request = null;
            //var response = instance.CreateContract(request);
            //Assert.IsInstanceOf<BeezUPCommonInfoSummaries> (response, "response is BeezUPCommonInfoSummaries");
        }
        
        /// <summary>
        /// Test CreateRule
        /// </summary>
        [Test]
        public void CreateRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //CreateRuleRequest request = null;
            //instance.CreateRule(storeId, request);
            
        }
        
        /// <summary>
        /// Test CreateStore
        /// </summary>
        [Test]
        public void CreateStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateStoreRequest request = null;
            //var response = instance.CreateStore(request);
            //Assert.IsInstanceOf<LinksGetStoresLink> (response, "response is LinksGetStoresLink");
        }
        
        /// <summary>
        /// Test DeleteChannelCatalog
        /// </summary>
        [Test]
        public void DeleteChannelCatalogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteChannelCatalog();
            
        }
        
        /// <summary>
        /// Test DeleteChannelCatalogProductValueOverride
        /// </summary>
        [Test]
        public void DeleteChannelCatalogProductValueOverrideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //string productId = null;
            //string channelColumnId = null;
            //instance.DeleteChannelCatalogProductValueOverride(channelCatalogId, productId, channelColumnId);
            
        }
        
        /// <summary>
        /// Test DeleteNextContract
        /// </summary>
        [Test]
        public void DeleteNextContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteNextContract();
            
        }
        
        /// <summary>
        /// Test DeleteReportFilter
        /// </summary>
        [Test]
        public void DeleteReportFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string reportFilterId = null;
            //instance.DeleteReportFilter(storeId, reportFilterId);
            
        }
        
        /// <summary>
        /// Test DeleteRule
        /// </summary>
        [Test]
        public void DeleteRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.DeleteRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test DeleteShare
        /// </summary>
        [Test]
        public void DeleteShareTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string userId = null;
            //instance.DeleteShare(storeId, userId);
            
        }
        
        /// <summary>
        /// Test DeleteStore
        /// </summary>
        [Test]
        public void DeleteStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //instance.DeleteStore(storeId);
            
        }
        
        /// <summary>
        /// Test DisableChannelCatalog
        /// </summary>
        [Test]
        public void DisableChannelCatalogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //instance.DisableChannelCatalog(channelCatalogId);
            
        }
        
        /// <summary>
        /// Test DisableChannelCatalogProduct
        /// </summary>
        [Test]
        public void DisableChannelCatalogProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //string productId = null;
            //instance.DisableChannelCatalogProduct(channelCatalogId, productId);
            
        }
        
        /// <summary>
        /// Test DisableRule
        /// </summary>
        [Test]
        public void DisableRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.DisableRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test EnableChannelCatalog
        /// </summary>
        [Test]
        public void EnableChannelCatalogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //instance.EnableChannelCatalog(channelCatalogId);
            
        }
        
        /// <summary>
        /// Test EnableRule
        /// </summary>
        [Test]
        public void EnableRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.EnableRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test ExportOrders
        /// </summary>
        [Test]
        public void ExportOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string format = null;
            //ExportOrderListRequest request = null;
            //instance.ExportOrders(format, request);
            
        }
        
        /// <summary>
        /// Test ExportStoreReportByCategory
        /// </summary>
        [Test]
        public void ExportStoreReportByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByCategoryRequest request = null;
            //var response = instance.ExportStoreReportByCategory(storeId, format, request);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test ExportStoreReportByChannel
        /// </summary>
        [Test]
        public void ExportStoreReportByChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByChannelRequest request = null;
            //var response = instance.ExportStoreReportByChannel(storeId, format, request);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test ExportStoreReportByProduct
        /// </summary>
        [Test]
        public void ExportStoreReportByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByProductRequest request = null;
            //var response = instance.ExportStoreReportByProduct(storeId, format, request);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test GetAutomaticTransitions
        /// </summary>
        [Test]
        public void GetAutomaticTransitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAutomaticTransitions();
            //Assert.IsInstanceOf<AutomaticTransitionInfos> (response, "response is AutomaticTransitionInfos");
        }
        
        /// <summary>
        /// Test GetBillingPeriods
        /// </summary>
        [Test]
        public void GetBillingPeriodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBillingPeriods();
            //Assert.IsInstanceOf<BillingPeriods> (response, "response is BillingPeriods");
        }
        
        /// <summary>
        /// Test GetChannelCatalog
        /// </summary>
        [Test]
        public void GetChannelCatalogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //var response = instance.GetChannelCatalog(channelCatalogId);
            //Assert.IsInstanceOf<ChannelCatalog> (response, "response is ChannelCatalog");
        }
        
        /// <summary>
        /// Test GetChannelCatalogCategories
        /// </summary>
        [Test]
        public void GetChannelCatalogCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //var response = instance.GetChannelCatalogCategories(channelCatalogId);
            //Assert.IsInstanceOf<ChannelCatalogCategoryMappings> (response, "response is ChannelCatalogCategoryMappings");
        }
        
        /// <summary>
        /// Test GetChannelCatalogExclusionFilterOperators
        /// </summary>
        [Test]
        public void GetChannelCatalogExclusionFilterOperatorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetChannelCatalogExclusionFilterOperators();
            //Assert.IsInstanceOf<List<ExclusionFilterOperator>> (response, "response is List<ExclusionFilterOperator>");
        }
        
        /// <summary>
        /// Test GetChannelCatalogMarketplaceProperties
        /// </summary>
        [Test]
        public void GetChannelCatalogMarketplacePropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //var response = instance.GetChannelCatalogMarketplaceProperties(channelCatalogId);
            //Assert.IsInstanceOf<ChannelCatalogMarketplaceProperties> (response, "response is ChannelCatalogMarketplaceProperties");
        }
        
        /// <summary>
        /// Test GetChannelCatalogMarketplaceSettings
        /// </summary>
        [Test]
        public void GetChannelCatalogMarketplaceSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //var response = instance.GetChannelCatalogMarketplaceSettings(channelCatalogId);
            //Assert.IsInstanceOf<ChannelCatalogMarketplaceSettings> (response, "response is ChannelCatalogMarketplaceSettings");
        }
        
        /// <summary>
        /// Test GetChannelCatalogProductInfo
        /// </summary>
        [Test]
        public void GetChannelCatalogProductInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //string productId = null;
            //var response = instance.GetChannelCatalogProductInfo(channelCatalogId, productId);
            //Assert.IsInstanceOf<ChannelCatalogProductInfo> (response, "response is ChannelCatalogProductInfo");
        }
        
        /// <summary>
        /// Test GetChannelCatalogProductInfoList
        /// </summary>
        [Test]
        public void GetChannelCatalogProductInfoListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //GetChannelCatalogProductInfoListRequest request = null;
            //var response = instance.GetChannelCatalogProductInfoList(channelCatalogId, request);
            //Assert.IsInstanceOf<ChannelCatalogProductInfoList> (response, "response is ChannelCatalogProductInfoList");
        }
        
        /// <summary>
        /// Test GetChannelCatalogs
        /// </summary>
        [Test]
        public void GetChannelCatalogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetChannelCatalogs(storeId);
            //Assert.IsInstanceOf<ChannelCatalogList> (response, "response is ChannelCatalogList");
        }
        
        /// <summary>
        /// Test GetChannelCategories
        /// </summary>
        [Test]
        public void GetChannelCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelId = null;
            //List<string> acceptEncoding = null;
            //var response = instance.GetChannelCategories(channelId, acceptEncoding);
            //Assert.IsInstanceOf<ChannelRootCategory> (response, "response is ChannelRootCategory");
        }
        
        /// <summary>
        /// Test GetChannelColumns
        /// </summary>
        [Test]
        public void GetChannelColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelId = null;
            //List<string> acceptEncoding = null;
            //List<BeezUPCommonChannelColumnId> request = null;
            //var response = instance.GetChannelColumns(channelId, acceptEncoding, request);
            //Assert.IsInstanceOf<List<ChannelColumn>> (response, "response is List<ChannelColumn>");
        }
        
        /// <summary>
        /// Test GetChannelInfo
        /// </summary>
        [Test]
        public void GetChannelInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelId = null;
            //var response = instance.GetChannelInfo(channelId);
            //Assert.IsInstanceOf<ChannelInfo> (response, "response is ChannelInfo");
        }
        
        /// <summary>
        /// Test GetContracts
        /// </summary>
        [Test]
        public void GetContractsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetContracts();
            //Assert.IsInstanceOf<Contracts> (response, "response is Contracts");
        }
        
        /// <summary>
        /// Test GetCreditCardInfo
        /// </summary>
        [Test]
        public void GetCreditCardInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCreditCardInfo();
            //Assert.IsInstanceOf<CreditCardInfoResponse> (response, "response is CreditCardInfoResponse");
        }
        
        /// <summary>
        /// Test GetCurrentChannels
        /// </summary>
        [Test]
        public void GetCurrentChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetCurrentChannels(storeId);
            //Assert.IsInstanceOf<List<ChannelHeader>> (response, "response is List<ChannelHeader>");
        }
        
        /// <summary>
        /// Test GetFriendInfo
        /// </summary>
        [Test]
        public void GetFriendInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetFriendInfo(userId);
            //Assert.IsInstanceOf<UserFriendInfo> (response, "response is UserFriendInfo");
        }
        
        /// <summary>
        /// Test GetInvoices
        /// </summary>
        [Test]
        public void GetInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetInvoices();
            //Assert.IsInstanceOf<Invoices> (response, "response is Invoices");
        }
        
        /// <summary>
        /// Test GetMarketplaceAccountStores
        /// </summary>
        [Test]
        public void GetMarketplaceAccountStoresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMarketplaceAccountStores();
            //Assert.IsInstanceOf<MarketplaceChannelCatalogList> (response, "response is MarketplaceChannelCatalogList");
        }
        
        /// <summary>
        /// Test GetMarketplaceAccountsSynchronization
        /// </summary>
        [Test]
        public void GetMarketplaceAccountsSynchronizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMarketplaceAccountsSynchronization();
            //Assert.IsInstanceOf<AccountSynchronizations> (response, "response is AccountSynchronizations");
        }
        
        /// <summary>
        /// Test GetOffer
        /// </summary>
        [Test]
        public void GetOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OfferRequest request = null;
            //var response = instance.GetOffer(request);
            //Assert.IsInstanceOf<Offer> (response, "response is Offer");
        }
        
        /// <summary>
        /// Test GetOrder
        /// </summary>
        [Test]
        public void GetOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceTechnicalCode = null;
            //int? accountId = null;
            //string beezUPOrderId = null;
            //string ifNoneMatch = null;
            //var response = instance.GetOrder(marketplaceTechnicalCode, accountId, beezUPOrderId, ifNoneMatch);
            //Assert.IsInstanceOf<Order> (response, "response is Order");
        }
        
        /// <summary>
        /// Test GetOrderExportations
        /// </summary>
        [Test]
        public void GetOrderExportationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageNumber = null;
            //int? pageSize = null;
            //var response = instance.GetOrderExportations(pageNumber, pageSize);
            //Assert.IsInstanceOf<OrderExportations> (response, "response is OrderExportations");
        }
        
        /// <summary>
        /// Test GetOrderHistory
        /// </summary>
        [Test]
        public void GetOrderHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceTechnicalCode = null;
            //int? accountId = null;
            //string beezUPOrderId = null;
            //var response = instance.GetOrderHistory(marketplaceTechnicalCode, accountId, beezUPOrderId);
            //Assert.IsInstanceOf<OrderHistory> (response, "response is OrderHistory");
        }
        
        /// <summary>
        /// Test GetOrderListFull
        /// </summary>
        [Test]
        public void GetOrderListFullTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> acceptEncoding = null;
            //OrderListRequest request = null;
            //var response = instance.GetOrderListFull(acceptEncoding, request);
            //Assert.IsInstanceOf<OrderListFull> (response, "response is OrderListFull");
        }
        
        /// <summary>
        /// Test GetOrderListLight
        /// </summary>
        [Test]
        public void GetOrderListLightTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderListRequest request = null;
            //var response = instance.GetOrderListLight(request);
            //Assert.IsInstanceOf<OrderListLight> (response, "response is OrderListLight");
        }
        
        /// <summary>
        /// Test GetPublications
        /// </summary>
        [Test]
        public void GetPublicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceTechnicalCode = null;
            //int? accountId = null;
            //string channelCatalogId = null;
            //int? count = null;
            //List<string> publicationTypes = null;
            //var response = instance.GetPublications(marketplaceTechnicalCode, accountId, channelCatalogId, count, publicationTypes);
            //Assert.IsInstanceOf<AccountPublications> (response, "response is AccountPublications");
        }
        
        /// <summary>
        /// Test GetReportFilter
        /// </summary>
        [Test]
        public void GetReportFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string reportFilterId = null;
            //var response = instance.GetReportFilter(storeId, reportFilterId);
            //Assert.IsInstanceOf<ReportFilter> (response, "response is ReportFilter");
        }
        
        /// <summary>
        /// Test GetReportFilters
        /// </summary>
        [Test]
        public void GetReportFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetReportFilters(storeId);
            //Assert.IsInstanceOf<ReportFilters> (response, "response is ReportFilters");
        }
        
        /// <summary>
        /// Test GetRights
        /// </summary>
        [Test]
        public void GetRightsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //List<string> functionalityCodeList = null;
            //var response = instance.GetRights(storeId, functionalityCodeList);
            //Assert.IsInstanceOf<List<FunctionalityRightInfo>> (response, "response is List<FunctionalityRightInfo>");
        }
        
        /// <summary>
        /// Test GetRule
        /// </summary>
        [Test]
        public void GetRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //var response = instance.GetRule(storeId, ruleId);
            //Assert.IsInstanceOf<Rule> (response, "response is Rule");
        }
        
        /// <summary>
        /// Test GetRules
        /// </summary>
        [Test]
        public void GetRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetRules(storeId);
            //Assert.IsInstanceOf<Rules> (response, "response is Rules");
        }
        
        /// <summary>
        /// Test GetRulesExecutions
        /// </summary>
        [Test]
        public void GetRulesExecutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? pageNumber = null;
            //int? pageSize = null;
            //var response = instance.GetRulesExecutions(storeId, pageNumber, pageSize);
            //Assert.IsInstanceOf<RuleExecutionReportings> (response, "response is RuleExecutionReportings");
        }
        
        /// <summary>
        /// Test GetShares
        /// </summary>
        [Test]
        public void GetSharesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetShares(storeId);
            //Assert.IsInstanceOf<StoreShares> (response, "response is StoreShares");
        }
        
        /// <summary>
        /// Test GetStandardOffers
        /// </summary>
        [Test]
        public void GetStandardOffersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetStandardOffers();
            //Assert.IsInstanceOf<StandardOffers> (response, "response is StandardOffers");
        }
        
        /// <summary>
        /// Test GetStore
        /// </summary>
        [Test]
        public void GetStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetStore(storeId);
            //Assert.IsInstanceOf<StoreHeader> (response, "response is StoreHeader");
        }
        
        /// <summary>
        /// Test GetStoreAlerts
        /// </summary>
        [Test]
        public void GetStoreAlertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetStoreAlerts(storeId);
            //Assert.IsInstanceOf<StoreAlerts> (response, "response is StoreAlerts");
        }
        
        /// <summary>
        /// Test GetStoreReportByCategory
        /// </summary>
        [Test]
        public void GetStoreReportByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByCategoryRequest request = null;
            //var response = instance.GetStoreReportByCategory(storeId, request);
            //Assert.IsInstanceOf<ReportByCategoryResponse> (response, "response is ReportByCategoryResponse");
        }
        
        /// <summary>
        /// Test GetStoreReportByChannel
        /// </summary>
        [Test]
        public void GetStoreReportByChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByChannelRequest request = null;
            //var response = instance.GetStoreReportByChannel(storeId, request);
            //Assert.IsInstanceOf<ReportByChannelResponse> (response, "response is ReportByChannelResponse");
        }
        
        /// <summary>
        /// Test GetStoreReportByDay
        /// </summary>
        [Test]
        public void GetStoreReportByDayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByDayRequest request = null;
            //var response = instance.GetStoreReportByDay(storeId, request);
            //Assert.IsInstanceOf<ReportByDayResponse> (response, "response is ReportByDayResponse");
        }
        
        /// <summary>
        /// Test GetStoreReportByDayExport
        /// </summary>
        [Test]
        public void GetStoreReportByDayExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByDayRequest request = null;
            //var response = instance.GetStoreReportByDayExport(storeId, format, request);
            //Assert.IsInstanceOf<BeezUPCommonLink3> (response, "response is BeezUPCommonLink3");
        }
        
        /// <summary>
        /// Test GetStoreReportByProduct
        /// </summary>
        [Test]
        public void GetStoreReportByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByProductRequest request = null;
            //var response = instance.GetStoreReportByProduct(storeId, request);
            //Assert.IsInstanceOf<ReportByProductResponse> (response, "response is ReportByProductResponse");
        }
        
        /// <summary>
        /// Test GetStoreTrackedClicks
        /// </summary>
        [Test]
        public void GetStoreTrackedClicksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? count = null;
            //var response = instance.GetStoreTrackedClicks(storeId, count);
            //Assert.IsInstanceOf<TrackedClicks> (response, "response is TrackedClicks");
        }
        
        /// <summary>
        /// Test GetStoreTrackedExternalOrders
        /// </summary>
        [Test]
        public void GetStoreTrackedExternalOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? count = null;
            //var response = instance.GetStoreTrackedExternalOrders(storeId, count);
            //Assert.IsInstanceOf<TrackedExternalOrders> (response, "response is TrackedExternalOrders");
        }
        
        /// <summary>
        /// Test GetStoreTrackedOrders
        /// </summary>
        [Test]
        public void GetStoreTrackedOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? count = null;
            //var response = instance.GetStoreTrackedOrders(storeId, count);
            //Assert.IsInstanceOf<TrackedOrders> (response, "response is TrackedOrders");
        }
        
        /// <summary>
        /// Test GetStoreTrackingStatus
        /// </summary>
        [Test]
        public void GetStoreTrackingStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetStoreTrackingStatus(storeId);
            //Assert.IsInstanceOf<StoreTrackingStatus> (response, "response is StoreTrackingStatus");
        }
        
        /// <summary>
        /// Test GetStores
        /// </summary>
        [Test]
        public void GetStoresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetStores();
            //Assert.IsInstanceOf<Stores> (response, "response is Stores");
        }
        
        /// <summary>
        /// Test GetTrackingStatus
        /// </summary>
        [Test]
        public void GetTrackingStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTrackingStatus();
            //Assert.IsInstanceOf<TrackingStatus> (response, "response is TrackingStatus");
        }
        
        /// <summary>
        /// Test GetUserAccountInfo
        /// </summary>
        [Test]
        public void GetUserAccountInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserAccountInfo();
            //Assert.IsInstanceOf<AccountInfo> (response, "response is AccountInfo");
        }
        
        /// <summary>
        /// Test GetUserListGroup
        /// </summary>
        [Test]
        public void GetUserListGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listGroupName = null;
            //var response = instance.GetUserListGroup(listGroupName);
            //Assert.IsInstanceOf<List<BeezUPCommonLOVLink2>> (response, "response is List<BeezUPCommonLOVLink2>");
        }
        
        /// <summary>
        /// Test GetUserListGroupNames
        /// </summary>
        [Test]
        public void GetUserListGroupNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserListGroupNames();
            //Assert.IsInstanceOf<List<BeezUPCommonLOVLink2>> (response, "response is List<BeezUPCommonLOVLink2>");
        }
        
        /// <summary>
        /// Test GetUserListNames
        /// </summary>
        [Test]
        public void GetUserListNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserListNames();
            //Assert.IsInstanceOf<List<BeezUPCommonLOVLink2>> (response, "response is List<BeezUPCommonLOVLink2>");
        }
        
        /// <summary>
        /// Test GetUserListOfValues
        /// </summary>
        [Test]
        public void GetUserListOfValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listName = null;
            //List<string> acceptLanguage = null;
            //var response = instance.GetUserListOfValues(listName, acceptLanguage);
            //Assert.IsInstanceOf<List<BeezUPCommonListOfValueItem>> (response, "response is List<BeezUPCommonListOfValueItem>");
        }
        
        /// <summary>
        /// Test HarvestAll
        /// </summary>
        [Test]
        public void HarvestAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.HarvestAll();
            
        }
        
        /// <summary>
        /// Test HarvestOrder
        /// </summary>
        [Test]
        public void HarvestOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceTechnicalCode = null;
            //int? accountId = null;
            //string beezUPOrderId = null;
            //instance.HarvestOrder(marketplaceTechnicalCode, accountId, beezUPOrderId);
            
        }
        
        /// <summary>
        /// Test ImportationActivateAutoImport
        /// </summary>
        [Test]
        public void ImportationActivateAutoImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //instance.ImportationActivateAutoImport(storeId);
            
        }
        
        /// <summary>
        /// Test ImportationCancel
        /// </summary>
        [Test]
        public void ImportationCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //instance.ImportationCancel(storeId, executionId);
            
        }
        
        /// <summary>
        /// Test ImportationCommit
        /// </summary>
        [Test]
        public void ImportationCommitTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //instance.ImportationCommit(storeId, executionId);
            
        }
        
        /// <summary>
        /// Test ImportationCommitColumns
        /// </summary>
        [Test]
        public void ImportationCommitColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //instance.ImportationCommitColumns(storeId, executionId);
            
        }
        
        /// <summary>
        /// Test ImportationConfigureCatalogColumn
        /// </summary>
        [Test]
        public void ImportationConfigureCatalogColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //ConfigureCatalogColumnCatalogRequest request = null;
            //instance.ImportationConfigureCatalogColumn(storeId, executionId, columnId, request);
            
        }
        
        /// <summary>
        /// Test ImportationConfigureRemainingCatalogColumns
        /// </summary>
        [Test]
        public void ImportationConfigureRemainingCatalogColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //instance.ImportationConfigureRemainingCatalogColumns(storeId, executionId);
            
        }
        
        /// <summary>
        /// Test ImportationDeleteCustomColumn
        /// </summary>
        [Test]
        public void ImportationDeleteCustomColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //instance.ImportationDeleteCustomColumn(storeId, executionId, columnId);
            
        }
        
        /// <summary>
        /// Test ImportationGetCustomColumnExpression
        /// </summary>
        [Test]
        public void ImportationGetCustomColumnExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //var response = instance.ImportationGetCustomColumnExpression(storeId, executionId, columnId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ImportationGetCustomColumns
        /// </summary>
        [Test]
        public void ImportationGetCustomColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //var response = instance.ImportationGetCustomColumns(storeId, executionId);
            //Assert.IsInstanceOf<CustomColumns> (response, "response is CustomColumns");
        }
        
        /// <summary>
        /// Test ImportationGetDetectedCatalogColumns
        /// </summary>
        [Test]
        public void ImportationGetDetectedCatalogColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //var response = instance.ImportationGetDetectedCatalogColumns(storeId, executionId);
            //Assert.IsInstanceOf<DetectedCatalogColumns> (response, "response is DetectedCatalogColumns");
        }
        
        /// <summary>
        /// Test ImportationGetImportationMonitoring
        /// </summary>
        [Test]
        public void ImportationGetImportationMonitoringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //var response = instance.ImportationGetImportationMonitoring(storeId, executionId);
            //Assert.IsInstanceOf<ImportationMonitoring> (response, "response is ImportationMonitoring");
        }
        
        /// <summary>
        /// Test ImportationGetManualUpdateLastInputConfig
        /// </summary>
        [Test]
        public void ImportationGetManualUpdateLastInputConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.ImportationGetManualUpdateLastInputConfig(storeId);
            //Assert.IsInstanceOf<LastManualImportInputConfiguration> (response, "response is LastManualImportInputConfiguration");
        }
        
        /// <summary>
        /// Test ImportationGetProductSample
        /// </summary>
        [Test]
        public void ImportationGetProductSampleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //int? productSampleIndex = null;
            //var response = instance.ImportationGetProductSample(storeId, executionId, productSampleIndex);
            //Assert.IsInstanceOf<ProductSample> (response, "response is ProductSample");
        }
        
        /// <summary>
        /// Test ImportationGetProductSampleCustomColumnValue
        /// </summary>
        [Test]
        public void ImportationGetProductSampleCustomColumnValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //int? productSampleIndex = null;
            //string columnId = null;
            //var response = instance.ImportationGetProductSampleCustomColumnValue(storeId, executionId, productSampleIndex, columnId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ImportationGetReportings
        /// </summary>
        [Test]
        public void ImportationGetReportingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.ImportationGetReportings(storeId);
            //Assert.IsInstanceOf<List<ImportationReporting>> (response, "response is List<ImportationReporting>");
        }
        
        /// <summary>
        /// Test ImportationIgnoreColumn
        /// </summary>
        [Test]
        public void ImportationIgnoreColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //instance.ImportationIgnoreColumn(storeId, executionId, columnId);
            
        }
        
        /// <summary>
        /// Test ImportationMapCatalogColumn
        /// </summary>
        [Test]
        public void ImportationMapCatalogColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //MapBeezUPColumnRequest request = null;
            //instance.ImportationMapCatalogColumn(storeId, executionId, columnId, request);
            
        }
        
        /// <summary>
        /// Test ImportationMapCustomColumn
        /// </summary>
        [Test]
        public void ImportationMapCustomColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //MapBeezUPColumnRequest request = null;
            //instance.ImportationMapCustomColumn(storeId, executionId, columnId, request);
            
        }
        
        /// <summary>
        /// Test ImportationReattendColumn
        /// </summary>
        [Test]
        public void ImportationReattendColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //instance.ImportationReattendColumn(storeId, executionId, columnId);
            
        }
        
        /// <summary>
        /// Test ImportationSaveCustomColumn
        /// </summary>
        [Test]
        public void ImportationSaveCustomColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //ChangeCustomColumnRequest request = null;
            //instance.ImportationSaveCustomColumn(storeId, executionId, columnId, request);
            
        }
        
        /// <summary>
        /// Test ImportationStartManualUpdate
        /// </summary>
        [Test]
        public void ImportationStartManualUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //StartManualImportRequest request = null;
            //var response = instance.ImportationStartManualUpdate(storeId, request);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test ImportationTechnicalProgression
        /// </summary>
        [Test]
        public void ImportationTechnicalProgressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //var response = instance.ImportationTechnicalProgression(storeId, executionId);
            //Assert.IsInstanceOf<ImportationTechnicalProgression> (response, "response is ImportationTechnicalProgression");
        }
        
        /// <summary>
        /// Test ImportationUnmapCatalogColumn
        /// </summary>
        [Test]
        public void ImportationUnmapCatalogColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //instance.ImportationUnmapCatalogColumn(storeId, executionId, columnId);
            
        }
        
        /// <summary>
        /// Test ImportationUnmapCustomColumn
        /// </summary>
        [Test]
        public void ImportationUnmapCustomColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string executionId = null;
            //string columnId = null;
            //instance.ImportationUnmapCustomColumn(storeId, executionId, columnId);
            
        }
        
        /// <summary>
        /// Test Logout
        /// </summary>
        [Test]
        public void LogoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Logout();
            
        }
        
        /// <summary>
        /// Test MapChannelCatalogCategory
        /// </summary>
        [Test]
        public void MapChannelCatalogCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //MapCategoryRequest request = null;
            //instance.MapChannelCatalogCategory(channelCatalogId, request);
            
        }
        
        /// <summary>
        /// Test MapChannelCatalogColumns
        /// </summary>
        [Test]
        public void MapChannelCatalogColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //ColumnMappingList request = null;
            //instance.MapChannelCatalogColumns(channelCatalogId, request);
            
        }
        
        /// <summary>
        /// Test MoveDownRule
        /// </summary>
        [Test]
        public void MoveDownRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.MoveDownRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test MoveUpRule
        /// </summary>
        [Test]
        public void MoveUpRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.MoveUpRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test Optimise
        /// </summary>
        [Test]
        public void OptimiseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string actionName = null;
            //OptimiseRequest request = null;
            //instance.Optimise(storeId, actionName, request);
            
        }
        
        /// <summary>
        /// Test OptimiseByCategory
        /// </summary>
        [Test]
        public void OptimiseByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string catalogCategoryId = null;
            //string actionName = null;
            //List<string> request = null;
            //instance.OptimiseByCategory(storeId, catalogCategoryId, actionName, request);
            
        }
        
        /// <summary>
        /// Test OptimiseByChannel
        /// </summary>
        [Test]
        public void OptimiseByChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string channelId = null;
            //string actionName = null;
            //instance.OptimiseByChannel(storeId, channelId, actionName);
            
        }
        
        /// <summary>
        /// Test OptimiseByProduct
        /// </summary>
        [Test]
        public void OptimiseByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string productId = null;
            //string actionName = null;
            //List<string> request = null;
            //instance.OptimiseByProduct(storeId, productId, actionName, request);
            
        }
        
        /// <summary>
        /// Test OverrideChannelCatalogProductOverrides
        /// </summary>
        [Test]
        public void OverrideChannelCatalogProductOverridesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //string productId = null;
            //ProductOverrides request = null;
            //instance.OverrideChannelCatalogProductOverrides(channelCatalogId, productId, request);
            
        }
        
        /// <summary>
        /// Test ReactivateCurrentContract
        /// </summary>
        [Test]
        public void ReactivateCurrentContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ReactivateCurrentContract();
            
        }
        
        /// <summary>
        /// Test ReenableChannelCatalogProduct
        /// </summary>
        [Test]
        public void ReenableChannelCatalogProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //string productId = null;
            //instance.ReenableChannelCatalogProduct(channelCatalogId, productId);
            
        }
        
        /// <summary>
        /// Test ResendEmailActivation
        /// </summary>
        [Test]
        public void ResendEmailActivationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ResendEmailActivation();
            
        }
        
        /// <summary>
        /// Test RunRule
        /// </summary>
        [Test]
        public void RunRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.RunRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test RunRules
        /// </summary>
        [Test]
        public void RunRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //instance.RunRules(storeId);
            
        }
        
        /// <summary>
        /// Test SaveCompanyInfo
        /// </summary>
        [Test]
        public void SaveCompanyInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CompanyInfo request = null;
            //instance.SaveCompanyInfo(request);
            
        }
        
        /// <summary>
        /// Test SaveCreditCardInfo
        /// </summary>
        [Test]
        public void SaveCreditCardInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreditCardInfo request = null;
            //instance.SaveCreditCardInfo(request);
            
        }
        
        /// <summary>
        /// Test SavePersonalInfo
        /// </summary>
        [Test]
        public void SavePersonalInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PersonalInfo request = null;
            //instance.SavePersonalInfo(request);
            
        }
        
        /// <summary>
        /// Test SaveProfilePictureInfo
        /// </summary>
        [Test]
        public void SaveProfilePictureInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProfilePictureInfo request = null;
            //instance.SaveProfilePictureInfo(request);
            
        }
        
        /// <summary>
        /// Test SaveReportFilter
        /// </summary>
        [Test]
        public void SaveReportFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string reportFilterId = null;
            //SaveReportFilterRequest reportFilter = null;
            //instance.SaveReportFilter(storeId, reportFilterId, reportFilter);
            
        }
        
        /// <summary>
        /// Test SaveStoreAlert
        /// </summary>
        [Test]
        public void SaveStoreAlertTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? alertId = null;
            //List<SaveStoreAlertRequest> request = null;
            //instance.SaveStoreAlert(storeId, alertId, request);
            
        }
        
        /// <summary>
        /// Test SetChannelCatalogMarketplaceSettings
        /// </summary>
        [Test]
        public void SetChannelCatalogMarketplaceSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //SetChannelCatalogMarketplaceSettingsRequest model = null;
            //instance.SetChannelCatalogMarketplaceSettings(channelCatalogId, model);
            
        }
        
        /// <summary>
        /// Test SetMerchantOrderInfo
        /// </summary>
        [Test]
        public void SetMerchantOrderInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string marketplaceTechnicalCode = null;
            //int? accountId = null;
            //string beezUPOrderId = null;
            //SetMerchantOrderInfoRequest request = null;
            //instance.SetMerchantOrderInfo(marketplaceTechnicalCode, accountId, beezUPOrderId, request);
            
        }
        
        /// <summary>
        /// Test SetMerchantOrderInfoList
        /// </summary>
        [Test]
        public void SetMerchantOrderInfoListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetMerchantOrderInfoListRequest request = null;
            //var response = instance.SetMerchantOrderInfoList(request);
            //Assert.IsInstanceOf<BatchOrderOperationResponse> (response, "response is BatchOrderOperationResponse");
        }
        
        /// <summary>
        /// Test Share
        /// </summary>
        [Test]
        public void ShareTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //FriendEmail email = null;
            //instance.Share(storeId, email);
            
        }
        
        /// <summary>
        /// Test TerminateCurrentContract
        /// </summary>
        [Test]
        public void TerminateCurrentContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TerminateContract request = null;
            //instance.TerminateCurrentContract(request);
            
        }
        
        /// <summary>
        /// Test UnmapChannelCatalogCategory
        /// </summary>
        [Test]
        public void UnmapChannelCatalogCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelCatalogId = null;
            //UnmapCategoryRequest request = null;
            //instance.UnmapChannelCatalogCategory(channelCatalogId, request);
            
        }
        
        /// <summary>
        /// Test UpdateRule
        /// </summary>
        [Test]
        public void UpdateRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //UpdateRuleRequest request = null;
            //instance.UpdateRule(storeId, ruleId, request);
            
        }
        
        /// <summary>
        /// Test UpdateStore
        /// </summary>
        [Test]
        public void UpdateStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //UpdateStoreRequest request = null;
            //instance.UpdateStore(storeId, request);
            
        }
        
    }

}
