/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing V2UserAnalyticsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class V2UserAnalyticsApiTests
    {
        private V2UserAnalyticsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new V2UserAnalyticsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of V2UserAnalyticsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' V2UserAnalyticsApi
            //Assert.IsInstanceOfType(typeof(V2UserAnalyticsApi), instance, "instance is a V2UserAnalyticsApi");
        }

        
        /// <summary>
        /// Test CreateRule
        /// </summary>
        [Test]
        public void CreateRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //CreateRuleRequest request = null;
            //instance.CreateRule(storeId, request);
            
        }
        
        /// <summary>
        /// Test DeleteReportFilter
        /// </summary>
        [Test]
        public void DeleteReportFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string reportFilterId = null;
            //instance.DeleteReportFilter(storeId, reportFilterId);
            
        }
        
        /// <summary>
        /// Test DeleteRule
        /// </summary>
        [Test]
        public void DeleteRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.DeleteRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test DisableRule
        /// </summary>
        [Test]
        public void DisableRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.DisableRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test EnableRule
        /// </summary>
        [Test]
        public void EnableRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.EnableRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test ExportStoreReportByCategory
        /// </summary>
        [Test]
        public void ExportStoreReportByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByCategoryRequest request = null;
            //var response = instance.ExportStoreReportByCategory(storeId, format, request);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test ExportStoreReportByChannel
        /// </summary>
        [Test]
        public void ExportStoreReportByChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByChannelRequest request = null;
            //var response = instance.ExportStoreReportByChannel(storeId, format, request);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test ExportStoreReportByProduct
        /// </summary>
        [Test]
        public void ExportStoreReportByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByProductRequest request = null;
            //var response = instance.ExportStoreReportByProduct(storeId, format, request);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test GetReportFilter
        /// </summary>
        [Test]
        public void GetReportFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string reportFilterId = null;
            //var response = instance.GetReportFilter(storeId, reportFilterId);
            //Assert.IsInstanceOf<ReportFilter> (response, "response is ReportFilter");
        }
        
        /// <summary>
        /// Test GetReportFilters
        /// </summary>
        [Test]
        public void GetReportFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetReportFilters(storeId);
            //Assert.IsInstanceOf<ReportFilters> (response, "response is ReportFilters");
        }
        
        /// <summary>
        /// Test GetRule
        /// </summary>
        [Test]
        public void GetRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //var response = instance.GetRule(storeId, ruleId);
            //Assert.IsInstanceOf<Rule> (response, "response is Rule");
        }
        
        /// <summary>
        /// Test GetRules
        /// </summary>
        [Test]
        public void GetRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetRules(storeId);
            //Assert.IsInstanceOf<Rules> (response, "response is Rules");
        }
        
        /// <summary>
        /// Test GetRulesExecutions
        /// </summary>
        [Test]
        public void GetRulesExecutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? pageNumber = null;
            //int? pageSize = null;
            //var response = instance.GetRulesExecutions(storeId, pageNumber, pageSize);
            //Assert.IsInstanceOf<RuleExecutionReportings> (response, "response is RuleExecutionReportings");
        }
        
        /// <summary>
        /// Test GetStoreReportByCategory
        /// </summary>
        [Test]
        public void GetStoreReportByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByCategoryRequest request = null;
            //var response = instance.GetStoreReportByCategory(storeId, request);
            //Assert.IsInstanceOf<ReportByCategoryResponse> (response, "response is ReportByCategoryResponse");
        }
        
        /// <summary>
        /// Test GetStoreReportByChannel
        /// </summary>
        [Test]
        public void GetStoreReportByChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByChannelRequest request = null;
            //var response = instance.GetStoreReportByChannel(storeId, request);
            //Assert.IsInstanceOf<ReportByChannelResponse> (response, "response is ReportByChannelResponse");
        }
        
        /// <summary>
        /// Test GetStoreReportByDay
        /// </summary>
        [Test]
        public void GetStoreReportByDayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByDayRequest request = null;
            //var response = instance.GetStoreReportByDay(storeId, request);
            //Assert.IsInstanceOf<ReportByDayResponse> (response, "response is ReportByDayResponse");
        }
        
        /// <summary>
        /// Test GetStoreReportByDayExport
        /// </summary>
        [Test]
        public void GetStoreReportByDayExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByDayRequest request = null;
            //var response = instance.GetStoreReportByDayExport(storeId, format, request);
            //Assert.IsInstanceOf<List<BeezUPCommonLink2>> (response, "response is List<BeezUPCommonLink2>");
        }
        
        /// <summary>
        /// Test GetStoreReportByProduct
        /// </summary>
        [Test]
        public void GetStoreReportByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByProductRequest request = null;
            //var response = instance.GetStoreReportByProduct(storeId, request);
            //Assert.IsInstanceOf<ReportByProductResponse> (response, "response is ReportByProductResponse");
        }
        
        /// <summary>
        /// Test GetStoreTrackedClicks
        /// </summary>
        [Test]
        public void GetStoreTrackedClicksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? count = null;
            //var response = instance.GetStoreTrackedClicks(storeId, count);
            //Assert.IsInstanceOf<TrackedClicks> (response, "response is TrackedClicks");
        }
        
        /// <summary>
        /// Test GetStoreTrackedExternalOrders
        /// </summary>
        [Test]
        public void GetStoreTrackedExternalOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? count = null;
            //var response = instance.GetStoreTrackedExternalOrders(storeId, count);
            //Assert.IsInstanceOf<TrackedExternalOrders> (response, "response is TrackedExternalOrders");
        }
        
        /// <summary>
        /// Test GetStoreTrackedOrders
        /// </summary>
        [Test]
        public void GetStoreTrackedOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? count = null;
            //var response = instance.GetStoreTrackedOrders(storeId, count);
            //Assert.IsInstanceOf<TrackedOrders> (response, "response is TrackedOrders");
        }
        
        /// <summary>
        /// Test GetStoreTrackingStatus
        /// </summary>
        [Test]
        public void GetStoreTrackingStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetStoreTrackingStatus(storeId);
            //Assert.IsInstanceOf<StoreTrackingStatus> (response, "response is StoreTrackingStatus");
        }
        
        /// <summary>
        /// Test GetTrackingStatus
        /// </summary>
        [Test]
        public void GetTrackingStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTrackingStatus();
            //Assert.IsInstanceOf<TrackingStatus> (response, "response is TrackingStatus");
        }
        
        /// <summary>
        /// Test MoveDownRule
        /// </summary>
        [Test]
        public void MoveDownRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.MoveDownRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test MoveUpRule
        /// </summary>
        [Test]
        public void MoveUpRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.MoveUpRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test Optimise
        /// </summary>
        [Test]
        public void OptimiseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string actionName = null;
            //OptimiseRequest request = null;
            //instance.Optimise(storeId, actionName, request);
            
        }
        
        /// <summary>
        /// Test OptimiseByCategory
        /// </summary>
        [Test]
        public void OptimiseByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string catalogCategoryId = null;
            //string actionName = null;
            //List<string> request = null;
            //instance.OptimiseByCategory(storeId, catalogCategoryId, actionName, request);
            
        }
        
        /// <summary>
        /// Test OptimiseByChannel
        /// </summary>
        [Test]
        public void OptimiseByChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string channelId = null;
            //string actionName = null;
            //instance.OptimiseByChannel(storeId, channelId, actionName);
            
        }
        
        /// <summary>
        /// Test OptimiseByProduct
        /// </summary>
        [Test]
        public void OptimiseByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string productId = null;
            //string actionName = null;
            //List<string> request = null;
            //instance.OptimiseByProduct(storeId, productId, actionName, request);
            
        }
        
        /// <summary>
        /// Test RunRule
        /// </summary>
        [Test]
        public void RunRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //instance.RunRule(storeId, ruleId);
            
        }
        
        /// <summary>
        /// Test RunRules
        /// </summary>
        [Test]
        public void RunRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //instance.RunRules(storeId);
            
        }
        
        /// <summary>
        /// Test SaveReportFilter
        /// </summary>
        [Test]
        public void SaveReportFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string reportFilterId = null;
            //SaveReportFilterRequest reportFilter = null;
            //instance.SaveReportFilter(storeId, reportFilterId, reportFilter);
            
        }
        
        /// <summary>
        /// Test UpdateRule
        /// </summary>
        [Test]
        public void UpdateRuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string ruleId = null;
            //UpdateRuleRequest request = null;
            //instance.UpdateRule(storeId, ruleId, request);
            
        }
        
    }

}
