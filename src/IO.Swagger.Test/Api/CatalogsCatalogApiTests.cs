/* 
 * Public - Security
 *
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CatalogsCatalogApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CatalogsCatalogApiTests
    {
        private CatalogsCatalogApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CatalogsCatalogApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CatalogsCatalogApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CatalogsCatalogApi
            //Assert.IsInstanceOfType(typeof(CatalogsCatalogApi), instance, "instance is a CatalogsCatalogApi");
        }

        
        /// <summary>
        /// Test CatalogChangeCatalogColumnUserName
        /// </summary>
        [Test]
        public void CatalogChangeCatalogColumnUserNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //ChangeUserColumnNameRequest request = null;
            //instance.CatalogChangeCatalogColumnUserName(storeId, columnId, request);
            
        }
        
        /// <summary>
        /// Test CatalogChangeCustomColumnExpression
        /// </summary>
        [Test]
        public void CatalogChangeCustomColumnExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //ChangeCustomColumnExpressionRequest request = null;
            //instance.CatalogChangeCustomColumnExpression(storeId, columnId, request);
            
        }
        
        /// <summary>
        /// Test CatalogChangeCustomColumnUserName
        /// </summary>
        [Test]
        public void CatalogChangeCustomColumnUserNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //ChangeUserColumnNameRequest request = null;
            //instance.CatalogChangeCustomColumnUserName(storeId, columnId, request);
            
        }
        
        /// <summary>
        /// Test CatalogComputeExpression
        /// </summary>
        [Test]
        public void CatalogComputeExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ComputeExpressionRequest request = null;
            //var response = instance.CatalogComputeExpression(storeId, request);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CatalogDeleteCustomColumn
        /// </summary>
        [Test]
        public void CatalogDeleteCustomColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //instance.CatalogDeleteCustomColumn(storeId, columnId);
            
        }
        
        /// <summary>
        /// Test CatalogGetCatalogColumns
        /// </summary>
        [Test]
        public void CatalogGetCatalogColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.CatalogGetCatalogColumns(storeId);
            //Assert.IsInstanceOf<CatalogColumns> (response, "response is CatalogColumns");
        }
        
        /// <summary>
        /// Test CatalogGetCategories
        /// </summary>
        [Test]
        public void CatalogGetCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //List<string> acceptEncoding = null;
            //var response = instance.CatalogGetCategories(storeId, acceptEncoding);
            //Assert.IsInstanceOf<Categories> (response, "response is Categories");
        }
        
        /// <summary>
        /// Test CatalogGetCustomColumnExpression
        /// </summary>
        [Test]
        public void CatalogGetCustomColumnExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //var response = instance.CatalogGetCustomColumnExpression(storeId, columnId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CatalogGetCustomColumns
        /// </summary>
        [Test]
        public void CatalogGetCustomColumnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.CatalogGetCustomColumns(storeId);
            //Assert.IsInstanceOf<CustomColumns> (response, "response is CustomColumns");
        }
        
        /// <summary>
        /// Test CatalogGetProduct
        /// </summary>
        [Test]
        public void CatalogGetProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string productId = null;
            //var response = instance.CatalogGetProduct(storeId, productId);
            //Assert.IsInstanceOf<Product> (response, "response is Product");
        }
        
        /// <summary>
        /// Test CatalogGetProducts
        /// </summary>
        [Test]
        public void CatalogGetProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //GetProductsRequest request = null;
            //var response = instance.CatalogGetProducts(storeId, request);
            //Assert.IsInstanceOf<Products> (response, "response is Products");
        }
        
        /// <summary>
        /// Test CatalogGetRandomProducts
        /// </summary>
        [Test]
        public void CatalogGetRandomProductsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //int? count = null;
            //var response = instance.CatalogGetRandomProducts(storeId, count);
            //Assert.IsInstanceOf<Products> (response, "response is Products");
        }
        
        /// <summary>
        /// Test CatalogSaveCustomColumn
        /// </summary>
        [Test]
        public void CatalogSaveCustomColumnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string columnId = null;
            //CreateCustomColumnRequest request = null;
            //instance.CatalogSaveCustomColumn(storeId, columnId, request);
            
        }
        
        /// <summary>
        /// Test ImportationGetManualUpdateLastInputConfig
        /// </summary>
        [Test]
        public void ImportationGetManualUpdateLastInputConfigTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.ImportationGetManualUpdateLastInputConfig(storeId);
            //Assert.IsInstanceOf<LastManualImportInputConfiguration> (response, "response is LastManualImportInputConfiguration");
        }
        
    }

}
