/* 
 * Analytics
 *
 * This API will help you to manage the tracking of your clicks and your sales, get reporting on this trackings and put in place rules based on this reporting to automatically optimize your channel catalogs. \\ Also, you will be able to consult the rule execution reporting. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the latest clicks tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The click&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>TrackedClicks</returns>
        TrackedClicks GetStoreTrackedClicks (string storeId, int? count = null);

        /// <summary>
        /// Get the latest clicks tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The click&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>ApiResponse of TrackedClicks</returns>
        ApiResponse<TrackedClicks> GetStoreTrackedClicksWithHttpInfo (string storeId, int? count = null);
        /// <summary>
        /// Get the latest external orders tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The external order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>TrackedExternalOrders</returns>
        TrackedExternalOrders GetStoreTrackedExternalOrders (string storeId, int? count = null);

        /// <summary>
        /// Get the latest external orders tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The external order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>ApiResponse of TrackedExternalOrders</returns>
        ApiResponse<TrackedExternalOrders> GetStoreTrackedExternalOrdersWithHttpInfo (string storeId, int? count = null);
        /// <summary>
        /// Get the latest orders tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>TrackedOrders</returns>
        TrackedOrders GetStoreTrackedOrders (string storeId, int? count = null);

        /// <summary>
        /// Get the latest orders tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>ApiResponse of TrackedOrders</returns>
        ApiResponse<TrackedOrders> GetStoreTrackedOrdersWithHttpInfo (string storeId, int? count = null);
        /// <summary>
        /// Get store tracking synchronization status
        /// </summary>
        /// <remarks>
        /// Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>StoreTrackingStatus</returns>
        StoreTrackingStatus GetStoreTrackingStatus (string storeId);

        /// <summary>
        /// Get store tracking synchronization status
        /// </summary>
        /// <remarks>
        /// Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>ApiResponse of StoreTrackingStatus</returns>
        ApiResponse<StoreTrackingStatus> GetStoreTrackingStatusWithHttpInfo (string storeId);
        /// <summary>
        /// Display the synchronization status of the clicks and orders
        /// </summary>
        /// <remarks>
        /// Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TrackingStatus</returns>
        TrackingStatus GetTrackingStatus ();

        /// <summary>
        /// Display the synchronization status of the clicks and orders
        /// </summary>
        /// <remarks>
        /// Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TrackingStatus</returns>
        ApiResponse<TrackingStatus> GetTrackingStatusWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get the latest clicks tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The click&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of TrackedClicks</returns>
        System.Threading.Tasks.Task<TrackedClicks> GetStoreTrackedClicksAsync (string storeId, int? count = null);

        /// <summary>
        /// Get the latest clicks tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The click&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (TrackedClicks)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackedClicks>> GetStoreTrackedClicksAsyncWithHttpInfo (string storeId, int? count = null);
        /// <summary>
        /// Get the latest external orders tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The external order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of TrackedExternalOrders</returns>
        System.Threading.Tasks.Task<TrackedExternalOrders> GetStoreTrackedExternalOrdersAsync (string storeId, int? count = null);

        /// <summary>
        /// Get the latest external orders tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The external order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (TrackedExternalOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackedExternalOrders>> GetStoreTrackedExternalOrdersAsyncWithHttpInfo (string storeId, int? count = null);
        /// <summary>
        /// Get the latest orders tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of TrackedOrders</returns>
        System.Threading.Tasks.Task<TrackedOrders> GetStoreTrackedOrdersAsync (string storeId, int? count = null);

        /// <summary>
        /// Get the latest orders tracked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (TrackedOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackedOrders>> GetStoreTrackedOrdersAsyncWithHttpInfo (string storeId, int? count = null);
        /// <summary>
        /// Get store tracking synchronization status
        /// </summary>
        /// <remarks>
        /// Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>Task of StoreTrackingStatus</returns>
        System.Threading.Tasks.Task<StoreTrackingStatus> GetStoreTrackingStatusAsync (string storeId);

        /// <summary>
        /// Get store tracking synchronization status
        /// </summary>
        /// <remarks>
        /// Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>Task of ApiResponse (StoreTrackingStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoreTrackingStatus>> GetStoreTrackingStatusAsyncWithHttpInfo (string storeId);
        /// <summary>
        /// Display the synchronization status of the clicks and orders
        /// </summary>
        /// <remarks>
        /// Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TrackingStatus</returns>
        System.Threading.Tasks.Task<TrackingStatus> GetTrackingStatusAsync ();

        /// <summary>
        /// Display the synchronization status of the clicks and orders
        /// </summary>
        /// <remarks>
        /// Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TrackingStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<TrackingStatus>> GetTrackingStatusAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrackingApi : ITrackingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackingApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrackingApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get the latest clicks tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The click&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>TrackedClicks</returns>
        public TrackedClicks GetStoreTrackedClicks (string storeId, int? count = null)
        {
             ApiResponse<TrackedClicks> localVarResponse = GetStoreTrackedClicksWithHttpInfo(storeId, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the latest clicks tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The click&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>ApiResponse of TrackedClicks</returns>
        public ApiResponse< TrackedClicks > GetStoreTrackedClicksWithHttpInfo (string storeId, int? count = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling TrackingApi->GetStoreTrackedClicks");

            var localVarPath = "/{storeId}/tracking/clicks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreTrackedClicks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackedClicks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackedClicks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackedClicks)));
            
        }

        /// <summary>
        /// Get the latest clicks tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The click&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of TrackedClicks</returns>
        public async System.Threading.Tasks.Task<TrackedClicks> GetStoreTrackedClicksAsync (string storeId, int? count = null)
        {
             ApiResponse<TrackedClicks> localVarResponse = await GetStoreTrackedClicksAsyncWithHttpInfo(storeId, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the latest clicks tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The click&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (TrackedClicks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackedClicks>> GetStoreTrackedClicksAsyncWithHttpInfo (string storeId, int? count = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling TrackingApi->GetStoreTrackedClicks");

            var localVarPath = "/{storeId}/tracking/clicks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreTrackedClicks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackedClicks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackedClicks) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackedClicks)));
            
        }

        /// <summary>
        /// Get the latest external orders tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The external order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>TrackedExternalOrders</returns>
        public TrackedExternalOrders GetStoreTrackedExternalOrders (string storeId, int? count = null)
        {
             ApiResponse<TrackedExternalOrders> localVarResponse = GetStoreTrackedExternalOrdersWithHttpInfo(storeId, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the latest external orders tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The external order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>ApiResponse of TrackedExternalOrders</returns>
        public ApiResponse< TrackedExternalOrders > GetStoreTrackedExternalOrdersWithHttpInfo (string storeId, int? count = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling TrackingApi->GetStoreTrackedExternalOrders");

            var localVarPath = "/{storeId}/tracking/externalorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreTrackedExternalOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackedExternalOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackedExternalOrders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackedExternalOrders)));
            
        }

        /// <summary>
        /// Get the latest external orders tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The external order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of TrackedExternalOrders</returns>
        public async System.Threading.Tasks.Task<TrackedExternalOrders> GetStoreTrackedExternalOrdersAsync (string storeId, int? count = null)
        {
             ApiResponse<TrackedExternalOrders> localVarResponse = await GetStoreTrackedExternalOrdersAsyncWithHttpInfo(storeId, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the latest external orders tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The external order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (TrackedExternalOrders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackedExternalOrders>> GetStoreTrackedExternalOrdersAsyncWithHttpInfo (string storeId, int? count = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling TrackingApi->GetStoreTrackedExternalOrders");

            var localVarPath = "/{storeId}/tracking/externalorders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreTrackedExternalOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackedExternalOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackedExternalOrders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackedExternalOrders)));
            
        }

        /// <summary>
        /// Get the latest orders tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>TrackedOrders</returns>
        public TrackedOrders GetStoreTrackedOrders (string storeId, int? count = null)
        {
             ApiResponse<TrackedOrders> localVarResponse = GetStoreTrackedOrdersWithHttpInfo(storeId, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the latest orders tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>ApiResponse of TrackedOrders</returns>
        public ApiResponse< TrackedOrders > GetStoreTrackedOrdersWithHttpInfo (string storeId, int? count = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling TrackingApi->GetStoreTrackedOrders");

            var localVarPath = "/{storeId}/tracking/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreTrackedOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackedOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackedOrders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackedOrders)));
            
        }

        /// <summary>
        /// Get the latest orders tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of TrackedOrders</returns>
        public async System.Threading.Tasks.Task<TrackedOrders> GetStoreTrackedOrdersAsync (string storeId, int? count = null)
        {
             ApiResponse<TrackedOrders> localVarResponse = await GetStoreTrackedOrdersAsyncWithHttpInfo(storeId, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the latest orders tracked 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <param name="count">The order&#39;s count you want to get (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (TrackedOrders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackedOrders>> GetStoreTrackedOrdersAsyncWithHttpInfo (string storeId, int? count = null)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling TrackingApi->GetStoreTrackedOrders");

            var localVarPath = "/{storeId}/tracking/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreTrackedOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackedOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackedOrders) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackedOrders)));
            
        }

        /// <summary>
        /// Get store tracking synchronization status Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>StoreTrackingStatus</returns>
        public StoreTrackingStatus GetStoreTrackingStatus (string storeId)
        {
             ApiResponse<StoreTrackingStatus> localVarResponse = GetStoreTrackingStatusWithHttpInfo(storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get store tracking synchronization status Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>ApiResponse of StoreTrackingStatus</returns>
        public ApiResponse< StoreTrackingStatus > GetStoreTrackingStatusWithHttpInfo (string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling TrackingApi->GetStoreTrackingStatus");

            var localVarPath = "/{storeId}/tracking/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreTrackingStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoreTrackingStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoreTrackingStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoreTrackingStatus)));
            
        }

        /// <summary>
        /// Get store tracking synchronization status Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>Task of StoreTrackingStatus</returns>
        public async System.Threading.Tasks.Task<StoreTrackingStatus> GetStoreTrackingStatusAsync (string storeId)
        {
             ApiResponse<StoreTrackingStatus> localVarResponse = await GetStoreTrackingStatusAsyncWithHttpInfo(storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get store tracking synchronization status Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">Your store identifier</param>
        /// <returns>Task of ApiResponse (StoreTrackingStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoreTrackingStatus>> GetStoreTrackingStatusAsyncWithHttpInfo (string storeId)
        {
            // verify the required parameter 'storeId' is set
            if (storeId == null)
                throw new ApiException(400, "Missing required parameter 'storeId' when calling TrackingApi->GetStoreTrackingStatus");

            var localVarPath = "/{storeId}/tracking/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (storeId != null) localVarPathParams.Add("storeId", Configuration.ApiClient.ParameterToString(storeId)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStoreTrackingStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoreTrackingStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StoreTrackingStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoreTrackingStatus)));
            
        }

        /// <summary>
        /// Display the synchronization status of the clicks and orders Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TrackingStatus</returns>
        public TrackingStatus GetTrackingStatus ()
        {
             ApiResponse<TrackingStatus> localVarResponse = GetTrackingStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Display the synchronization status of the clicks and orders Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TrackingStatus</returns>
        public ApiResponse< TrackingStatus > GetTrackingStatusWithHttpInfo ()
        {

            var localVarPath = "/tracking/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrackingStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackingStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackingStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackingStatus)));
            
        }

        /// <summary>
        /// Display the synchronization status of the clicks and orders Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TrackingStatus</returns>
        public async System.Threading.Tasks.Task<TrackingStatus> GetTrackingStatusAsync ()
        {
             ApiResponse<TrackingStatus> localVarResponse = await GetTrackingStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Display the synchronization status of the clicks and orders Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TrackingStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TrackingStatus>> GetTrackingStatusAsyncWithHttpInfo ()
        {

            var localVarPath = "/tracking/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] = Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrackingStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TrackingStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TrackingStatus) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TrackingStatus)));
            
        }

    }
}
