/* 
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describe how to read the file. If FileFormatStrategy is CSV, csvFileReadProperties is required. Otherwise the xmlFileReadProperties is required. 
    /// </summary>
    [DataContract]
    public partial class InputFileReadConfiguration :  IEquatable<InputFileReadConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFileReadConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputFileReadConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFileReadConfiguration" /> class.
        /// </summary>
        /// <param name="Format">Format (required).</param>
        /// <param name="EncodingTypeName">The encoding type. UTF-8 by default. (default to &quot;UTF-8&quot;).</param>
        /// <param name="CultureName">The culture name of the file.  (i.e. fr-FR). If null then Invariant culture will be used. (default to &quot;&quot;).</param>
        /// <param name="CsvFileReadProperties">CsvFileReadProperties.</param>
        /// <param name="XmlFileReadProperties">XmlFileReadProperties.</param>
        public InputFileReadConfiguration(FileFormatStrategy Format = default(FileFormatStrategy), string EncodingTypeName = "UTF-8", string CultureName = "", InputFileReadCsvConfiguration CsvFileReadProperties = default(InputFileReadCsvConfiguration), InputFileReadXmlConfiguration XmlFileReadProperties = default(InputFileReadXmlConfiguration))
        {
            // to ensure "Format" is required (not null)
            if (Format == null)
            {
                throw new InvalidDataException("Format is a required property for InputFileReadConfiguration and cannot be null");
            }
            else
            {
                this.Format = Format;
            }
            // use default value if no "EncodingTypeName" provided
            if (EncodingTypeName == null)
            {
                this.EncodingTypeName = "UTF-8";
            }
            else
            {
                this.EncodingTypeName = EncodingTypeName;
            }
            // use default value if no "CultureName" provided
            if (CultureName == null)
            {
                this.CultureName = "";
            }
            else
            {
                this.CultureName = CultureName;
            }
            this.CsvFileReadProperties = CsvFileReadProperties;
            this.XmlFileReadProperties = XmlFileReadProperties;
        }
        
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FileFormatStrategy Format { get; set; }
        /// <summary>
        /// The encoding type. UTF-8 by default.
        /// </summary>
        /// <value>The encoding type. UTF-8 by default.</value>
        [DataMember(Name="encodingTypeName", EmitDefaultValue=false)]
        public string EncodingTypeName { get; set; }
        /// <summary>
        /// The culture name of the file.  (i.e. fr-FR). If null then Invariant culture will be used.
        /// </summary>
        /// <value>The culture name of the file.  (i.e. fr-FR). If null then Invariant culture will be used.</value>
        [DataMember(Name="cultureName", EmitDefaultValue=false)]
        public string CultureName { get; set; }
        /// <summary>
        /// Gets or Sets CsvFileReadProperties
        /// </summary>
        [DataMember(Name="csvFileReadProperties", EmitDefaultValue=false)]
        public InputFileReadCsvConfiguration CsvFileReadProperties { get; set; }
        /// <summary>
        /// Gets or Sets XmlFileReadProperties
        /// </summary>
        [DataMember(Name="xmlFileReadProperties", EmitDefaultValue=false)]
        public InputFileReadXmlConfiguration XmlFileReadProperties { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputFileReadConfiguration {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  EncodingTypeName: ").Append(EncodingTypeName).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  CsvFileReadProperties: ").Append(CsvFileReadProperties).Append("\n");
            sb.Append("  XmlFileReadProperties: ").Append(XmlFileReadProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InputFileReadConfiguration);
        }

        /// <summary>
        /// Returns true if InputFileReadConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of InputFileReadConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputFileReadConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) && 
                (
                    this.EncodingTypeName == other.EncodingTypeName ||
                    this.EncodingTypeName != null &&
                    this.EncodingTypeName.Equals(other.EncodingTypeName)
                ) && 
                (
                    this.CultureName == other.CultureName ||
                    this.CultureName != null &&
                    this.CultureName.Equals(other.CultureName)
                ) && 
                (
                    this.CsvFileReadProperties == other.CsvFileReadProperties ||
                    this.CsvFileReadProperties != null &&
                    this.CsvFileReadProperties.Equals(other.CsvFileReadProperties)
                ) && 
                (
                    this.XmlFileReadProperties == other.XmlFileReadProperties ||
                    this.XmlFileReadProperties != null &&
                    this.XmlFileReadProperties.Equals(other.XmlFileReadProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.EncodingTypeName != null)
                    hash = hash * 59 + this.EncodingTypeName.GetHashCode();
                if (this.CultureName != null)
                    hash = hash * 59 + this.CultureName.GetHashCode();
                if (this.CsvFileReadProperties != null)
                    hash = hash * 59 + this.CsvFileReadProperties.GetHashCode();
                if (this.XmlFileReadProperties != null)
                    hash = hash * 59 + this.XmlFileReadProperties.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
