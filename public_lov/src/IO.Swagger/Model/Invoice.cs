/* 
 * Customer
 *
 * This API will gives you the ability to : - manage your account - manage your stores - shares your stores with your friends - manage your contracts - access to your invoices 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Invoice
    /// </summary>
    [DataContract]
    public partial class Invoice :  IEquatable<Invoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Invoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Invoice" /> class.
        /// </summary>
        /// <param name="InvoiceDate">The invoice date (required).</param>
        /// <param name="ContractId">ContractId (required).</param>
        /// <param name="InvoiceNumber">InvoiceNumber (required).</param>
        /// <param name="Amount">The amount of your invoice (required).</param>
        /// <param name="AmountToBePaid">The remaining amount to be paid for this invoice (required).</param>
        /// <param name="CurrencyCode">CurrencyCode (required).</param>
        /// <param name="PaymentStatus">PaymentStatus (required).</param>
        /// <param name="DueDate">DueDate (required).</param>
        /// <param name="InvoiceUrl">The url of the invoice document.</param>
        public Invoice(DateTime? InvoiceDate = default(DateTime?), ContractId ContractId = default(ContractId), InvoiceNumber InvoiceNumber = default(InvoiceNumber), double? Amount = default(double?), double? AmountToBePaid = default(double?), BeezUPCommonCurrencyCode CurrencyCode = default(BeezUPCommonCurrencyCode), InvoicePaymentStatus PaymentStatus = default(InvoicePaymentStatus), DateTime? DueDate = default(DateTime?), string InvoiceUrl = default(string))
        {
            // to ensure "InvoiceDate" is required (not null)
            if (InvoiceDate == null)
            {
                throw new InvalidDataException("InvoiceDate is a required property for Invoice and cannot be null");
            }
            else
            {
                this.InvoiceDate = InvoiceDate;
            }
            // to ensure "ContractId" is required (not null)
            if (ContractId == null)
            {
                throw new InvalidDataException("ContractId is a required property for Invoice and cannot be null");
            }
            else
            {
                this.ContractId = ContractId;
            }
            // to ensure "InvoiceNumber" is required (not null)
            if (InvoiceNumber == null)
            {
                throw new InvalidDataException("InvoiceNumber is a required property for Invoice and cannot be null");
            }
            else
            {
                this.InvoiceNumber = InvoiceNumber;
            }
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for Invoice and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "AmountToBePaid" is required (not null)
            if (AmountToBePaid == null)
            {
                throw new InvalidDataException("AmountToBePaid is a required property for Invoice and cannot be null");
            }
            else
            {
                this.AmountToBePaid = AmountToBePaid;
            }
            // to ensure "CurrencyCode" is required (not null)
            if (CurrencyCode == null)
            {
                throw new InvalidDataException("CurrencyCode is a required property for Invoice and cannot be null");
            }
            else
            {
                this.CurrencyCode = CurrencyCode;
            }
            // to ensure "PaymentStatus" is required (not null)
            if (PaymentStatus == null)
            {
                throw new InvalidDataException("PaymentStatus is a required property for Invoice and cannot be null");
            }
            else
            {
                this.PaymentStatus = PaymentStatus;
            }
            // to ensure "DueDate" is required (not null)
            if (DueDate == null)
            {
                throw new InvalidDataException("DueDate is a required property for Invoice and cannot be null");
            }
            else
            {
                this.DueDate = DueDate;
            }
            this.InvoiceUrl = InvoiceUrl;
        }
        
        /// <summary>
        /// The invoice date
        /// </summary>
        /// <value>The invoice date</value>
        [DataMember(Name="invoiceDate", EmitDefaultValue=false)]
        public DateTime? InvoiceDate { get; set; }
        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public ContractId ContractId { get; set; }
        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public InvoiceNumber InvoiceNumber { get; set; }
        /// <summary>
        /// The amount of your invoice
        /// </summary>
        /// <value>The amount of your invoice</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }
        /// <summary>
        /// The remaining amount to be paid for this invoice
        /// </summary>
        /// <value>The remaining amount to be paid for this invoice</value>
        [DataMember(Name="amountToBePaid", EmitDefaultValue=false)]
        public double? AmountToBePaid { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public BeezUPCommonCurrencyCode CurrencyCode { get; set; }
        /// <summary>
        /// Gets or Sets PaymentStatus
        /// </summary>
        [DataMember(Name="paymentStatus", EmitDefaultValue=false)]
        public InvoicePaymentStatus PaymentStatus { get; set; }
        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }
        /// <summary>
        /// The url of the invoice document
        /// </summary>
        /// <value>The url of the invoice document</value>
        [DataMember(Name="invoiceUrl", EmitDefaultValue=false)]
        public string InvoiceUrl { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Invoice {\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountToBePaid: ").Append(AmountToBePaid).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  InvoiceUrl: ").Append(InvoiceUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Invoice);
        }

        /// <summary>
        /// Returns true if Invoice instances are equal
        /// </summary>
        /// <param name="other">Instance of Invoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Invoice other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.InvoiceDate == other.InvoiceDate ||
                    this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(other.InvoiceDate)
                ) && 
                (
                    this.ContractId == other.ContractId ||
                    this.ContractId != null &&
                    this.ContractId.Equals(other.ContractId)
                ) && 
                (
                    this.InvoiceNumber == other.InvoiceNumber ||
                    this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(other.InvoiceNumber)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.AmountToBePaid == other.AmountToBePaid ||
                    this.AmountToBePaid != null &&
                    this.AmountToBePaid.Equals(other.AmountToBePaid)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.PaymentStatus == other.PaymentStatus ||
                    this.PaymentStatus != null &&
                    this.PaymentStatus.Equals(other.PaymentStatus)
                ) && 
                (
                    this.DueDate == other.DueDate ||
                    this.DueDate != null &&
                    this.DueDate.Equals(other.DueDate)
                ) && 
                (
                    this.InvoiceUrl == other.InvoiceUrl ||
                    this.InvoiceUrl != null &&
                    this.InvoiceUrl.Equals(other.InvoiceUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.InvoiceDate != null)
                    hash = hash * 59 + this.InvoiceDate.GetHashCode();
                if (this.ContractId != null)
                    hash = hash * 59 + this.ContractId.GetHashCode();
                if (this.InvoiceNumber != null)
                    hash = hash * 59 + this.InvoiceNumber.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.AmountToBePaid != null)
                    hash = hash * 59 + this.AmountToBePaid.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.PaymentStatus != null)
                    hash = hash * 59 + this.PaymentStatus.GetHashCode();
                if (this.DueDate != null)
                    hash = hash * 59 + this.DueDate.GetHashCode();
                if (this.InvoiceUrl != null)
                    hash = hash * 59 + this.InvoiceUrl.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
