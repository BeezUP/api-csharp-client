/* 
 * Marketplaces - Orders
 *
 * The features exposed in this API are centered around managing Orders harvested from your configured marketplaces.\\ This includes: - fetching current information (as known by BeezUP) for a single or multiple Orders, - requesting Order harvest to synchronize your marketplaces and BeezUP accounts, - changing BeezUP data and requesting changes to your marketplaces (accepting, shipping, etc), - configuring automatic changes to marketplace based our newly fetched data, - creating and exporting reports for your Orders. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines orderExportationReportingProcessingStatus
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum OrderExportationReportingProcessingStatus
    {
        
        /// <summary>
        /// Enum None for "None"
        /// </summary>
        [EnumMember(Value = "None")]
        None,
        
        /// <summary>
        /// Enum InProgress for "InProgress"
        /// </summary>
        [EnumMember(Value = "InProgress")]
        InProgress,
        
        /// <summary>
        /// Enum Done for "Done"
        /// </summary>
        [EnumMember(Value = "Done")]
        Done,
        
        /// <summary>
        /// Enum Failed for "Failed"
        /// </summary>
        [EnumMember(Value = "Failed")]
        Failed,
        
        /// <summary>
        /// Enum AlreadyInProgress for "AlreadyInProgress"
        /// </summary>
        [EnumMember(Value = "AlreadyInProgress")]
        AlreadyInProgress,
        
        /// <summary>
        /// Enum Aborted for "Aborted"
        /// </summary>
        [EnumMember(Value = "Aborted")]
        Aborted,
        
        /// <summary>
        /// Enum Suspended for "Suspended"
        /// </summary>
        [EnumMember(Value = "Suspended")]
        Suspended
    }

}
