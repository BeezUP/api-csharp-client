/* 
 * Channels
 *
 * This api allows you to get access to your channels
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChannelInfoKeyNumbers
    /// </summary>
    [DataContract]
    public partial class ChannelInfoKeyNumbers :  IEquatable<ChannelInfoKeyNumbers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelInfoKeyNumbers" /> class.
        /// </summary>
        /// <param name="Products">The estimated product count of the channel.</param>
        /// <param name="Categories">The estimated category count of the channel.</param>
        /// <param name="Stores">The estimated store count of the channel.</param>
        /// <param name="ViewsPerMonth">The estimated view count per month of the channel.</param>
        public ChannelInfoKeyNumbers(string Products = default(string), string Categories = default(string), string Stores = default(string), string ViewsPerMonth = default(string))
        {
            this.Products = Products;
            this.Categories = Categories;
            this.Stores = Stores;
            this.ViewsPerMonth = ViewsPerMonth;
        }
        
        /// <summary>
        /// The estimated product count of the channel
        /// </summary>
        /// <value>The estimated product count of the channel</value>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public string Products { get; set; }
        /// <summary>
        /// The estimated category count of the channel
        /// </summary>
        /// <value>The estimated category count of the channel</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public string Categories { get; set; }
        /// <summary>
        /// The estimated store count of the channel
        /// </summary>
        /// <value>The estimated store count of the channel</value>
        [DataMember(Name="stores", EmitDefaultValue=false)]
        public string Stores { get; set; }
        /// <summary>
        /// The estimated view count per month of the channel
        /// </summary>
        /// <value>The estimated view count per month of the channel</value>
        [DataMember(Name="viewsPerMonth", EmitDefaultValue=false)]
        public string ViewsPerMonth { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelInfoKeyNumbers {\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Stores: ").Append(Stores).Append("\n");
            sb.Append("  ViewsPerMonth: ").Append(ViewsPerMonth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelInfoKeyNumbers);
        }

        /// <summary>
        /// Returns true if ChannelInfoKeyNumbers instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelInfoKeyNumbers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelInfoKeyNumbers other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.Equals(other.Products)
                ) && 
                (
                    this.Categories == other.Categories ||
                    this.Categories != null &&
                    this.Categories.Equals(other.Categories)
                ) && 
                (
                    this.Stores == other.Stores ||
                    this.Stores != null &&
                    this.Stores.Equals(other.Stores)
                ) && 
                (
                    this.ViewsPerMonth == other.ViewsPerMonth ||
                    this.ViewsPerMonth != null &&
                    this.ViewsPerMonth.Equals(other.ViewsPerMonth)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                if (this.Categories != null)
                    hash = hash * 59 + this.Categories.GetHashCode();
                if (this.Stores != null)
                    hash = hash * 59 + this.Stores.GetHashCode();
                if (this.ViewsPerMonth != null)
                    hash = hash * 59 + this.ViewsPerMonth.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
