/* 
 * Customer
 *
 * This API will gives you the ability to : - manage your account - manage your stores - shares your stores with your friends - manage your contracts - access to your invoices 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompanyInfo
    /// </summary>
    [DataContract]
    public partial class CompanyInfo :  IEquatable<CompanyInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompanyInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInfo" /> class.
        /// </summary>
        /// <param name="Address">Address (required).</param>
        /// <param name="PostalCode">PostalCode (required).</param>
        /// <param name="City">City (required).</param>
        /// <param name="CountryIsoCodeAlpha3">CountryIsoCodeAlpha3 (required).</param>
        /// <param name="Company">Company (required).</param>
        /// <param name="VatNumber">VatNumber.</param>
        /// <param name="AccountingEmails">AccountingEmails.</param>
        public CompanyInfo(Address Address = default(Address), PostalCode PostalCode = default(PostalCode), City City = default(City), BeezUPCommonCountryIsoCodeAlpha3 CountryIsoCodeAlpha3 = default(BeezUPCommonCountryIsoCodeAlpha3), Company Company = default(Company), VatNumber VatNumber = default(VatNumber), AccountingEmails AccountingEmails = default(AccountingEmails))
        {
            // to ensure "Address" is required (not null)
            if (Address == null)
            {
                throw new InvalidDataException("Address is a required property for CompanyInfo and cannot be null");
            }
            else
            {
                this.Address = Address;
            }
            // to ensure "PostalCode" is required (not null)
            if (PostalCode == null)
            {
                throw new InvalidDataException("PostalCode is a required property for CompanyInfo and cannot be null");
            }
            else
            {
                this.PostalCode = PostalCode;
            }
            // to ensure "City" is required (not null)
            if (City == null)
            {
                throw new InvalidDataException("City is a required property for CompanyInfo and cannot be null");
            }
            else
            {
                this.City = City;
            }
            // to ensure "CountryIsoCodeAlpha3" is required (not null)
            if (CountryIsoCodeAlpha3 == null)
            {
                throw new InvalidDataException("CountryIsoCodeAlpha3 is a required property for CompanyInfo and cannot be null");
            }
            else
            {
                this.CountryIsoCodeAlpha3 = CountryIsoCodeAlpha3;
            }
            // to ensure "Company" is required (not null)
            if (Company == null)
            {
                throw new InvalidDataException("Company is a required property for CompanyInfo and cannot be null");
            }
            else
            {
                this.Company = Company;
            }
            this.VatNumber = VatNumber;
            this.AccountingEmails = AccountingEmails;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }
        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public PostalCode PostalCode { get; set; }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public City City { get; set; }
        /// <summary>
        /// Gets or Sets CountryIsoCodeAlpha3
        /// </summary>
        [DataMember(Name="countryIsoCodeAlpha3", EmitDefaultValue=false)]
        public BeezUPCommonCountryIsoCodeAlpha3 CountryIsoCodeAlpha3 { get; set; }
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public Company Company { get; set; }
        /// <summary>
        /// Gets or Sets VatNumber
        /// </summary>
        [DataMember(Name="vatNumber", EmitDefaultValue=false)]
        public VatNumber VatNumber { get; set; }
        /// <summary>
        /// Gets or Sets AccountingEmails
        /// </summary>
        [DataMember(Name="accountingEmails", EmitDefaultValue=false)]
        public AccountingEmails AccountingEmails { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyInfo {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CountryIsoCodeAlpha3: ").Append(CountryIsoCodeAlpha3).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  AccountingEmails: ").Append(AccountingEmails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CompanyInfo);
        }

        /// <summary>
        /// Returns true if CompanyInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of CompanyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.CountryIsoCodeAlpha3 == other.CountryIsoCodeAlpha3 ||
                    this.CountryIsoCodeAlpha3 != null &&
                    this.CountryIsoCodeAlpha3.Equals(other.CountryIsoCodeAlpha3)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.VatNumber == other.VatNumber ||
                    this.VatNumber != null &&
                    this.VatNumber.Equals(other.VatNumber)
                ) && 
                (
                    this.AccountingEmails == other.AccountingEmails ||
                    this.AccountingEmails != null &&
                    this.AccountingEmails.Equals(other.AccountingEmails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.CountryIsoCodeAlpha3 != null)
                    hash = hash * 59 + this.CountryIsoCodeAlpha3.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.VatNumber != null)
                    hash = hash * 59 + this.VatNumber.GetHashCode();
                if (this.AccountingEmails != null)
                    hash = hash * 59 + this.AccountingEmails.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
