/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describe a filter on a product&#39;s column
    /// </summary>
    [DataContract]
    public partial class ReportProductFilter :  IEquatable<ReportProductFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportProductFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportProductFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportProductFilter" /> class.
        /// </summary>
        /// <param name="ColumnId">The column identifier of your catalog or a custom column. (required).</param>
        /// <param name="OperatorName">OperatorName (required).</param>
        /// <param name="Values">Must be null if the operator is \&quot;IsNull\&quot; or \&quot;IsNotNull\&quot;. Can contains multiple value in case of \&quot;InList\&quot; operator. Otherwise a single value is expected..</param>
        public ReportProductFilter(string ColumnId = default(string), ReportProductFilterOperatorName OperatorName = default(ReportProductFilterOperatorName), List<string> Values = default(List<string>))
        {
            // to ensure "ColumnId" is required (not null)
            if (ColumnId == null)
            {
                throw new InvalidDataException("ColumnId is a required property for ReportProductFilter and cannot be null");
            }
            else
            {
                this.ColumnId = ColumnId;
            }
            // to ensure "OperatorName" is required (not null)
            if (OperatorName == null)
            {
                throw new InvalidDataException("OperatorName is a required property for ReportProductFilter and cannot be null");
            }
            else
            {
                this.OperatorName = OperatorName;
            }
            this.Values = Values;
        }
        
        /// <summary>
        /// The column identifier of your catalog or a custom column.
        /// </summary>
        /// <value>The column identifier of your catalog or a custom column.</value>
        [DataMember(Name="columnId", EmitDefaultValue=false)]
        public string ColumnId { get; set; }
        /// <summary>
        /// Gets or Sets OperatorName
        /// </summary>
        [DataMember(Name="operatorName", EmitDefaultValue=false)]
        public ReportProductFilterOperatorName OperatorName { get; set; }
        /// <summary>
        /// Must be null if the operator is \&quot;IsNull\&quot; or \&quot;IsNotNull\&quot;. Can contains multiple value in case of \&quot;InList\&quot; operator. Otherwise a single value is expected.
        /// </summary>
        /// <value>Must be null if the operator is \&quot;IsNull\&quot; or \&quot;IsNotNull\&quot;. Can contains multiple value in case of \&quot;InList\&quot; operator. Otherwise a single value is expected.</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportProductFilter {\n");
            sb.Append("  ColumnId: ").Append(ColumnId).Append("\n");
            sb.Append("  OperatorName: ").Append(OperatorName).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportProductFilter);
        }

        /// <summary>
        /// Returns true if ReportProductFilter instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportProductFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportProductFilter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ColumnId == other.ColumnId ||
                    this.ColumnId != null &&
                    this.ColumnId.Equals(other.ColumnId)
                ) && 
                (
                    this.OperatorName == other.OperatorName ||
                    this.OperatorName != null &&
                    this.OperatorName.Equals(other.OperatorName)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ColumnId != null)
                    hash = hash * 59 + this.ColumnId.GetHashCode();
                if (this.OperatorName != null)
                    hash = hash * 59 + this.OperatorName.GetHashCode();
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
