/* 
 * Public - Channels
 *
 * This api allows you to get access to the channels. The main use case is our public commercial web site.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPublicChannelsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// The channel list for one country
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIsoCode">The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry </param>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.</param>
        /// <returns>ChannelInfoList</returns>
        ChannelInfoList GetChannels (string countryIsoCode, List<string> acceptEncoding);

        /// <summary>
        /// The channel list for one country
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIsoCode">The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry </param>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.</param>
        /// <returns>ApiResponse of ChannelInfoList</returns>
        ApiResponse<ChannelInfoList> GetChannelsWithHttpInfo (string countryIsoCode, List<string> acceptEncoding);
        /// <summary>
        /// Get public channel index
        /// </summary>
        /// <remarks>
        /// Use this operation to get the correct link to the channels and to the list of values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PublicChannelIndex</returns>
        PublicChannelIndex GetChannelsIndex ();

        /// <summary>
        /// Get public channel index
        /// </summary>
        /// <remarks>
        /// Use this operation to get the correct link to the channels and to the list of values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PublicChannelIndex</returns>
        ApiResponse<PublicChannelIndex> GetChannelsIndexWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// The channel list for one country
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIsoCode">The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry </param>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.</param>
        /// <returns>Task of ChannelInfoList</returns>
        System.Threading.Tasks.Task<ChannelInfoList> GetChannelsAsync (string countryIsoCode, List<string> acceptEncoding);

        /// <summary>
        /// The channel list for one country
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIsoCode">The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry </param>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.</param>
        /// <returns>Task of ApiResponse (ChannelInfoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelInfoList>> GetChannelsAsyncWithHttpInfo (string countryIsoCode, List<string> acceptEncoding);
        /// <summary>
        /// Get public channel index
        /// </summary>
        /// <remarks>
        /// Use this operation to get the correct link to the channels and to the list of values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PublicChannelIndex</returns>
        System.Threading.Tasks.Task<PublicChannelIndex> GetChannelsIndexAsync ();

        /// <summary>
        /// Get public channel index
        /// </summary>
        /// <remarks>
        /// Use this operation to get the correct link to the channels and to the list of values
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PublicChannelIndex)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicChannelIndex>> GetChannelsIndexAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PublicChannelsApi : IPublicChannelsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicChannelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PublicChannelsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicChannelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PublicChannelsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// The channel list for one country 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIsoCode">The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry </param>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.</param>
        /// <returns>ChannelInfoList</returns>
        public ChannelInfoList GetChannels (string countryIsoCode, List<string> acceptEncoding)
        {
             ApiResponse<ChannelInfoList> localVarResponse = GetChannelsWithHttpInfo(countryIsoCode, acceptEncoding);
             return localVarResponse.Data;
        }

        /// <summary>
        /// The channel list for one country 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIsoCode">The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry </param>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.</param>
        /// <returns>ApiResponse of ChannelInfoList</returns>
        public ApiResponse< ChannelInfoList > GetChannelsWithHttpInfo (string countryIsoCode, List<string> acceptEncoding)
        {
            // verify the required parameter 'countryIsoCode' is set
            if (countryIsoCode == null)
                throw new ApiException(400, "Missing required parameter 'countryIsoCode' when calling PublicChannelsApi->GetChannels");
            // verify the required parameter 'acceptEncoding' is set
            if (acceptEncoding == null)
                throw new ApiException(400, "Missing required parameter 'acceptEncoding' when calling PublicChannelsApi->GetChannels");

            var localVarPath = "/{countryIsoCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (countryIsoCode != null) localVarPathParams.Add("countryIsoCode", Configuration.ApiClient.ParameterToString(countryIsoCode)); // path parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelInfoList)));
            
        }

        /// <summary>
        /// The channel list for one country 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIsoCode">The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry </param>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.</param>
        /// <returns>Task of ChannelInfoList</returns>
        public async System.Threading.Tasks.Task<ChannelInfoList> GetChannelsAsync (string countryIsoCode, List<string> acceptEncoding)
        {
             ApiResponse<ChannelInfoList> localVarResponse = await GetChannelsAsyncWithHttpInfo(countryIsoCode, acceptEncoding);
             return localVarResponse.Data;

        }

        /// <summary>
        /// The channel list for one country 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryIsoCode">The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry </param>
        /// <param name="acceptEncoding">Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.</param>
        /// <returns>Task of ApiResponse (ChannelInfoList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChannelInfoList>> GetChannelsAsyncWithHttpInfo (string countryIsoCode, List<string> acceptEncoding)
        {
            // verify the required parameter 'countryIsoCode' is set
            if (countryIsoCode == null)
                throw new ApiException(400, "Missing required parameter 'countryIsoCode' when calling PublicChannelsApi->GetChannels");
            // verify the required parameter 'acceptEncoding' is set
            if (acceptEncoding == null)
                throw new ApiException(400, "Missing required parameter 'acceptEncoding' when calling PublicChannelsApi->GetChannels");

            var localVarPath = "/{countryIsoCode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (countryIsoCode != null) localVarPathParams.Add("countryIsoCode", Configuration.ApiClient.ParameterToString(countryIsoCode)); // path parameter
            if (acceptEncoding != null) localVarHeaderParams.Add("Accept-Encoding", Configuration.ApiClient.ParameterToString(acceptEncoding)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChannelInfoList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChannelInfoList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChannelInfoList)));
            
        }

        /// <summary>
        /// Get public channel index Use this operation to get the correct link to the channels and to the list of values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PublicChannelIndex</returns>
        public PublicChannelIndex GetChannelsIndex ()
        {
             ApiResponse<PublicChannelIndex> localVarResponse = GetChannelsIndexWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get public channel index Use this operation to get the correct link to the channels and to the list of values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PublicChannelIndex</returns>
        public ApiResponse< PublicChannelIndex > GetChannelsIndexWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelsIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicChannelIndex>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicChannelIndex) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicChannelIndex)));
            
        }

        /// <summary>
        /// Get public channel index Use this operation to get the correct link to the channels and to the list of values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PublicChannelIndex</returns>
        public async System.Threading.Tasks.Task<PublicChannelIndex> GetChannelsIndexAsync ()
        {
             ApiResponse<PublicChannelIndex> localVarResponse = await GetChannelsIndexAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get public channel index Use this operation to get the correct link to the channels and to the list of values
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PublicChannelIndex)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicChannelIndex>> GetChannelsIndexAsyncWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChannelsIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicChannelIndex>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PublicChannelIndex) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicChannelIndex)));
            
        }

    }
}
