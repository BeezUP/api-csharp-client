/* 
 * Analytics
 *
 * This API will help you to manage the tracking of your clicks and your sales, get reporting on this trackings and put in place rules based on this reporting to automatically optimize your channel catalogs. \\ Also, you will be able to consult the rule execution reporting. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ReportsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ReportsApiTests
    {
        private ReportsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReportsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReportsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ReportsApi
            //Assert.IsInstanceOfType(typeof(ReportsApi), instance, "instance is a ReportsApi");
        }

        
        /// <summary>
        /// Test DeleteReportFilter
        /// </summary>
        [Test]
        public void DeleteReportFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string reportFilterId = null;
            //instance.DeleteReportFilter(storeId, reportFilterId);
            
        }
        
        /// <summary>
        /// Test ExportStoreReportByCategory
        /// </summary>
        [Test]
        public void ExportStoreReportByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByCategoryRequest request = null;
            //var response = instance.ExportStoreReportByCategory(storeId, format, request);
            //Assert.IsInstanceOf<BeezUPCommonLink3> (response, "response is BeezUPCommonLink3");
        }
        
        /// <summary>
        /// Test ExportStoreReportByChannel
        /// </summary>
        [Test]
        public void ExportStoreReportByChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByChannelRequest request = null;
            //var response = instance.ExportStoreReportByChannel(storeId, format, request);
            //Assert.IsInstanceOf<BeezUPCommonLink3> (response, "response is BeezUPCommonLink3");
        }
        
        /// <summary>
        /// Test ExportStoreReportByProduct
        /// </summary>
        [Test]
        public void ExportStoreReportByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByProductRequest request = null;
            //var response = instance.ExportStoreReportByProduct(storeId, format, request);
            //Assert.IsInstanceOf<BeezUPCommonLink3> (response, "response is BeezUPCommonLink3");
        }
        
        /// <summary>
        /// Test GetReportFilter
        /// </summary>
        [Test]
        public void GetReportFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string reportFilterId = null;
            //var response = instance.GetReportFilter(storeId, reportFilterId);
            //Assert.IsInstanceOf<ReportFilter> (response, "response is ReportFilter");
        }
        
        /// <summary>
        /// Test GetReportFilters
        /// </summary>
        [Test]
        public void GetReportFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //var response = instance.GetReportFilters(storeId);
            //Assert.IsInstanceOf<ReportFilters> (response, "response is ReportFilters");
        }
        
        /// <summary>
        /// Test GetStoreReportByCategory
        /// </summary>
        [Test]
        public void GetStoreReportByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByCategoryRequest request = null;
            //var response = instance.GetStoreReportByCategory(storeId, request);
            //Assert.IsInstanceOf<ReportByCategoryResponse> (response, "response is ReportByCategoryResponse");
        }
        
        /// <summary>
        /// Test GetStoreReportByChannel
        /// </summary>
        [Test]
        public void GetStoreReportByChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByChannelRequest request = null;
            //var response = instance.GetStoreReportByChannel(storeId, request);
            //Assert.IsInstanceOf<ReportByChannelResponse> (response, "response is ReportByChannelResponse");
        }
        
        /// <summary>
        /// Test GetStoreReportByDay
        /// </summary>
        [Test]
        public void GetStoreReportByDayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByDayRequest request = null;
            //var response = instance.GetStoreReportByDay(storeId, request);
            //Assert.IsInstanceOf<ReportByDayResponse> (response, "response is ReportByDayResponse");
        }
        
        /// <summary>
        /// Test GetStoreReportByDayExport
        /// </summary>
        [Test]
        public void GetStoreReportByDayExportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string format = null;
            //ReportByDayRequest request = null;
            //var response = instance.GetStoreReportByDayExport(storeId, format, request);
            //Assert.IsInstanceOf<BeezUPCommonLink3> (response, "response is BeezUPCommonLink3");
        }
        
        /// <summary>
        /// Test GetStoreReportByProduct
        /// </summary>
        [Test]
        public void GetStoreReportByProductTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //ReportByProductRequest request = null;
            //var response = instance.GetStoreReportByProduct(storeId, request);
            //Assert.IsInstanceOf<ReportByProductResponse> (response, "response is ReportByProductResponse");
        }
        
        /// <summary>
        /// Test SaveReportFilter
        /// </summary>
        [Test]
        public void SaveReportFilterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string storeId = null;
            //string reportFilterId = null;
            //SaveReportFilterRequest reportFilter = null;
            //instance.SaveReportFilter(storeId, reportFilterId, reportFilter);
            
        }
        
    }

}
