/* 
 * Catalogs
 *
 * This API allows you to manage your catalogs
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describe how to get and read a file
    /// </summary>
    [DataContract]
    public partial class InputFileConfiguration :  IEquatable<InputFileConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFileConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputFileConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputFileConfiguration" /> class.
        /// </summary>
        /// <param name="FileNumber">The file number starting by 1 (required).</param>
        /// <param name="Fetch">Fetch (required).</param>
        /// <param name="Read">Read (required).</param>
        public InputFileConfiguration(int? FileNumber = default(int?), InputFileFetchConfiguration Fetch = default(InputFileFetchConfiguration), InputFileReadConfiguration Read = default(InputFileReadConfiguration))
        {
            // to ensure "FileNumber" is required (not null)
            if (FileNumber == null)
            {
                throw new InvalidDataException("FileNumber is a required property for InputFileConfiguration and cannot be null");
            }
            else
            {
                this.FileNumber = FileNumber;
            }
            // to ensure "Fetch" is required (not null)
            if (Fetch == null)
            {
                throw new InvalidDataException("Fetch is a required property for InputFileConfiguration and cannot be null");
            }
            else
            {
                this.Fetch = Fetch;
            }
            // to ensure "Read" is required (not null)
            if (Read == null)
            {
                throw new InvalidDataException("Read is a required property for InputFileConfiguration and cannot be null");
            }
            else
            {
                this.Read = Read;
            }
        }
        
        /// <summary>
        /// The file number starting by 1
        /// </summary>
        /// <value>The file number starting by 1</value>
        [DataMember(Name="fileNumber", EmitDefaultValue=false)]
        public int? FileNumber { get; set; }
        /// <summary>
        /// Gets or Sets Fetch
        /// </summary>
        [DataMember(Name="fetch", EmitDefaultValue=false)]
        public InputFileFetchConfiguration Fetch { get; set; }
        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [DataMember(Name="read", EmitDefaultValue=false)]
        public InputFileReadConfiguration Read { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputFileConfiguration {\n");
            sb.Append("  FileNumber: ").Append(FileNumber).Append("\n");
            sb.Append("  Fetch: ").Append(Fetch).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InputFileConfiguration);
        }

        /// <summary>
        /// Returns true if InputFileConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of InputFileConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputFileConfiguration other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FileNumber == other.FileNumber ||
                    this.FileNumber != null &&
                    this.FileNumber.Equals(other.FileNumber)
                ) && 
                (
                    this.Fetch == other.Fetch ||
                    this.Fetch != null &&
                    this.Fetch.Equals(other.Fetch)
                ) && 
                (
                    this.Read == other.Read ||
                    this.Read != null &&
                    this.Read.Equals(other.Read)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FileNumber != null)
                    hash = hash * 59 + this.FileNumber.GetHashCode();
                if (this.Fetch != null)
                    hash = hash * 59 + this.Fetch.GetHashCode();
                if (this.Read != null)
                    hash = hash * 59 + this.Read.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // FileNumber (int?) minimum
            if(this.FileNumber < (int?)1)
            {
                yield return new ValidationResult("Invalid value for FileNumber, must be a value greater than or equal to 1.", new [] { "FileNumber" });
            }

            yield break;
        }
    }

}
