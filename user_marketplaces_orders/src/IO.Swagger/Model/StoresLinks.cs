/* 
 * Customer
 *
 * This API will gives you the ability to : - manage your account - manage your stores - shares your stores with your friends - manage your contracts - access to your invoices 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The action links
    /// </summary>
    [DataContract]
    public partial class StoresLinks :  IEquatable<StoresLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoresLinks" /> class.
        /// </summary>
        /// <param name="GetStores">GetStores.</param>
        /// <param name="CreateStore">CreateStore.</param>
        public StoresLinks(LinksGetStoresLink GetStores = default(LinksGetStoresLink), LinksCreateStoreLink CreateStore = default(LinksCreateStoreLink))
        {
            this.GetStores = GetStores;
            this.CreateStore = CreateStore;
        }
        
        /// <summary>
        /// Gets or Sets GetStores
        /// </summary>
        [DataMember(Name="getStores", EmitDefaultValue=false)]
        public LinksGetStoresLink GetStores { get; set; }
        /// <summary>
        /// Gets or Sets CreateStore
        /// </summary>
        [DataMember(Name="createStore", EmitDefaultValue=false)]
        public LinksCreateStoreLink CreateStore { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoresLinks {\n");
            sb.Append("  GetStores: ").Append(GetStores).Append("\n");
            sb.Append("  CreateStore: ").Append(CreateStore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StoresLinks);
        }

        /// <summary>
        /// Returns true if StoresLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of StoresLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoresLinks other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.GetStores == other.GetStores ||
                    this.GetStores != null &&
                    this.GetStores.Equals(other.GetStores)
                ) && 
                (
                    this.CreateStore == other.CreateStore ||
                    this.CreateStore != null &&
                    this.CreateStore.Equals(other.CreateStore)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.GetStores != null)
                    hash = hash * 59 + this.GetStores.GetHashCode();
                if (this.CreateStore != null)
                    hash = hash * 59 + this.CreateStore.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
