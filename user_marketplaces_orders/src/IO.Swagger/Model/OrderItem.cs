/* 
 * Marketplaces - Orders
 *
 * The features exposed in this API are centered around managing Orders harvested from your configured marketplaces.\\ This includes: - fetching current information (as known by BeezUP) for a single or multiple Orders, - requesting Order harvest to synchronize your marketplaces and BeezUP accounts, - changing BeezUP data and requesting changes to your marketplaces (accepting, shipping, etc), - configuring automatic changes to marketplace based our newly fetched data, - creating and exporting reports for your Orders. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describe an order item. All properties with the prefix orderItem_ are translated in the list of values /user/lov/OrderMetaInfoOrderItems
    /// </summary>
    [DataContract]
    public partial class OrderItem :  IEquatable<OrderItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderItem" /> class.
        /// </summary>
        /// <param name="BeezUPOrderItemId">The BeezUP identifier of the order Item (required).</param>
        /// <param name="OrderItemOrderItemType">The order item type of the order item (required).</param>
        /// <param name="OrderItemMerchantImportedProductId">The product id indicated in the catalog importation in BeezUP system for this order item. This property will help you to match the order to the inventory system..</param>
        /// <param name="OrderItemMerchantImportedProductIdColumnName">The column name for the product id indicated in the catalog importation in BeezUP system related to this order item. This property will help you to match the order to the inventory system..</param>
        /// <param name="OrderItemMerchantImportedProductUrl">The product url indicated in the catalog importation in BeezUP system related to this order item.</param>
        /// <param name="OrderItemMerchantProductIdColumnName">The column name indicate in the mapping for the product id related to the order item.</param>
        /// <param name="OrderItemBeezUPStoreId">The store id in the beezup system related to the order item. This property will help you to match the order to the inventory system..</param>
        /// <param name="OrderItemItemTax">The tax of the order item.</param>
        /// <param name="OrderItemTitle">The title of the order item.</param>
        /// <param name="OrderItemImageUrl">The URL of the image of the order item.</param>
        /// <param name="OrderItemMerchantProductId">The merchant product id of the order item.</param>
        /// <param name="OrderItemMarketPlaceProductId">The marketplace product identifier of the order item.</param>
        /// <param name="OrderItemItemPrice">The price of the order item.</param>
        /// <param name="OrderItemQuantity">The quantity of the order item.</param>
        /// <param name="OrderItemTotalPrice">The total price of the order item.</param>
        /// <param name="OrderItemShippingPrice">The shipping price of the order item.</param>
        public OrderItem(string BeezUPOrderItemId = default(string), string OrderItemOrderItemType = default(string), string OrderItemMerchantImportedProductId = default(string), string OrderItemMerchantImportedProductIdColumnName = default(string), string OrderItemMerchantImportedProductUrl = default(string), string OrderItemMerchantProductIdColumnName = default(string), string OrderItemBeezUPStoreId = default(string), decimal? OrderItemItemTax = default(decimal?), string OrderItemTitle = default(string), string OrderItemImageUrl = default(string), string OrderItemMerchantProductId = default(string), string OrderItemMarketPlaceProductId = default(string), decimal? OrderItemItemPrice = default(decimal?), decimal? OrderItemQuantity = default(decimal?), decimal? OrderItemTotalPrice = default(decimal?), decimal? OrderItemShippingPrice = default(decimal?))
        {
            // to ensure "BeezUPOrderItemId" is required (not null)
            if (BeezUPOrderItemId == null)
            {
                throw new InvalidDataException("BeezUPOrderItemId is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.BeezUPOrderItemId = BeezUPOrderItemId;
            }
            // to ensure "OrderItemOrderItemType" is required (not null)
            if (OrderItemOrderItemType == null)
            {
                throw new InvalidDataException("OrderItemOrderItemType is a required property for OrderItem and cannot be null");
            }
            else
            {
                this.OrderItemOrderItemType = OrderItemOrderItemType;
            }
            this.OrderItemMerchantImportedProductId = OrderItemMerchantImportedProductId;
            this.OrderItemMerchantImportedProductIdColumnName = OrderItemMerchantImportedProductIdColumnName;
            this.OrderItemMerchantImportedProductUrl = OrderItemMerchantImportedProductUrl;
            this.OrderItemMerchantProductIdColumnName = OrderItemMerchantProductIdColumnName;
            this.OrderItemBeezUPStoreId = OrderItemBeezUPStoreId;
            this.OrderItemItemTax = OrderItemItemTax;
            this.OrderItemTitle = OrderItemTitle;
            this.OrderItemImageUrl = OrderItemImageUrl;
            this.OrderItemMerchantProductId = OrderItemMerchantProductId;
            this.OrderItemMarketPlaceProductId = OrderItemMarketPlaceProductId;
            this.OrderItemItemPrice = OrderItemItemPrice;
            this.OrderItemQuantity = OrderItemQuantity;
            this.OrderItemTotalPrice = OrderItemTotalPrice;
            this.OrderItemShippingPrice = OrderItemShippingPrice;
        }
        
        /// <summary>
        /// The BeezUP identifier of the order Item
        /// </summary>
        /// <value>The BeezUP identifier of the order Item</value>
        [DataMember(Name="beezUPOrderItemId", EmitDefaultValue=false)]
        public string BeezUPOrderItemId { get; set; }
        /// <summary>
        /// The order item type of the order item
        /// </summary>
        /// <value>The order item type of the order item</value>
        [DataMember(Name="orderItem_OrderItemType", EmitDefaultValue=false)]
        public string OrderItemOrderItemType { get; set; }
        /// <summary>
        /// The product id indicated in the catalog importation in BeezUP system for this order item. This property will help you to match the order to the inventory system.
        /// </summary>
        /// <value>The product id indicated in the catalog importation in BeezUP system for this order item. This property will help you to match the order to the inventory system.</value>
        [DataMember(Name="orderItem_MerchantImportedProductId", EmitDefaultValue=false)]
        public string OrderItemMerchantImportedProductId { get; set; }
        /// <summary>
        /// The column name for the product id indicated in the catalog importation in BeezUP system related to this order item. This property will help you to match the order to the inventory system.
        /// </summary>
        /// <value>The column name for the product id indicated in the catalog importation in BeezUP system related to this order item. This property will help you to match the order to the inventory system.</value>
        [DataMember(Name="orderItem_MerchantImportedProductIdColumnName", EmitDefaultValue=false)]
        public string OrderItemMerchantImportedProductIdColumnName { get; set; }
        /// <summary>
        /// The product url indicated in the catalog importation in BeezUP system related to this order item
        /// </summary>
        /// <value>The product url indicated in the catalog importation in BeezUP system related to this order item</value>
        [DataMember(Name="orderItem_MerchantImportedProductUrl", EmitDefaultValue=false)]
        public string OrderItemMerchantImportedProductUrl { get; set; }
        /// <summary>
        /// The column name indicate in the mapping for the product id related to the order item
        /// </summary>
        /// <value>The column name indicate in the mapping for the product id related to the order item</value>
        [DataMember(Name="orderItem_MerchantProductIdColumnName", EmitDefaultValue=false)]
        public string OrderItemMerchantProductIdColumnName { get; set; }
        /// <summary>
        /// The store id in the beezup system related to the order item. This property will help you to match the order to the inventory system.
        /// </summary>
        /// <value>The store id in the beezup system related to the order item. This property will help you to match the order to the inventory system.</value>
        [DataMember(Name="orderItem_BeezUPStoreId", EmitDefaultValue=false)]
        public string OrderItemBeezUPStoreId { get; set; }
        /// <summary>
        /// The tax of the order item
        /// </summary>
        /// <value>The tax of the order item</value>
        [DataMember(Name="orderItem_ItemTax", EmitDefaultValue=false)]
        public decimal? OrderItemItemTax { get; set; }
        /// <summary>
        /// The title of the order item
        /// </summary>
        /// <value>The title of the order item</value>
        [DataMember(Name="orderItem_Title", EmitDefaultValue=false)]
        public string OrderItemTitle { get; set; }
        /// <summary>
        /// The URL of the image of the order item
        /// </summary>
        /// <value>The URL of the image of the order item</value>
        [DataMember(Name="orderItem_ImageUrl", EmitDefaultValue=false)]
        public string OrderItemImageUrl { get; set; }
        /// <summary>
        /// The merchant product id of the order item
        /// </summary>
        /// <value>The merchant product id of the order item</value>
        [DataMember(Name="orderItem_MerchantProductId", EmitDefaultValue=false)]
        public string OrderItemMerchantProductId { get; set; }
        /// <summary>
        /// The marketplace product identifier of the order item
        /// </summary>
        /// <value>The marketplace product identifier of the order item</value>
        [DataMember(Name="orderItem_MarketPlaceProductId", EmitDefaultValue=false)]
        public string OrderItemMarketPlaceProductId { get; set; }
        /// <summary>
        /// The price of the order item
        /// </summary>
        /// <value>The price of the order item</value>
        [DataMember(Name="orderItem_ItemPrice", EmitDefaultValue=false)]
        public decimal? OrderItemItemPrice { get; set; }
        /// <summary>
        /// The quantity of the order item
        /// </summary>
        /// <value>The quantity of the order item</value>
        [DataMember(Name="orderItem_Quantity", EmitDefaultValue=false)]
        public decimal? OrderItemQuantity { get; set; }
        /// <summary>
        /// The total price of the order item
        /// </summary>
        /// <value>The total price of the order item</value>
        [DataMember(Name="orderItem_TotalPrice", EmitDefaultValue=false)]
        public decimal? OrderItemTotalPrice { get; set; }
        /// <summary>
        /// The shipping price of the order item
        /// </summary>
        /// <value>The shipping price of the order item</value>
        [DataMember(Name="orderItem_Shipping_Price", EmitDefaultValue=false)]
        public decimal? OrderItemShippingPrice { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderItem {\n");
            sb.Append("  BeezUPOrderItemId: ").Append(BeezUPOrderItemId).Append("\n");
            sb.Append("  OrderItemOrderItemType: ").Append(OrderItemOrderItemType).Append("\n");
            sb.Append("  OrderItemMerchantImportedProductId: ").Append(OrderItemMerchantImportedProductId).Append("\n");
            sb.Append("  OrderItemMerchantImportedProductIdColumnName: ").Append(OrderItemMerchantImportedProductIdColumnName).Append("\n");
            sb.Append("  OrderItemMerchantImportedProductUrl: ").Append(OrderItemMerchantImportedProductUrl).Append("\n");
            sb.Append("  OrderItemMerchantProductIdColumnName: ").Append(OrderItemMerchantProductIdColumnName).Append("\n");
            sb.Append("  OrderItemBeezUPStoreId: ").Append(OrderItemBeezUPStoreId).Append("\n");
            sb.Append("  OrderItemItemTax: ").Append(OrderItemItemTax).Append("\n");
            sb.Append("  OrderItemTitle: ").Append(OrderItemTitle).Append("\n");
            sb.Append("  OrderItemImageUrl: ").Append(OrderItemImageUrl).Append("\n");
            sb.Append("  OrderItemMerchantProductId: ").Append(OrderItemMerchantProductId).Append("\n");
            sb.Append("  OrderItemMarketPlaceProductId: ").Append(OrderItemMarketPlaceProductId).Append("\n");
            sb.Append("  OrderItemItemPrice: ").Append(OrderItemItemPrice).Append("\n");
            sb.Append("  OrderItemQuantity: ").Append(OrderItemQuantity).Append("\n");
            sb.Append("  OrderItemTotalPrice: ").Append(OrderItemTotalPrice).Append("\n");
            sb.Append("  OrderItemShippingPrice: ").Append(OrderItemShippingPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderItem);
        }

        /// <summary>
        /// Returns true if OrderItem instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BeezUPOrderItemId == other.BeezUPOrderItemId ||
                    this.BeezUPOrderItemId != null &&
                    this.BeezUPOrderItemId.Equals(other.BeezUPOrderItemId)
                ) && 
                (
                    this.OrderItemOrderItemType == other.OrderItemOrderItemType ||
                    this.OrderItemOrderItemType != null &&
                    this.OrderItemOrderItemType.Equals(other.OrderItemOrderItemType)
                ) && 
                (
                    this.OrderItemMerchantImportedProductId == other.OrderItemMerchantImportedProductId ||
                    this.OrderItemMerchantImportedProductId != null &&
                    this.OrderItemMerchantImportedProductId.Equals(other.OrderItemMerchantImportedProductId)
                ) && 
                (
                    this.OrderItemMerchantImportedProductIdColumnName == other.OrderItemMerchantImportedProductIdColumnName ||
                    this.OrderItemMerchantImportedProductIdColumnName != null &&
                    this.OrderItemMerchantImportedProductIdColumnName.Equals(other.OrderItemMerchantImportedProductIdColumnName)
                ) && 
                (
                    this.OrderItemMerchantImportedProductUrl == other.OrderItemMerchantImportedProductUrl ||
                    this.OrderItemMerchantImportedProductUrl != null &&
                    this.OrderItemMerchantImportedProductUrl.Equals(other.OrderItemMerchantImportedProductUrl)
                ) && 
                (
                    this.OrderItemMerchantProductIdColumnName == other.OrderItemMerchantProductIdColumnName ||
                    this.OrderItemMerchantProductIdColumnName != null &&
                    this.OrderItemMerchantProductIdColumnName.Equals(other.OrderItemMerchantProductIdColumnName)
                ) && 
                (
                    this.OrderItemBeezUPStoreId == other.OrderItemBeezUPStoreId ||
                    this.OrderItemBeezUPStoreId != null &&
                    this.OrderItemBeezUPStoreId.Equals(other.OrderItemBeezUPStoreId)
                ) && 
                (
                    this.OrderItemItemTax == other.OrderItemItemTax ||
                    this.OrderItemItemTax != null &&
                    this.OrderItemItemTax.Equals(other.OrderItemItemTax)
                ) && 
                (
                    this.OrderItemTitle == other.OrderItemTitle ||
                    this.OrderItemTitle != null &&
                    this.OrderItemTitle.Equals(other.OrderItemTitle)
                ) && 
                (
                    this.OrderItemImageUrl == other.OrderItemImageUrl ||
                    this.OrderItemImageUrl != null &&
                    this.OrderItemImageUrl.Equals(other.OrderItemImageUrl)
                ) && 
                (
                    this.OrderItemMerchantProductId == other.OrderItemMerchantProductId ||
                    this.OrderItemMerchantProductId != null &&
                    this.OrderItemMerchantProductId.Equals(other.OrderItemMerchantProductId)
                ) && 
                (
                    this.OrderItemMarketPlaceProductId == other.OrderItemMarketPlaceProductId ||
                    this.OrderItemMarketPlaceProductId != null &&
                    this.OrderItemMarketPlaceProductId.Equals(other.OrderItemMarketPlaceProductId)
                ) && 
                (
                    this.OrderItemItemPrice == other.OrderItemItemPrice ||
                    this.OrderItemItemPrice != null &&
                    this.OrderItemItemPrice.Equals(other.OrderItemItemPrice)
                ) && 
                (
                    this.OrderItemQuantity == other.OrderItemQuantity ||
                    this.OrderItemQuantity != null &&
                    this.OrderItemQuantity.Equals(other.OrderItemQuantity)
                ) && 
                (
                    this.OrderItemTotalPrice == other.OrderItemTotalPrice ||
                    this.OrderItemTotalPrice != null &&
                    this.OrderItemTotalPrice.Equals(other.OrderItemTotalPrice)
                ) && 
                (
                    this.OrderItemShippingPrice == other.OrderItemShippingPrice ||
                    this.OrderItemShippingPrice != null &&
                    this.OrderItemShippingPrice.Equals(other.OrderItemShippingPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BeezUPOrderItemId != null)
                    hash = hash * 59 + this.BeezUPOrderItemId.GetHashCode();
                if (this.OrderItemOrderItemType != null)
                    hash = hash * 59 + this.OrderItemOrderItemType.GetHashCode();
                if (this.OrderItemMerchantImportedProductId != null)
                    hash = hash * 59 + this.OrderItemMerchantImportedProductId.GetHashCode();
                if (this.OrderItemMerchantImportedProductIdColumnName != null)
                    hash = hash * 59 + this.OrderItemMerchantImportedProductIdColumnName.GetHashCode();
                if (this.OrderItemMerchantImportedProductUrl != null)
                    hash = hash * 59 + this.OrderItemMerchantImportedProductUrl.GetHashCode();
                if (this.OrderItemMerchantProductIdColumnName != null)
                    hash = hash * 59 + this.OrderItemMerchantProductIdColumnName.GetHashCode();
                if (this.OrderItemBeezUPStoreId != null)
                    hash = hash * 59 + this.OrderItemBeezUPStoreId.GetHashCode();
                if (this.OrderItemItemTax != null)
                    hash = hash * 59 + this.OrderItemItemTax.GetHashCode();
                if (this.OrderItemTitle != null)
                    hash = hash * 59 + this.OrderItemTitle.GetHashCode();
                if (this.OrderItemImageUrl != null)
                    hash = hash * 59 + this.OrderItemImageUrl.GetHashCode();
                if (this.OrderItemMerchantProductId != null)
                    hash = hash * 59 + this.OrderItemMerchantProductId.GetHashCode();
                if (this.OrderItemMarketPlaceProductId != null)
                    hash = hash * 59 + this.OrderItemMarketPlaceProductId.GetHashCode();
                if (this.OrderItemItemPrice != null)
                    hash = hash * 59 + this.OrderItemItemPrice.GetHashCode();
                if (this.OrderItemQuantity != null)
                    hash = hash * 59 + this.OrderItemQuantity.GetHashCode();
                if (this.OrderItemTotalPrice != null)
                    hash = hash * 59 + this.OrderItemTotalPrice.GetHashCode();
                if (this.OrderItemShippingPrice != null)
                    hash = hash * 59 + this.OrderItemShippingPrice.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
