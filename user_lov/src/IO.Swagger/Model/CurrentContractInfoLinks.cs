/* 
 * Customer
 *
 * This API will gives you the ability to : - manage your account - manage your stores - shares your stores with your friends - manage your contracts - access to your invoices 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CurrentContractInfoLinks
    /// </summary>
    [DataContract]
    public partial class CurrentContractInfoLinks :  IEquatable<CurrentContractInfoLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentContractInfoLinks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrentContractInfoLinks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentContractInfoLinks" /> class.
        /// </summary>
        /// <param name="Self">Self (required).</param>
        /// <param name="Disable">Disable.</param>
        /// <param name="Reenable">Reenable.</param>
        public CurrentContractInfoLinks(LinksGetContractsLink Self = default(LinksGetContractsLink), LinksTerminateCurrentContractLink Disable = default(LinksTerminateCurrentContractLink), LinksReactivateCurrentContractLink Reenable = default(LinksReactivateCurrentContractLink))
        {
            // to ensure "Self" is required (not null)
            if (Self == null)
            {
                throw new InvalidDataException("Self is a required property for CurrentContractInfoLinks and cannot be null");
            }
            else
            {
                this.Self = Self;
            }
            this.Disable = Disable;
            this.Reenable = Reenable;
        }
        
        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public LinksGetContractsLink Self { get; set; }
        /// <summary>
        /// Gets or Sets Disable
        /// </summary>
        [DataMember(Name="disable", EmitDefaultValue=false)]
        public LinksTerminateCurrentContractLink Disable { get; set; }
        /// <summary>
        /// Gets or Sets Reenable
        /// </summary>
        [DataMember(Name="reenable", EmitDefaultValue=false)]
        public LinksReactivateCurrentContractLink Reenable { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrentContractInfoLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Disable: ").Append(Disable).Append("\n");
            sb.Append("  Reenable: ").Append(Reenable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CurrentContractInfoLinks);
        }

        /// <summary>
        /// Returns true if CurrentContractInfoLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of CurrentContractInfoLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrentContractInfoLinks other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Self == other.Self ||
                    this.Self != null &&
                    this.Self.Equals(other.Self)
                ) && 
                (
                    this.Disable == other.Disable ||
                    this.Disable != null &&
                    this.Disable.Equals(other.Disable)
                ) && 
                (
                    this.Reenable == other.Reenable ||
                    this.Reenable != null &&
                    this.Reenable.Equals(other.Reenable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Self != null)
                    hash = hash * 59 + this.Self.GetHashCode();
                if (this.Disable != null)
                    hash = hash * 59 + this.Disable.GetHashCode();
                if (this.Reenable != null)
                    hash = hash * 59 + this.Reenable.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
