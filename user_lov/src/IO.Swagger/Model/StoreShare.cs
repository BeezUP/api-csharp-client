/* 
 * Customer
 *
 * This API will gives you the ability to : - manage your account - manage your stores - shares your stores with your friends - manage your contracts - access to your invoices 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StoreShare
    /// </summary>
    [DataContract]
    public partial class StoreShare :  IEquatable<StoreShare>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreShare" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StoreShare() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StoreShare" /> class.
        /// </summary>
        /// <param name="UserId">UserId (required).</param>
        /// <param name="UserRole">UserRole (required).</param>
        /// <param name="Links">Links.</param>
        public StoreShare(BeezUPCommonUserId UserId = default(BeezUPCommonUserId), StoreUserRole UserRole = default(StoreUserRole), StoreShareLinks Links = default(StoreShareLinks))
        {
            // to ensure "UserId" is required (not null)
            if (UserId == null)
            {
                throw new InvalidDataException("UserId is a required property for StoreShare and cannot be null");
            }
            else
            {
                this.UserId = UserId;
            }
            // to ensure "UserRole" is required (not null)
            if (UserRole == null)
            {
                throw new InvalidDataException("UserRole is a required property for StoreShare and cannot be null");
            }
            else
            {
                this.UserRole = UserRole;
            }
            this.Links = Links;
        }
        
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public BeezUPCommonUserId UserId { get; set; }
        /// <summary>
        /// Gets or Sets UserRole
        /// </summary>
        [DataMember(Name="userRole", EmitDefaultValue=false)]
        public StoreUserRole UserRole { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public StoreShareLinks Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreShare {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserRole: ").Append(UserRole).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StoreShare);
        }

        /// <summary>
        /// Returns true if StoreShare instances are equal
        /// </summary>
        /// <param name="other">Instance of StoreShare to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreShare other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UserId == other.UserId ||
                    this.UserId != null &&
                    this.UserId.Equals(other.UserId)
                ) && 
                (
                    this.UserRole == other.UserRole ||
                    this.UserRole != null &&
                    this.UserRole.Equals(other.UserRole)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UserId != null)
                    hash = hash * 59 + this.UserId.GetHashCode();
                if (this.UserRole != null)
                    hash = hash * 59 + this.UserRole.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
