/* 
 * Analytics
 *
 * This API will help you to manage the tracking of your clicks and your sales, get reporting on this trackings and put in place rules based on this reporting to automatically optimize your channel catalogs. \\ Also, you will be able to consult the rule execution reporting. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportByDay
    /// </summary>
    [DataContract]
    public partial class ReportByDay :  IEquatable<ReportByDay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportByDay" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportByDay() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportByDay" /> class.
        /// </summary>
        /// <param name="Day">Day (required).</param>
        /// <param name="AllChannels">AllChannels (required).</param>
        /// <param name="ByChannels">ByChannels (required).</param>
        public ReportByDay(DateTime? Day = default(DateTime?), ReportByDayAllChannels AllChannels = default(ReportByDayAllChannels), List<ReportByDayByChannel> ByChannels = default(List<ReportByDayByChannel>))
        {
            // to ensure "Day" is required (not null)
            if (Day == null)
            {
                throw new InvalidDataException("Day is a required property for ReportByDay and cannot be null");
            }
            else
            {
                this.Day = Day;
            }
            // to ensure "AllChannels" is required (not null)
            if (AllChannels == null)
            {
                throw new InvalidDataException("AllChannels is a required property for ReportByDay and cannot be null");
            }
            else
            {
                this.AllChannels = AllChannels;
            }
            // to ensure "ByChannels" is required (not null)
            if (ByChannels == null)
            {
                throw new InvalidDataException("ByChannels is a required property for ReportByDay and cannot be null");
            }
            else
            {
                this.ByChannels = ByChannels;
            }
        }
        
        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public DateTime? Day { get; set; }
        /// <summary>
        /// Gets or Sets AllChannels
        /// </summary>
        [DataMember(Name="allChannels", EmitDefaultValue=false)]
        public ReportByDayAllChannels AllChannels { get; set; }
        /// <summary>
        /// Gets or Sets ByChannels
        /// </summary>
        [DataMember(Name="byChannels", EmitDefaultValue=false)]
        public List<ReportByDayByChannel> ByChannels { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportByDay {\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  AllChannels: ").Append(AllChannels).Append("\n");
            sb.Append("  ByChannels: ").Append(ByChannels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportByDay);
        }

        /// <summary>
        /// Returns true if ReportByDay instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportByDay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportByDay other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Day == other.Day ||
                    this.Day != null &&
                    this.Day.Equals(other.Day)
                ) && 
                (
                    this.AllChannels == other.AllChannels ||
                    this.AllChannels != null &&
                    this.AllChannels.Equals(other.AllChannels)
                ) && 
                (
                    this.ByChannels == other.ByChannels ||
                    this.ByChannels != null &&
                    this.ByChannels.SequenceEqual(other.ByChannels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Day != null)
                    hash = hash * 59 + this.Day.GetHashCode();
                if (this.AllChannels != null)
                    hash = hash * 59 + this.AllChannels.GetHashCode();
                if (this.ByChannels != null)
                    hash = hash * 59 + this.ByChannels.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
