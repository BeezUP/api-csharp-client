/* 
 * Channels
 *
 * This api allows you to get access to your channels
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChannelInfoDetails
    /// </summary>
    [DataContract]
    public partial class ChannelInfoDetails :  IEquatable<ChannelInfoDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelInfoDetails" /> class.
        /// </summary>
        /// <param name="Costs">The cost&#39;s description of the channel.</param>
        /// <param name="BusinessModel">The business model of the channel.</param>
        /// <param name="ChannelType">The channel type.</param>
        /// <param name="Category">The channel category.</param>
        /// <param name="HomeUrl">The home url of the channel.</param>
        /// <param name="SubscriptionLink">The subscription link to the channel.</param>
        public ChannelInfoDetails(string Costs = default(string), string BusinessModel = default(string), string ChannelType = default(string), string Category = default(string), string HomeUrl = default(string), string SubscriptionLink = default(string))
        {
            this.Costs = Costs;
            this.BusinessModel = BusinessModel;
            this.ChannelType = ChannelType;
            this.Category = Category;
            this.HomeUrl = HomeUrl;
            this.SubscriptionLink = SubscriptionLink;
        }
        
        /// <summary>
        /// The cost&#39;s description of the channel
        /// </summary>
        /// <value>The cost&#39;s description of the channel</value>
        [DataMember(Name="costs", EmitDefaultValue=false)]
        public string Costs { get; set; }
        /// <summary>
        /// The business model of the channel
        /// </summary>
        /// <value>The business model of the channel</value>
        [DataMember(Name="businessModel", EmitDefaultValue=false)]
        public string BusinessModel { get; set; }
        /// <summary>
        /// The channel type
        /// </summary>
        /// <value>The channel type</value>
        [DataMember(Name="channelType", EmitDefaultValue=false)]
        public string ChannelType { get; set; }
        /// <summary>
        /// The channel category
        /// </summary>
        /// <value>The channel category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }
        /// <summary>
        /// The home url of the channel
        /// </summary>
        /// <value>The home url of the channel</value>
        [DataMember(Name="homeUrl", EmitDefaultValue=false)]
        public string HomeUrl { get; set; }
        /// <summary>
        /// The subscription link to the channel
        /// </summary>
        /// <value>The subscription link to the channel</value>
        [DataMember(Name="subscriptionLink", EmitDefaultValue=false)]
        public string SubscriptionLink { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelInfoDetails {\n");
            sb.Append("  Costs: ").Append(Costs).Append("\n");
            sb.Append("  BusinessModel: ").Append(BusinessModel).Append("\n");
            sb.Append("  ChannelType: ").Append(ChannelType).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  HomeUrl: ").Append(HomeUrl).Append("\n");
            sb.Append("  SubscriptionLink: ").Append(SubscriptionLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelInfoDetails);
        }

        /// <summary>
        /// Returns true if ChannelInfoDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelInfoDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelInfoDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Costs == other.Costs ||
                    this.Costs != null &&
                    this.Costs.Equals(other.Costs)
                ) && 
                (
                    this.BusinessModel == other.BusinessModel ||
                    this.BusinessModel != null &&
                    this.BusinessModel.Equals(other.BusinessModel)
                ) && 
                (
                    this.ChannelType == other.ChannelType ||
                    this.ChannelType != null &&
                    this.ChannelType.Equals(other.ChannelType)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.HomeUrl == other.HomeUrl ||
                    this.HomeUrl != null &&
                    this.HomeUrl.Equals(other.HomeUrl)
                ) && 
                (
                    this.SubscriptionLink == other.SubscriptionLink ||
                    this.SubscriptionLink != null &&
                    this.SubscriptionLink.Equals(other.SubscriptionLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Costs != null)
                    hash = hash * 59 + this.Costs.GetHashCode();
                if (this.BusinessModel != null)
                    hash = hash * 59 + this.BusinessModel.GetHashCode();
                if (this.ChannelType != null)
                    hash = hash * 59 + this.ChannelType.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.HomeUrl != null)
                    hash = hash * 59 + this.HomeUrl.GetHashCode();
                if (this.SubscriptionLink != null)
                    hash = hash * 59 + this.SubscriptionLink.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
