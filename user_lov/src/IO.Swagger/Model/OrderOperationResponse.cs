/* 
 * Marketplaces - Orders
 *
 * The features exposed in this API are centered around managing Orders harvested from your configured marketplaces.\\ This includes: - fetching current information (as known by BeezUP) for a single or multiple Orders, - requesting Order harvest to synchronize your marketplaces and BeezUP accounts, - changing BeezUP data and requesting changes to your marketplaces (accepting, shipping, etc), - configuring automatic changes to marketplace based our newly fetched data, - creating and exporting reports for your Orders. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The response given by the batch operation for an order
    /// </summary>
    [DataContract]
    public partial class OrderOperationResponse :  IEquatable<OrderOperationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderOperationResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderOperationResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderOperationResponse" /> class.
        /// </summary>
        /// <param name="Order">Order (required).</param>
        /// <param name="Success">Indicates if the operation succeed or not (required).</param>
        /// <param name="Status">Indicates the http status corresponding to the individual operation (required).</param>
        /// <param name="Errors">The error list.</param>
        public OrderOperationResponse(OrderIdentifier Order = default(OrderIdentifier), bool? Success = default(bool?), int? Status = default(int?), List<BeezUPCommonUserErrorMessage> Errors = default(List<BeezUPCommonUserErrorMessage>))
        {
            // to ensure "Order" is required (not null)
            if (Order == null)
            {
                throw new InvalidDataException("Order is a required property for OrderOperationResponse and cannot be null");
            }
            else
            {
                this.Order = Order;
            }
            // to ensure "Success" is required (not null)
            if (Success == null)
            {
                throw new InvalidDataException("Success is a required property for OrderOperationResponse and cannot be null");
            }
            else
            {
                this.Success = Success;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for OrderOperationResponse and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            this.Errors = Errors;
        }
        
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public OrderIdentifier Order { get; set; }
        /// <summary>
        /// Indicates if the operation succeed or not
        /// </summary>
        /// <value>Indicates if the operation succeed or not</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }
        /// <summary>
        /// Indicates the http status corresponding to the individual operation
        /// </summary>
        /// <value>Indicates the http status corresponding to the individual operation</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }
        /// <summary>
        /// The error list
        /// </summary>
        /// <value>The error list</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<BeezUPCommonUserErrorMessage> Errors { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderOperationResponse {\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderOperationResponse);
        }

        /// <summary>
        /// Returns true if OrderOperationResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderOperationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderOperationResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Errors == other.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(other.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Errors != null)
                    hash = hash * 59 + this.Errors.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
