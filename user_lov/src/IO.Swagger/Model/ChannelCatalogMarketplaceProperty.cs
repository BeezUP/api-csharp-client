/* 
 * Marketplaces - Channel catalogs
 *
 * This API allows you to manage your channel catalogs\\' marketplace settings and fetch your account\\'s catalog publication history
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChannelCatalogMarketplaceProperty
    /// </summary>
    [DataContract]
    public partial class ChannelCatalogMarketplaceProperty :  IEquatable<ChannelCatalogMarketplaceProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogMarketplaceProperty" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelCatalogMarketplaceProperty() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogMarketplaceProperty" /> class.
        /// </summary>
        /// <param name="Name">Channel catalog marketplace property name (required).</param>
        /// <param name="Values">Channel catalog marketplace property values.</param>
        /// <param name="Info">Info.</param>
        /// <param name="_Default">Indicate the default values of the property.</param>
        /// <param name="Description">Indicate the description of the property.</param>
        /// <param name="Position">Indicate the position of the property in the display group (required).</param>
        /// <param name="_ReadOnly">Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed. (required) (default to false).</param>
        /// <param name="MinLength">Indicates the minimum size of the property value (default to 0).</param>
        /// <param name="MaxLength">Indicates the maximum size of the property value.</param>
        /// <param name="MinItems">Indicates the minimum item count of the property value. (default to 1).</param>
        /// <param name="MaxItems">Indicates the maximum item count of the property value (default to 1).</param>
        /// <param name="LovLink">LovLink.</param>
        /// <param name="LovRequired">Indicates if the property value must be in the list of value. (default to false).</param>
        /// <param name="Required">Indicate if the property is required or not (required) (default to false).</param>
        /// <param name="OfferIdRequired">Indicates the offer identifier required to configure this property..</param>
        /// <param name="Visible">Indicates if this property should be displayed in the configuration page. (required) (default to true).</param>
        /// <param name="Type">Type.</param>
        /// <param name="Pattern">Channel catalog marketplace setting value format validation regular expression.</param>
        public ChannelCatalogMarketplaceProperty(string Name = default(string), List<string> Values = default(List<string>), BeezUPCommonInfoSummaries Info = default(BeezUPCommonInfoSummaries), List<string> _Default = default(List<string>), string Description = default(string), int? Position = default(int?), bool? _ReadOnly = false, int? MinLength = 0, int? MaxLength = default(int?), int? MinItems = 1, int? MaxItems = 1, BeezUPCommonLOVLink3 LovLink = default(BeezUPCommonLOVLink3), bool? LovRequired = false, bool? Required = false, int? OfferIdRequired = default(int?), bool? Visible = true, Type Type = default(Type), string Pattern = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for ChannelCatalogMarketplaceProperty and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Position" is required (not null)
            if (Position == null)
            {
                throw new InvalidDataException("Position is a required property for ChannelCatalogMarketplaceProperty and cannot be null");
            }
            else
            {
                this.Position = Position;
            }
            // to ensure "_ReadOnly" is required (not null)
            if (_ReadOnly == null)
            {
                throw new InvalidDataException("_ReadOnly is a required property for ChannelCatalogMarketplaceProperty and cannot be null");
            }
            else
            {
                this._ReadOnly = _ReadOnly;
            }
            // to ensure "Required" is required (not null)
            if (Required == null)
            {
                throw new InvalidDataException("Required is a required property for ChannelCatalogMarketplaceProperty and cannot be null");
            }
            else
            {
                this.Required = Required;
            }
            // to ensure "Visible" is required (not null)
            if (Visible == null)
            {
                throw new InvalidDataException("Visible is a required property for ChannelCatalogMarketplaceProperty and cannot be null");
            }
            else
            {
                this.Visible = Visible;
            }
            this.Values = Values;
            this.Info = Info;
            this._Default = _Default;
            this.Description = Description;
            // use default value if no "MinLength" provided
            if (MinLength == null)
            {
                this.MinLength = 0;
            }
            else
            {
                this.MinLength = MinLength;
            }
            this.MaxLength = MaxLength;
            // use default value if no "MinItems" provided
            if (MinItems == null)
            {
                this.MinItems = 1;
            }
            else
            {
                this.MinItems = MinItems;
            }
            // use default value if no "MaxItems" provided
            if (MaxItems == null)
            {
                this.MaxItems = 1;
            }
            else
            {
                this.MaxItems = MaxItems;
            }
            this.LovLink = LovLink;
            // use default value if no "LovRequired" provided
            if (LovRequired == null)
            {
                this.LovRequired = false;
            }
            else
            {
                this.LovRequired = LovRequired;
            }
            this.OfferIdRequired = OfferIdRequired;
            this.Type = Type;
            this.Pattern = Pattern;
        }
        
        /// <summary>
        /// Channel catalog marketplace property name
        /// </summary>
        /// <value>Channel catalog marketplace property name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Channel catalog marketplace property values
        /// </summary>
        /// <value>Channel catalog marketplace property values</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }
        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name="info", EmitDefaultValue=false)]
        public BeezUPCommonInfoSummaries Info { get; set; }
        /// <summary>
        /// Indicate the default values of the property
        /// </summary>
        /// <value>Indicate the default values of the property</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public List<string> _Default { get; set; }
        /// <summary>
        /// Indicate the description of the property
        /// </summary>
        /// <value>Indicate the description of the property</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Indicate the position of the property in the display group
        /// </summary>
        /// <value>Indicate the position of the property in the display group</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }
        /// <summary>
        /// Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed.
        /// </summary>
        /// <value>Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed.</value>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? _ReadOnly { get; set; }
        /// <summary>
        /// Indicates the minimum size of the property value
        /// </summary>
        /// <value>Indicates the minimum size of the property value</value>
        [DataMember(Name="minLength", EmitDefaultValue=false)]
        public int? MinLength { get; set; }
        /// <summary>
        /// Indicates the maximum size of the property value
        /// </summary>
        /// <value>Indicates the maximum size of the property value</value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public int? MaxLength { get; set; }
        /// <summary>
        /// Indicates the minimum item count of the property value.
        /// </summary>
        /// <value>Indicates the minimum item count of the property value.</value>
        [DataMember(Name="minItems", EmitDefaultValue=false)]
        public int? MinItems { get; set; }
        /// <summary>
        /// Indicates the maximum item count of the property value
        /// </summary>
        /// <value>Indicates the maximum item count of the property value</value>
        [DataMember(Name="maxItems", EmitDefaultValue=false)]
        public int? MaxItems { get; set; }
        /// <summary>
        /// Gets or Sets LovLink
        /// </summary>
        [DataMember(Name="lovLink", EmitDefaultValue=false)]
        public BeezUPCommonLOVLink3 LovLink { get; set; }
        /// <summary>
        /// Indicates if the property value must be in the list of value.
        /// </summary>
        /// <value>Indicates if the property value must be in the list of value.</value>
        [DataMember(Name="lovRequired", EmitDefaultValue=false)]
        public bool? LovRequired { get; set; }
        /// <summary>
        /// Indicate if the property is required or not
        /// </summary>
        /// <value>Indicate if the property is required or not</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }
        /// <summary>
        /// Indicates the offer identifier required to configure this property.
        /// </summary>
        /// <value>Indicates the offer identifier required to configure this property.</value>
        [DataMember(Name="offerIdRequired", EmitDefaultValue=false)]
        public int? OfferIdRequired { get; set; }
        /// <summary>
        /// Indicates if this property should be displayed in the configuration page.
        /// </summary>
        /// <value>Indicates if this property should be displayed in the configuration page.</value>
        [DataMember(Name="visible", EmitDefaultValue=false)]
        public bool? Visible { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public Type Type { get; set; }
        /// <summary>
        /// Channel catalog marketplace setting value format validation regular expression
        /// </summary>
        /// <value>Channel catalog marketplace setting value format validation regular expression</value>
        [DataMember(Name="pattern", EmitDefaultValue=false)]
        public string Pattern { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelCatalogMarketplaceProperty {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  MinItems: ").Append(MinItems).Append("\n");
            sb.Append("  MaxItems: ").Append(MaxItems).Append("\n");
            sb.Append("  LovLink: ").Append(LovLink).Append("\n");
            sb.Append("  LovRequired: ").Append(LovRequired).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  OfferIdRequired: ").Append(OfferIdRequired).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelCatalogMarketplaceProperty);
        }

        /// <summary>
        /// Returns true if ChannelCatalogMarketplaceProperty instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelCatalogMarketplaceProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelCatalogMarketplaceProperty other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                ) && 
                (
                    this.Info == other.Info ||
                    this.Info != null &&
                    this.Info.Equals(other.Info)
                ) && 
                (
                    this._Default == other._Default ||
                    this._Default != null &&
                    this._Default.SequenceEqual(other._Default)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this._ReadOnly == other._ReadOnly ||
                    this._ReadOnly != null &&
                    this._ReadOnly.Equals(other._ReadOnly)
                ) && 
                (
                    this.MinLength == other.MinLength ||
                    this.MinLength != null &&
                    this.MinLength.Equals(other.MinLength)
                ) && 
                (
                    this.MaxLength == other.MaxLength ||
                    this.MaxLength != null &&
                    this.MaxLength.Equals(other.MaxLength)
                ) && 
                (
                    this.MinItems == other.MinItems ||
                    this.MinItems != null &&
                    this.MinItems.Equals(other.MinItems)
                ) && 
                (
                    this.MaxItems == other.MaxItems ||
                    this.MaxItems != null &&
                    this.MaxItems.Equals(other.MaxItems)
                ) && 
                (
                    this.LovLink == other.LovLink ||
                    this.LovLink != null &&
                    this.LovLink.Equals(other.LovLink)
                ) && 
                (
                    this.LovRequired == other.LovRequired ||
                    this.LovRequired != null &&
                    this.LovRequired.Equals(other.LovRequired)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.OfferIdRequired == other.OfferIdRequired ||
                    this.OfferIdRequired != null &&
                    this.OfferIdRequired.Equals(other.OfferIdRequired)
                ) && 
                (
                    this.Visible == other.Visible ||
                    this.Visible != null &&
                    this.Visible.Equals(other.Visible)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Pattern == other.Pattern ||
                    this.Pattern != null &&
                    this.Pattern.Equals(other.Pattern)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                if (this.Info != null)
                    hash = hash * 59 + this.Info.GetHashCode();
                if (this._Default != null)
                    hash = hash * 59 + this._Default.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this._ReadOnly != null)
                    hash = hash * 59 + this._ReadOnly.GetHashCode();
                if (this.MinLength != null)
                    hash = hash * 59 + this.MinLength.GetHashCode();
                if (this.MaxLength != null)
                    hash = hash * 59 + this.MaxLength.GetHashCode();
                if (this.MinItems != null)
                    hash = hash * 59 + this.MinItems.GetHashCode();
                if (this.MaxItems != null)
                    hash = hash * 59 + this.MaxItems.GetHashCode();
                if (this.LovLink != null)
                    hash = hash * 59 + this.LovLink.GetHashCode();
                if (this.LovRequired != null)
                    hash = hash * 59 + this.LovRequired.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.OfferIdRequired != null)
                    hash = hash * 59 + this.OfferIdRequired.GetHashCode();
                if (this.Visible != null)
                    hash = hash * 59 + this.Visible.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Pattern != null)
                    hash = hash * 59 + this.Pattern.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Position (int?) minimum
            if(this.Position < (int?)1)
            {
                yield return new ValidationResult("Invalid value for Position, must be a value greater than or equal to 1.", new [] { "Position" });
            }

            // MinLength (int?) minimum
            if(this.MinLength < (int?)0)
            {
                yield return new ValidationResult("Invalid value for MinLength, must be a value greater than or equal to 0.", new [] { "MinLength" });
            }

            // MaxLength (int?) minimum
            if(this.MaxLength < (int?)1)
            {
                yield return new ValidationResult("Invalid value for MaxLength, must be a value greater than or equal to 1.", new [] { "MaxLength" });
            }

            // MinItems (int?) minimum
            if(this.MinItems < (int?)0)
            {
                yield return new ValidationResult("Invalid value for MinItems, must be a value greater than or equal to 0.", new [] { "MinItems" });
            }

            // MaxItems (int?) minimum
            if(this.MaxItems < (int?)1)
            {
                yield return new ValidationResult("Invalid value for MaxItems, must be a value greater than or equal to 1.", new [] { "MaxItems" });
            }

            yield break;
        }
    }

}
