/* 
 * Public - Channels
 *
 * This api allows you to get access to the channels. The main use case is our public commercial web site.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BeezUPCommonExceptionDetail
    /// </summary>
    [DataContract]
    public partial class BeezUPCommonExceptionDetail :  IEquatable<BeezUPCommonExceptionDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BeezUPCommonExceptionDetail" /> class.
        /// </summary>
        /// <param name="HelpLink">HelpLink.</param>
        /// <param name="Message">Message.</param>
        /// <param name="StackTrace">StackTrace.</param>
        /// <param name="Type">Type.</param>
        public BeezUPCommonExceptionDetail(string HelpLink = default(string), string Message = default(string), string StackTrace = default(string), string Type = default(string))
        {
            this.HelpLink = HelpLink;
            this.Message = Message;
            this.StackTrace = StackTrace;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets HelpLink
        /// </summary>
        [DataMember(Name="helpLink", EmitDefaultValue=false)]
        public string HelpLink { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets StackTrace
        /// </summary>
        [DataMember(Name="stackTrace", EmitDefaultValue=false)]
        public string StackTrace { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeezUPCommonExceptionDetail {\n");
            sb.Append("  HelpLink: ").Append(HelpLink).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  StackTrace: ").Append(StackTrace).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BeezUPCommonExceptionDetail);
        }

        /// <summary>
        /// Returns true if BeezUPCommonExceptionDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of BeezUPCommonExceptionDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeezUPCommonExceptionDetail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HelpLink == other.HelpLink ||
                    this.HelpLink != null &&
                    this.HelpLink.Equals(other.HelpLink)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.StackTrace == other.StackTrace ||
                    this.StackTrace != null &&
                    this.StackTrace.Equals(other.StackTrace)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HelpLink != null)
                    hash = hash * 59 + this.HelpLink.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.StackTrace != null)
                    hash = hash * 59 + this.StackTrace.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
