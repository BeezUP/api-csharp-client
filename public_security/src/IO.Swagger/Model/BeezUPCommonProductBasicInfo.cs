/* 
 * Analytics
 *
 * This API will help you to manage the tracking of your clicks and your sales, get reporting on this trackings and put in place rules based on this reporting to automatically optimize your channel catalogs. \\ Also, you will be able to consult the rule execution reporting. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The basic information related to a product
    /// </summary>
    [DataContract]
    public partial class BeezUPCommonProductBasicInfo :  IEquatable<BeezUPCommonProductBasicInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BeezUPCommonProductBasicInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BeezUPCommonProductBasicInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BeezUPCommonProductBasicInfo" /> class.
        /// </summary>
        /// <param name="ProductId">The product identifier (required).</param>
        /// <param name="ProductSku">The product SKU (required).</param>
        /// <param name="ProductTitle">The product tile (required).</param>
        /// <param name="ProductImageUrl">The product image Url (required).</param>
        /// <param name="ProductActive">Indicates if the product still exists in your catalog.</param>
        public BeezUPCommonProductBasicInfo(string ProductId = default(string), string ProductSku = default(string), string ProductTitle = default(string), string ProductImageUrl = default(string), bool? ProductActive = default(bool?))
        {
            // to ensure "ProductId" is required (not null)
            if (ProductId == null)
            {
                throw new InvalidDataException("ProductId is a required property for BeezUPCommonProductBasicInfo and cannot be null");
            }
            else
            {
                this.ProductId = ProductId;
            }
            // to ensure "ProductSku" is required (not null)
            if (ProductSku == null)
            {
                throw new InvalidDataException("ProductSku is a required property for BeezUPCommonProductBasicInfo and cannot be null");
            }
            else
            {
                this.ProductSku = ProductSku;
            }
            // to ensure "ProductTitle" is required (not null)
            if (ProductTitle == null)
            {
                throw new InvalidDataException("ProductTitle is a required property for BeezUPCommonProductBasicInfo and cannot be null");
            }
            else
            {
                this.ProductTitle = ProductTitle;
            }
            // to ensure "ProductImageUrl" is required (not null)
            if (ProductImageUrl == null)
            {
                throw new InvalidDataException("ProductImageUrl is a required property for BeezUPCommonProductBasicInfo and cannot be null");
            }
            else
            {
                this.ProductImageUrl = ProductImageUrl;
            }
            this.ProductActive = ProductActive;
        }
        
        /// <summary>
        /// The product identifier
        /// </summary>
        /// <value>The product identifier</value>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public string ProductId { get; set; }
        /// <summary>
        /// The product SKU
        /// </summary>
        /// <value>The product SKU</value>
        [DataMember(Name="productSku", EmitDefaultValue=false)]
        public string ProductSku { get; set; }
        /// <summary>
        /// The product tile
        /// </summary>
        /// <value>The product tile</value>
        [DataMember(Name="productTitle", EmitDefaultValue=false)]
        public string ProductTitle { get; set; }
        /// <summary>
        /// The product image Url
        /// </summary>
        /// <value>The product image Url</value>
        [DataMember(Name="productImageUrl", EmitDefaultValue=false)]
        public string ProductImageUrl { get; set; }
        /// <summary>
        /// Indicates if the product still exists in your catalog
        /// </summary>
        /// <value>Indicates if the product still exists in your catalog</value>
        [DataMember(Name="productActive", EmitDefaultValue=false)]
        public bool? ProductActive { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeezUPCommonProductBasicInfo {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductSku: ").Append(ProductSku).Append("\n");
            sb.Append("  ProductTitle: ").Append(ProductTitle).Append("\n");
            sb.Append("  ProductImageUrl: ").Append(ProductImageUrl).Append("\n");
            sb.Append("  ProductActive: ").Append(ProductActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BeezUPCommonProductBasicInfo);
        }

        /// <summary>
        /// Returns true if BeezUPCommonProductBasicInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of BeezUPCommonProductBasicInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeezUPCommonProductBasicInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.ProductSku == other.ProductSku ||
                    this.ProductSku != null &&
                    this.ProductSku.Equals(other.ProductSku)
                ) && 
                (
                    this.ProductTitle == other.ProductTitle ||
                    this.ProductTitle != null &&
                    this.ProductTitle.Equals(other.ProductTitle)
                ) && 
                (
                    this.ProductImageUrl == other.ProductImageUrl ||
                    this.ProductImageUrl != null &&
                    this.ProductImageUrl.Equals(other.ProductImageUrl)
                ) && 
                (
                    this.ProductActive == other.ProductActive ||
                    this.ProductActive != null &&
                    this.ProductActive.Equals(other.ProductActive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                if (this.ProductSku != null)
                    hash = hash * 59 + this.ProductSku.GetHashCode();
                if (this.ProductTitle != null)
                    hash = hash * 59 + this.ProductTitle.GetHashCode();
                if (this.ProductImageUrl != null)
                    hash = hash * 59 + this.ProductImageUrl.GetHashCode();
                if (this.ProductActive != null)
                    hash = hash * 59 + this.ProductActive.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
