/* 
 * Analytics
 *
 * This API will help you to manage the tracking of your clicks and your sales, get reporting on this trackings and put in place rules based on this reporting to automatically optimize your channel catalogs. \\ Also, you will be able to consult the rule execution reporting. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The KPI formula
    /// </summary>
    [DataContract]
    public partial class PerformanceIndicatorFormula :  IEquatable<PerformanceIndicatorFormula>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceIndicatorFormula" /> class.
        /// </summary>
        /// <param name="FirstParameter">FirstParameter.</param>
        /// <param name="OperatorName">OperatorName.</param>
        /// <param name="SecondParameter">SecondParameter.</param>
        /// <param name="ThirdParameter">Indicate the value of the third parameter of your formula.</param>
        public PerformanceIndicatorFormula(PerformanceIndicatorFormulaParameterType FirstParameter = default(PerformanceIndicatorFormulaParameterType), PerformanceIndicatorFormulaOperatorName OperatorName = default(PerformanceIndicatorFormulaOperatorName), PerformanceIndicatorFormulaParameterType SecondParameter = default(PerformanceIndicatorFormulaParameterType), int? ThirdParameter = default(int?))
        {
            this.FirstParameter = FirstParameter;
            this.OperatorName = OperatorName;
            this.SecondParameter = SecondParameter;
            this.ThirdParameter = ThirdParameter;
        }
        
        /// <summary>
        /// Gets or Sets FirstParameter
        /// </summary>
        [DataMember(Name="firstParameter", EmitDefaultValue=false)]
        public PerformanceIndicatorFormulaParameterType FirstParameter { get; set; }
        /// <summary>
        /// Gets or Sets OperatorName
        /// </summary>
        [DataMember(Name="operatorName", EmitDefaultValue=false)]
        public PerformanceIndicatorFormulaOperatorName OperatorName { get; set; }
        /// <summary>
        /// Gets or Sets SecondParameter
        /// </summary>
        [DataMember(Name="secondParameter", EmitDefaultValue=false)]
        public PerformanceIndicatorFormulaParameterType SecondParameter { get; set; }
        /// <summary>
        /// Indicate the value of the third parameter of your formula
        /// </summary>
        /// <value>Indicate the value of the third parameter of your formula</value>
        [DataMember(Name="thirdParameter", EmitDefaultValue=false)]
        public int? ThirdParameter { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceIndicatorFormula {\n");
            sb.Append("  FirstParameter: ").Append(FirstParameter).Append("\n");
            sb.Append("  OperatorName: ").Append(OperatorName).Append("\n");
            sb.Append("  SecondParameter: ").Append(SecondParameter).Append("\n");
            sb.Append("  ThirdParameter: ").Append(ThirdParameter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PerformanceIndicatorFormula);
        }

        /// <summary>
        /// Returns true if PerformanceIndicatorFormula instances are equal
        /// </summary>
        /// <param name="other">Instance of PerformanceIndicatorFormula to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceIndicatorFormula other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FirstParameter == other.FirstParameter ||
                    this.FirstParameter != null &&
                    this.FirstParameter.Equals(other.FirstParameter)
                ) && 
                (
                    this.OperatorName == other.OperatorName ||
                    this.OperatorName != null &&
                    this.OperatorName.Equals(other.OperatorName)
                ) && 
                (
                    this.SecondParameter == other.SecondParameter ||
                    this.SecondParameter != null &&
                    this.SecondParameter.Equals(other.SecondParameter)
                ) && 
                (
                    this.ThirdParameter == other.ThirdParameter ||
                    this.ThirdParameter != null &&
                    this.ThirdParameter.Equals(other.ThirdParameter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FirstParameter != null)
                    hash = hash * 59 + this.FirstParameter.GetHashCode();
                if (this.OperatorName != null)
                    hash = hash * 59 + this.OperatorName.GetHashCode();
                if (this.SecondParameter != null)
                    hash = hash * 59 + this.SecondParameter.GetHashCode();
                if (this.ThirdParameter != null)
                    hash = hash * 59 + this.ThirdParameter.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
