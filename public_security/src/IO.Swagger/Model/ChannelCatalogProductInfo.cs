/* 
 * Channel Catalogs
 *
 * This api allows you to manage your channel catalogs.   A channel catalog is an association between your store and a channel.  You will be able to: - map your catalog colums to channel columns. - map your catalog categories to the channel categories and define a cost of this category - configure the general and cost settings of the channel - enable or disable a channel - exclude products using filters for a channel - override product values for a channel - disable or reenable a product on a channel 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ChannelCatalogProductInfo
    /// </summary>
    [DataContract]
    public partial class ChannelCatalogProductInfo :  IEquatable<ChannelCatalogProductInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogProductInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelCatalogProductInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalogProductInfo" /> class.
        /// </summary>
        /// <param name="ProductId">The product identifier (required).</param>
        /// <param name="ProductSku">The product SKU (required).</param>
        /// <param name="ProductTitle">The product tile (required).</param>
        /// <param name="ProductImageUrl">The product image Url (required).</param>
        /// <param name="ProductActive">Indicates if the product still exists in your catalog.</param>
        /// <param name="Overrides">Overrides (required).</param>
        /// <param name="Disabled">Indicates if the product has been disabled or not (required) (default to false).</param>
        /// <param name="CategoryMapped">Indicates if the product&#39;s category has been mapped to a channel category (required).</param>
        /// <param name="Excluded">Indicates if the product has been excluded by a exclusion filter (required) (default to false).</param>
        /// <param name="ExcludedBy">ExcludedBy.</param>
        /// <param name="Links">Links (required).</param>
        public ChannelCatalogProductInfo(string ProductId = default(string), string ProductSku = default(string), string ProductTitle = default(string), string ProductImageUrl = default(string), bool? ProductActive = default(bool?), ProductOverridesWithCatalogValues Overrides = default(ProductOverridesWithCatalogValues), bool? Disabled = false, bool? CategoryMapped = default(bool?), bool? Excluded = false, List<ExclusionFilterName> ExcludedBy = default(List<ExclusionFilterName>), ChannelCatalogProductInfoLinks Links = default(ChannelCatalogProductInfoLinks))
        {
            // to ensure "ProductId" is required (not null)
            if (ProductId == null)
            {
                throw new InvalidDataException("ProductId is a required property for ChannelCatalogProductInfo and cannot be null");
            }
            else
            {
                this.ProductId = ProductId;
            }
            // to ensure "ProductSku" is required (not null)
            if (ProductSku == null)
            {
                throw new InvalidDataException("ProductSku is a required property for ChannelCatalogProductInfo and cannot be null");
            }
            else
            {
                this.ProductSku = ProductSku;
            }
            // to ensure "ProductTitle" is required (not null)
            if (ProductTitle == null)
            {
                throw new InvalidDataException("ProductTitle is a required property for ChannelCatalogProductInfo and cannot be null");
            }
            else
            {
                this.ProductTitle = ProductTitle;
            }
            // to ensure "ProductImageUrl" is required (not null)
            if (ProductImageUrl == null)
            {
                throw new InvalidDataException("ProductImageUrl is a required property for ChannelCatalogProductInfo and cannot be null");
            }
            else
            {
                this.ProductImageUrl = ProductImageUrl;
            }
            // to ensure "Overrides" is required (not null)
            if (Overrides == null)
            {
                throw new InvalidDataException("Overrides is a required property for ChannelCatalogProductInfo and cannot be null");
            }
            else
            {
                this.Overrides = Overrides;
            }
            // to ensure "Disabled" is required (not null)
            if (Disabled == null)
            {
                throw new InvalidDataException("Disabled is a required property for ChannelCatalogProductInfo and cannot be null");
            }
            else
            {
                this.Disabled = Disabled;
            }
            // to ensure "CategoryMapped" is required (not null)
            if (CategoryMapped == null)
            {
                throw new InvalidDataException("CategoryMapped is a required property for ChannelCatalogProductInfo and cannot be null");
            }
            else
            {
                this.CategoryMapped = CategoryMapped;
            }
            // to ensure "Excluded" is required (not null)
            if (Excluded == null)
            {
                throw new InvalidDataException("Excluded is a required property for ChannelCatalogProductInfo and cannot be null");
            }
            else
            {
                this.Excluded = Excluded;
            }
            // to ensure "Links" is required (not null)
            if (Links == null)
            {
                throw new InvalidDataException("Links is a required property for ChannelCatalogProductInfo and cannot be null");
            }
            else
            {
                this.Links = Links;
            }
            this.ProductActive = ProductActive;
            this.ExcludedBy = ExcludedBy;
        }
        
        /// <summary>
        /// The product identifier
        /// </summary>
        /// <value>The product identifier</value>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public string ProductId { get; set; }
        /// <summary>
        /// The product SKU
        /// </summary>
        /// <value>The product SKU</value>
        [DataMember(Name="productSku", EmitDefaultValue=false)]
        public string ProductSku { get; set; }
        /// <summary>
        /// The product tile
        /// </summary>
        /// <value>The product tile</value>
        [DataMember(Name="productTitle", EmitDefaultValue=false)]
        public string ProductTitle { get; set; }
        /// <summary>
        /// The product image Url
        /// </summary>
        /// <value>The product image Url</value>
        [DataMember(Name="productImageUrl", EmitDefaultValue=false)]
        public string ProductImageUrl { get; set; }
        /// <summary>
        /// Indicates if the product still exists in your catalog
        /// </summary>
        /// <value>Indicates if the product still exists in your catalog</value>
        [DataMember(Name="productActive", EmitDefaultValue=false)]
        public bool? ProductActive { get; set; }
        /// <summary>
        /// Gets or Sets Overrides
        /// </summary>
        [DataMember(Name="overrides", EmitDefaultValue=false)]
        public ProductOverridesWithCatalogValues Overrides { get; set; }
        /// <summary>
        /// Indicates if the product has been disabled or not
        /// </summary>
        /// <value>Indicates if the product has been disabled or not</value>
        [DataMember(Name="disabled", EmitDefaultValue=false)]
        public bool? Disabled { get; set; }
        /// <summary>
        /// Indicates if the product&#39;s category has been mapped to a channel category
        /// </summary>
        /// <value>Indicates if the product&#39;s category has been mapped to a channel category</value>
        [DataMember(Name="categoryMapped", EmitDefaultValue=false)]
        public bool? CategoryMapped { get; set; }
        /// <summary>
        /// Indicates if the product has been excluded by a exclusion filter
        /// </summary>
        /// <value>Indicates if the product has been excluded by a exclusion filter</value>
        [DataMember(Name="excluded", EmitDefaultValue=false)]
        public bool? Excluded { get; set; }
        /// <summary>
        /// Gets or Sets ExcludedBy
        /// </summary>
        [DataMember(Name="excludedBy", EmitDefaultValue=false)]
        public List<ExclusionFilterName> ExcludedBy { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public ChannelCatalogProductInfoLinks Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelCatalogProductInfo {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductSku: ").Append(ProductSku).Append("\n");
            sb.Append("  ProductTitle: ").Append(ProductTitle).Append("\n");
            sb.Append("  ProductImageUrl: ").Append(ProductImageUrl).Append("\n");
            sb.Append("  ProductActive: ").Append(ProductActive).Append("\n");
            sb.Append("  Overrides: ").Append(Overrides).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  CategoryMapped: ").Append(CategoryMapped).Append("\n");
            sb.Append("  Excluded: ").Append(Excluded).Append("\n");
            sb.Append("  ExcludedBy: ").Append(ExcludedBy).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelCatalogProductInfo);
        }

        /// <summary>
        /// Returns true if ChannelCatalogProductInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelCatalogProductInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelCatalogProductInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.ProductSku == other.ProductSku ||
                    this.ProductSku != null &&
                    this.ProductSku.Equals(other.ProductSku)
                ) && 
                (
                    this.ProductTitle == other.ProductTitle ||
                    this.ProductTitle != null &&
                    this.ProductTitle.Equals(other.ProductTitle)
                ) && 
                (
                    this.ProductImageUrl == other.ProductImageUrl ||
                    this.ProductImageUrl != null &&
                    this.ProductImageUrl.Equals(other.ProductImageUrl)
                ) && 
                (
                    this.ProductActive == other.ProductActive ||
                    this.ProductActive != null &&
                    this.ProductActive.Equals(other.ProductActive)
                ) && 
                (
                    this.Overrides == other.Overrides ||
                    this.Overrides != null &&
                    this.Overrides.Equals(other.Overrides)
                ) && 
                (
                    this.Disabled == other.Disabled ||
                    this.Disabled != null &&
                    this.Disabled.Equals(other.Disabled)
                ) && 
                (
                    this.CategoryMapped == other.CategoryMapped ||
                    this.CategoryMapped != null &&
                    this.CategoryMapped.Equals(other.CategoryMapped)
                ) && 
                (
                    this.Excluded == other.Excluded ||
                    this.Excluded != null &&
                    this.Excluded.Equals(other.Excluded)
                ) && 
                (
                    this.ExcludedBy == other.ExcludedBy ||
                    this.ExcludedBy != null &&
                    this.ExcludedBy.SequenceEqual(other.ExcludedBy)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                if (this.ProductSku != null)
                    hash = hash * 59 + this.ProductSku.GetHashCode();
                if (this.ProductTitle != null)
                    hash = hash * 59 + this.ProductTitle.GetHashCode();
                if (this.ProductImageUrl != null)
                    hash = hash * 59 + this.ProductImageUrl.GetHashCode();
                if (this.ProductActive != null)
                    hash = hash * 59 + this.ProductActive.GetHashCode();
                if (this.Overrides != null)
                    hash = hash * 59 + this.Overrides.GetHashCode();
                if (this.Disabled != null)
                    hash = hash * 59 + this.Disabled.GetHashCode();
                if (this.CategoryMapped != null)
                    hash = hash * 59 + this.CategoryMapped.GetHashCode();
                if (this.Excluded != null)
                    hash = hash * 59 + this.Excluded.GetHashCode();
                if (this.ExcludedBy != null)
                    hash = hash * 59 + this.ExcludedBy.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
