/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The channel catalog
    /// </summary>
    [DataContract]
    public partial class ChannelCatalog :  IEquatable<ChannelCatalog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelCatalog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCatalog" /> class.
        /// </summary>
        /// <param name="Enabled">Indicates if the channel catalog is active.</param>
        /// <param name="IsMarketplace">Indicates if this channel catalog is related to a marketplace.</param>
        /// <param name="ChannelCatalogId">ChannelCatalogId (required).</param>
        /// <param name="ChannelId">ChannelId (required).</param>
        /// <param name="ChannelName">ChannelName.</param>
        /// <param name="StoreId">StoreId (required).</param>
        /// <param name="GeneralSettings">GeneralSettings.</param>
        /// <param name="CostSettings">CostSettings.</param>
        /// <param name="ColumnMappings">ColumnMappings.</param>
        /// <param name="ExclusionFilters">ExclusionFilters.</param>
        /// <param name="ExportUrl">ExportUrl.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Links">Indicates the actions you can do on a channel catalog.</param>
        public ChannelCatalog(bool? Enabled = default(bool?), bool? IsMarketplace = default(bool?), BeezUPCommonChannelCatalogId ChannelCatalogId = default(BeezUPCommonChannelCatalogId), BeezUPCommonChannelId ChannelId = default(BeezUPCommonChannelId), BeezUPCommonChannelName ChannelName = default(BeezUPCommonChannelName), BeezUPCommonStoreId StoreId = default(BeezUPCommonStoreId), GeneralSettings GeneralSettings = default(GeneralSettings), CostSettings CostSettings = default(CostSettings), ColumnMappingWithNameList ColumnMappings = default(ColumnMappingWithNameList), ExclusionFilters ExclusionFilters = default(ExclusionFilters), BeezUPCommonHttpUrl ExportUrl = default(BeezUPCommonHttpUrl), ChannelCatalogStatus Status = default(ChannelCatalogStatus), List<BeezUPCommonLink2> Links = default(List<BeezUPCommonLink2>))
        {
            // to ensure "ChannelCatalogId" is required (not null)
            if (ChannelCatalogId == null)
            {
                throw new InvalidDataException("ChannelCatalogId is a required property for ChannelCatalog and cannot be null");
            }
            else
            {
                this.ChannelCatalogId = ChannelCatalogId;
            }
            // to ensure "ChannelId" is required (not null)
            if (ChannelId == null)
            {
                throw new InvalidDataException("ChannelId is a required property for ChannelCatalog and cannot be null");
            }
            else
            {
                this.ChannelId = ChannelId;
            }
            // to ensure "StoreId" is required (not null)
            if (StoreId == null)
            {
                throw new InvalidDataException("StoreId is a required property for ChannelCatalog and cannot be null");
            }
            else
            {
                this.StoreId = StoreId;
            }
            this.Enabled = Enabled;
            this.IsMarketplace = IsMarketplace;
            this.ChannelName = ChannelName;
            this.GeneralSettings = GeneralSettings;
            this.CostSettings = CostSettings;
            this.ColumnMappings = ColumnMappings;
            this.ExclusionFilters = ExclusionFilters;
            this.ExportUrl = ExportUrl;
            this.Status = Status;
            this.Links = Links;
        }
        
        /// <summary>
        /// Indicates if the channel catalog is active
        /// </summary>
        /// <value>Indicates if the channel catalog is active</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }
        /// <summary>
        /// Indicates if this channel catalog is related to a marketplace
        /// </summary>
        /// <value>Indicates if this channel catalog is related to a marketplace</value>
        [DataMember(Name="isMarketplace", EmitDefaultValue=false)]
        public bool? IsMarketplace { get; set; }
        /// <summary>
        /// Gets or Sets ChannelCatalogId
        /// </summary>
        [DataMember(Name="channelCatalogId", EmitDefaultValue=false)]
        public BeezUPCommonChannelCatalogId ChannelCatalogId { get; set; }
        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name="channelId", EmitDefaultValue=false)]
        public BeezUPCommonChannelId ChannelId { get; set; }
        /// <summary>
        /// Gets or Sets ChannelName
        /// </summary>
        [DataMember(Name="channelName", EmitDefaultValue=false)]
        public BeezUPCommonChannelName ChannelName { get; set; }
        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name="storeId", EmitDefaultValue=false)]
        public BeezUPCommonStoreId StoreId { get; set; }
        /// <summary>
        /// Gets or Sets GeneralSettings
        /// </summary>
        [DataMember(Name="generalSettings", EmitDefaultValue=false)]
        public GeneralSettings GeneralSettings { get; set; }
        /// <summary>
        /// Gets or Sets CostSettings
        /// </summary>
        [DataMember(Name="costSettings", EmitDefaultValue=false)]
        public CostSettings CostSettings { get; set; }
        /// <summary>
        /// Gets or Sets ColumnMappings
        /// </summary>
        [DataMember(Name="columnMappings", EmitDefaultValue=false)]
        public ColumnMappingWithNameList ColumnMappings { get; set; }
        /// <summary>
        /// Gets or Sets ExclusionFilters
        /// </summary>
        [DataMember(Name="exclusionFilters", EmitDefaultValue=false)]
        public ExclusionFilters ExclusionFilters { get; set; }
        /// <summary>
        /// Gets or Sets ExportUrl
        /// </summary>
        [DataMember(Name="exportUrl", EmitDefaultValue=false)]
        public BeezUPCommonHttpUrl ExportUrl { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ChannelCatalogStatus Status { get; set; }
        /// <summary>
        /// Indicates the actions you can do on a channel catalog
        /// </summary>
        /// <value>Indicates the actions you can do on a channel catalog</value>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<BeezUPCommonLink2> Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelCatalog {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IsMarketplace: ").Append(IsMarketplace).Append("\n");
            sb.Append("  ChannelCatalogId: ").Append(ChannelCatalogId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  GeneralSettings: ").Append(GeneralSettings).Append("\n");
            sb.Append("  CostSettings: ").Append(CostSettings).Append("\n");
            sb.Append("  ColumnMappings: ").Append(ColumnMappings).Append("\n");
            sb.Append("  ExclusionFilters: ").Append(ExclusionFilters).Append("\n");
            sb.Append("  ExportUrl: ").Append(ExportUrl).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelCatalog);
        }

        /// <summary>
        /// Returns true if ChannelCatalog instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelCatalog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelCatalog other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.IsMarketplace == other.IsMarketplace ||
                    this.IsMarketplace != null &&
                    this.IsMarketplace.Equals(other.IsMarketplace)
                ) && 
                (
                    this.ChannelCatalogId == other.ChannelCatalogId ||
                    this.ChannelCatalogId != null &&
                    this.ChannelCatalogId.Equals(other.ChannelCatalogId)
                ) && 
                (
                    this.ChannelId == other.ChannelId ||
                    this.ChannelId != null &&
                    this.ChannelId.Equals(other.ChannelId)
                ) && 
                (
                    this.ChannelName == other.ChannelName ||
                    this.ChannelName != null &&
                    this.ChannelName.Equals(other.ChannelName)
                ) && 
                (
                    this.StoreId == other.StoreId ||
                    this.StoreId != null &&
                    this.StoreId.Equals(other.StoreId)
                ) && 
                (
                    this.GeneralSettings == other.GeneralSettings ||
                    this.GeneralSettings != null &&
                    this.GeneralSettings.Equals(other.GeneralSettings)
                ) && 
                (
                    this.CostSettings == other.CostSettings ||
                    this.CostSettings != null &&
                    this.CostSettings.Equals(other.CostSettings)
                ) && 
                (
                    this.ColumnMappings == other.ColumnMappings ||
                    this.ColumnMappings != null &&
                    this.ColumnMappings.Equals(other.ColumnMappings)
                ) && 
                (
                    this.ExclusionFilters == other.ExclusionFilters ||
                    this.ExclusionFilters != null &&
                    this.ExclusionFilters.Equals(other.ExclusionFilters)
                ) && 
                (
                    this.ExportUrl == other.ExportUrl ||
                    this.ExportUrl != null &&
                    this.ExportUrl.Equals(other.ExportUrl)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.IsMarketplace != null)
                    hash = hash * 59 + this.IsMarketplace.GetHashCode();
                if (this.ChannelCatalogId != null)
                    hash = hash * 59 + this.ChannelCatalogId.GetHashCode();
                if (this.ChannelId != null)
                    hash = hash * 59 + this.ChannelId.GetHashCode();
                if (this.ChannelName != null)
                    hash = hash * 59 + this.ChannelName.GetHashCode();
                if (this.StoreId != null)
                    hash = hash * 59 + this.StoreId.GetHashCode();
                if (this.GeneralSettings != null)
                    hash = hash * 59 + this.GeneralSettings.GetHashCode();
                if (this.CostSettings != null)
                    hash = hash * 59 + this.CostSettings.GetHashCode();
                if (this.ColumnMappings != null)
                    hash = hash * 59 + this.ColumnMappings.GetHashCode();
                if (this.ExclusionFilters != null)
                    hash = hash * 59 + this.ExclusionFilters.GetHashCode();
                if (this.ExportUrl != null)
                    hash = hash * 59 + this.ExportUrl.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
