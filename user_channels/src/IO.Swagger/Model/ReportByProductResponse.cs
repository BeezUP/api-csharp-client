/* 
 * Analytics
 *
 * This API will help you to manage the tracking of your clicks and your sales, get reporting on this trackings and put in place rules based on this reporting to automatically optimize your channel catalogs. \\ Also, you will be able to consult the rule execution reporting. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportByProductResponse
    /// </summary>
    [DataContract]
    public partial class ReportByProductResponse :  IEquatable<ReportByProductResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportByProductResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportByProductResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportByProductResponse" /> class.
        /// </summary>
        /// <param name="PaginationResult">PaginationResult (required).</param>
        /// <param name="Products">Products (required).</param>
        /// <param name="Links">Links (required).</param>
        public ReportByProductResponse(BeezUPCommonPaginationResult PaginationResult = default(BeezUPCommonPaginationResult), List<ReportByProduct> Products = default(List<ReportByProduct>), ReportByProductResponseLinks Links = default(ReportByProductResponseLinks))
        {
            // to ensure "PaginationResult" is required (not null)
            if (PaginationResult == null)
            {
                throw new InvalidDataException("PaginationResult is a required property for ReportByProductResponse and cannot be null");
            }
            else
            {
                this.PaginationResult = PaginationResult;
            }
            // to ensure "Products" is required (not null)
            if (Products == null)
            {
                throw new InvalidDataException("Products is a required property for ReportByProductResponse and cannot be null");
            }
            else
            {
                this.Products = Products;
            }
            // to ensure "Links" is required (not null)
            if (Links == null)
            {
                throw new InvalidDataException("Links is a required property for ReportByProductResponse and cannot be null");
            }
            else
            {
                this.Links = Links;
            }
        }
        
        /// <summary>
        /// Gets or Sets PaginationResult
        /// </summary>
        [DataMember(Name="paginationResult", EmitDefaultValue=false)]
        public BeezUPCommonPaginationResult PaginationResult { get; set; }
        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [DataMember(Name="products", EmitDefaultValue=false)]
        public List<ReportByProduct> Products { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public ReportByProductResponseLinks Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportByProductResponse {\n");
            sb.Append("  PaginationResult: ").Append(PaginationResult).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportByProductResponse);
        }

        /// <summary>
        /// Returns true if ReportByProductResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportByProductResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportByProductResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PaginationResult == other.PaginationResult ||
                    this.PaginationResult != null &&
                    this.PaginationResult.Equals(other.PaginationResult)
                ) && 
                (
                    this.Products == other.Products ||
                    this.Products != null &&
                    this.Products.SequenceEqual(other.Products)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PaginationResult != null)
                    hash = hash * 59 + this.PaginationResult.GetHashCode();
                if (this.Products != null)
                    hash = hash * 59 + this.Products.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
