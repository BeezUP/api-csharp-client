/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Publication feed reporting
    /// </summary>
    [DataContract]
    public partial class PublicationFeedReporting :  IEquatable<PublicationFeedReporting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicationFeedReporting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PublicationFeedReporting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicationFeedReporting" /> class.
        /// </summary>
        /// <param name="FeedType">FeedType (required).</param>
        /// <param name="StartUtcDate">The feed publication start time (UTC timezone) (required).</param>
        /// <param name="EndUtcDate">The feed publication end time (UTC timezone).</param>
        /// <param name="ProcessingStatus">The processing status (required).</param>
        /// <param name="ExportedProducts">The product count downloaded from BeezUP Export.</param>
        /// <param name="TransmittedItems">The item count (products or offers) sent to the marketplace.</param>
        /// <param name="PublishedItems">The item count (products or offers) the marketplace flagged as successful.</param>
        /// <param name="PublishedItemsWithWarning">The item count (products or offers) the marketplace flagged as successful with warnings.</param>
        /// <param name="FailedItems">The item count (products or offers) the marketplace flagged as failed.</param>
        /// <param name="ErrorMessage">The error message.</param>
        /// <param name="HtmlReportUrl">The Url for the Html Report generated.</param>
        /// <param name="HtmlReportGenerationErrorMessage">The error message if the Html Report generation failed.</param>
        /// <param name="Completed">Indicates if the publication is completed or not.</param>
        public PublicationFeedReporting(FeedType FeedType = default(FeedType), DateTime? StartUtcDate = default(DateTime?), DateTime? EndUtcDate = default(DateTime?), string ProcessingStatus = default(string), int? ExportedProducts = default(int?), int? TransmittedItems = default(int?), int? PublishedItems = default(int?), int? PublishedItemsWithWarning = default(int?), int? FailedItems = default(int?), string ErrorMessage = default(string), string HtmlReportUrl = default(string), string HtmlReportGenerationErrorMessage = default(string), bool? Completed = default(bool?))
        {
            // to ensure "FeedType" is required (not null)
            if (FeedType == null)
            {
                throw new InvalidDataException("FeedType is a required property for PublicationFeedReporting and cannot be null");
            }
            else
            {
                this.FeedType = FeedType;
            }
            // to ensure "StartUtcDate" is required (not null)
            if (StartUtcDate == null)
            {
                throw new InvalidDataException("StartUtcDate is a required property for PublicationFeedReporting and cannot be null");
            }
            else
            {
                this.StartUtcDate = StartUtcDate;
            }
            // to ensure "ProcessingStatus" is required (not null)
            if (ProcessingStatus == null)
            {
                throw new InvalidDataException("ProcessingStatus is a required property for PublicationFeedReporting and cannot be null");
            }
            else
            {
                this.ProcessingStatus = ProcessingStatus;
            }
            this.EndUtcDate = EndUtcDate;
            this.ExportedProducts = ExportedProducts;
            this.TransmittedItems = TransmittedItems;
            this.PublishedItems = PublishedItems;
            this.PublishedItemsWithWarning = PublishedItemsWithWarning;
            this.FailedItems = FailedItems;
            this.ErrorMessage = ErrorMessage;
            this.HtmlReportUrl = HtmlReportUrl;
            this.HtmlReportGenerationErrorMessage = HtmlReportGenerationErrorMessage;
            this.Completed = Completed;
        }
        
        /// <summary>
        /// Gets or Sets FeedType
        /// </summary>
        [DataMember(Name="feedType", EmitDefaultValue=false)]
        public FeedType FeedType { get; set; }
        /// <summary>
        /// The feed publication start time (UTC timezone)
        /// </summary>
        /// <value>The feed publication start time (UTC timezone)</value>
        [DataMember(Name="startUtcDate", EmitDefaultValue=false)]
        public DateTime? StartUtcDate { get; set; }
        /// <summary>
        /// The feed publication end time (UTC timezone)
        /// </summary>
        /// <value>The feed publication end time (UTC timezone)</value>
        [DataMember(Name="endUtcDate", EmitDefaultValue=false)]
        public DateTime? EndUtcDate { get; set; }
        /// <summary>
        /// The processing status
        /// </summary>
        /// <value>The processing status</value>
        [DataMember(Name="processingStatus", EmitDefaultValue=false)]
        public string ProcessingStatus { get; set; }
        /// <summary>
        /// The product count downloaded from BeezUP Export
        /// </summary>
        /// <value>The product count downloaded from BeezUP Export</value>
        [DataMember(Name="exportedProducts", EmitDefaultValue=false)]
        public int? ExportedProducts { get; set; }
        /// <summary>
        /// The item count (products or offers) sent to the marketplace
        /// </summary>
        /// <value>The item count (products or offers) sent to the marketplace</value>
        [DataMember(Name="transmittedItems", EmitDefaultValue=false)]
        public int? TransmittedItems { get; set; }
        /// <summary>
        /// The item count (products or offers) the marketplace flagged as successful
        /// </summary>
        /// <value>The item count (products or offers) the marketplace flagged as successful</value>
        [DataMember(Name="publishedItems", EmitDefaultValue=false)]
        public int? PublishedItems { get; set; }
        /// <summary>
        /// The item count (products or offers) the marketplace flagged as successful with warnings
        /// </summary>
        /// <value>The item count (products or offers) the marketplace flagged as successful with warnings</value>
        [DataMember(Name="publishedItemsWithWarning", EmitDefaultValue=false)]
        public int? PublishedItemsWithWarning { get; set; }
        /// <summary>
        /// The item count (products or offers) the marketplace flagged as failed
        /// </summary>
        /// <value>The item count (products or offers) the marketplace flagged as failed</value>
        [DataMember(Name="failedItems", EmitDefaultValue=false)]
        public int? FailedItems { get; set; }
        /// <summary>
        /// The error message
        /// </summary>
        /// <value>The error message</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }
        /// <summary>
        /// The Url for the Html Report generated
        /// </summary>
        /// <value>The Url for the Html Report generated</value>
        [DataMember(Name="htmlReportUrl", EmitDefaultValue=false)]
        public string HtmlReportUrl { get; set; }
        /// <summary>
        /// The error message if the Html Report generation failed
        /// </summary>
        /// <value>The error message if the Html Report generation failed</value>
        [DataMember(Name="htmlReportGenerationErrorMessage", EmitDefaultValue=false)]
        public string HtmlReportGenerationErrorMessage { get; set; }
        /// <summary>
        /// Indicates if the publication is completed or not
        /// </summary>
        /// <value>Indicates if the publication is completed or not</value>
        [DataMember(Name="completed", EmitDefaultValue=false)]
        public bool? Completed { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicationFeedReporting {\n");
            sb.Append("  FeedType: ").Append(FeedType).Append("\n");
            sb.Append("  StartUtcDate: ").Append(StartUtcDate).Append("\n");
            sb.Append("  EndUtcDate: ").Append(EndUtcDate).Append("\n");
            sb.Append("  ProcessingStatus: ").Append(ProcessingStatus).Append("\n");
            sb.Append("  ExportedProducts: ").Append(ExportedProducts).Append("\n");
            sb.Append("  TransmittedItems: ").Append(TransmittedItems).Append("\n");
            sb.Append("  PublishedItems: ").Append(PublishedItems).Append("\n");
            sb.Append("  PublishedItemsWithWarning: ").Append(PublishedItemsWithWarning).Append("\n");
            sb.Append("  FailedItems: ").Append(FailedItems).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  HtmlReportUrl: ").Append(HtmlReportUrl).Append("\n");
            sb.Append("  HtmlReportGenerationErrorMessage: ").Append(HtmlReportGenerationErrorMessage).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PublicationFeedReporting);
        }

        /// <summary>
        /// Returns true if PublicationFeedReporting instances are equal
        /// </summary>
        /// <param name="other">Instance of PublicationFeedReporting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicationFeedReporting other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FeedType == other.FeedType ||
                    this.FeedType != null &&
                    this.FeedType.Equals(other.FeedType)
                ) && 
                (
                    this.StartUtcDate == other.StartUtcDate ||
                    this.StartUtcDate != null &&
                    this.StartUtcDate.Equals(other.StartUtcDate)
                ) && 
                (
                    this.EndUtcDate == other.EndUtcDate ||
                    this.EndUtcDate != null &&
                    this.EndUtcDate.Equals(other.EndUtcDate)
                ) && 
                (
                    this.ProcessingStatus == other.ProcessingStatus ||
                    this.ProcessingStatus != null &&
                    this.ProcessingStatus.Equals(other.ProcessingStatus)
                ) && 
                (
                    this.ExportedProducts == other.ExportedProducts ||
                    this.ExportedProducts != null &&
                    this.ExportedProducts.Equals(other.ExportedProducts)
                ) && 
                (
                    this.TransmittedItems == other.TransmittedItems ||
                    this.TransmittedItems != null &&
                    this.TransmittedItems.Equals(other.TransmittedItems)
                ) && 
                (
                    this.PublishedItems == other.PublishedItems ||
                    this.PublishedItems != null &&
                    this.PublishedItems.Equals(other.PublishedItems)
                ) && 
                (
                    this.PublishedItemsWithWarning == other.PublishedItemsWithWarning ||
                    this.PublishedItemsWithWarning != null &&
                    this.PublishedItemsWithWarning.Equals(other.PublishedItemsWithWarning)
                ) && 
                (
                    this.FailedItems == other.FailedItems ||
                    this.FailedItems != null &&
                    this.FailedItems.Equals(other.FailedItems)
                ) && 
                (
                    this.ErrorMessage == other.ErrorMessage ||
                    this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    this.HtmlReportUrl == other.HtmlReportUrl ||
                    this.HtmlReportUrl != null &&
                    this.HtmlReportUrl.Equals(other.HtmlReportUrl)
                ) && 
                (
                    this.HtmlReportGenerationErrorMessage == other.HtmlReportGenerationErrorMessage ||
                    this.HtmlReportGenerationErrorMessage != null &&
                    this.HtmlReportGenerationErrorMessage.Equals(other.HtmlReportGenerationErrorMessage)
                ) && 
                (
                    this.Completed == other.Completed ||
                    this.Completed != null &&
                    this.Completed.Equals(other.Completed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FeedType != null)
                    hash = hash * 59 + this.FeedType.GetHashCode();
                if (this.StartUtcDate != null)
                    hash = hash * 59 + this.StartUtcDate.GetHashCode();
                if (this.EndUtcDate != null)
                    hash = hash * 59 + this.EndUtcDate.GetHashCode();
                if (this.ProcessingStatus != null)
                    hash = hash * 59 + this.ProcessingStatus.GetHashCode();
                if (this.ExportedProducts != null)
                    hash = hash * 59 + this.ExportedProducts.GetHashCode();
                if (this.TransmittedItems != null)
                    hash = hash * 59 + this.TransmittedItems.GetHashCode();
                if (this.PublishedItems != null)
                    hash = hash * 59 + this.PublishedItems.GetHashCode();
                if (this.PublishedItemsWithWarning != null)
                    hash = hash * 59 + this.PublishedItemsWithWarning.GetHashCode();
                if (this.FailedItems != null)
                    hash = hash * 59 + this.FailedItems.GetHashCode();
                if (this.ErrorMessage != null)
                    hash = hash * 59 + this.ErrorMessage.GetHashCode();
                if (this.HtmlReportUrl != null)
                    hash = hash * 59 + this.HtmlReportUrl.GetHashCode();
                if (this.HtmlReportGenerationErrorMessage != null)
                    hash = hash * 59 + this.HtmlReportGenerationErrorMessage.GetHashCode();
                if (this.Completed != null)
                    hash = hash * 59 + this.Completed.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
