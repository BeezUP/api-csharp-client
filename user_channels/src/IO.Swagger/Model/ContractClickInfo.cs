/* 
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describe the click information related to the offer.
    /// </summary>
    [DataContract]
    public partial class ContractClickInfo :  IEquatable<ContractClickInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractClickInfo" /> class.
        /// </summary>
        /// <param name="AdditionalClickPrice">The addition click price in the offer.</param>
        /// <param name="ClickIncluded">The click included in the offer.</param>
        /// <param name="InitialOfferClickIncluded">The click included in your current contract.</param>
        public ContractClickInfo(double? AdditionalClickPrice = default(double?), int? ClickIncluded = default(int?), int? InitialOfferClickIncluded = default(int?))
        {
            this.AdditionalClickPrice = AdditionalClickPrice;
            this.ClickIncluded = ClickIncluded;
            this.InitialOfferClickIncluded = InitialOfferClickIncluded;
        }
        
        /// <summary>
        /// The addition click price in the offer
        /// </summary>
        /// <value>The addition click price in the offer</value>
        [DataMember(Name="additionalClickPrice", EmitDefaultValue=false)]
        public double? AdditionalClickPrice { get; set; }
        /// <summary>
        /// The click included in the offer
        /// </summary>
        /// <value>The click included in the offer</value>
        [DataMember(Name="clickIncluded", EmitDefaultValue=false)]
        public int? ClickIncluded { get; set; }
        /// <summary>
        /// The click included in your current contract
        /// </summary>
        /// <value>The click included in your current contract</value>
        [DataMember(Name="initialOfferClickIncluded", EmitDefaultValue=false)]
        public int? InitialOfferClickIncluded { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractClickInfo {\n");
            sb.Append("  AdditionalClickPrice: ").Append(AdditionalClickPrice).Append("\n");
            sb.Append("  ClickIncluded: ").Append(ClickIncluded).Append("\n");
            sb.Append("  InitialOfferClickIncluded: ").Append(InitialOfferClickIncluded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContractClickInfo);
        }

        /// <summary>
        /// Returns true if ContractClickInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ContractClickInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractClickInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AdditionalClickPrice == other.AdditionalClickPrice ||
                    this.AdditionalClickPrice != null &&
                    this.AdditionalClickPrice.Equals(other.AdditionalClickPrice)
                ) && 
                (
                    this.ClickIncluded == other.ClickIncluded ||
                    this.ClickIncluded != null &&
                    this.ClickIncluded.Equals(other.ClickIncluded)
                ) && 
                (
                    this.InitialOfferClickIncluded == other.InitialOfferClickIncluded ||
                    this.InitialOfferClickIncluded != null &&
                    this.InitialOfferClickIncluded.Equals(other.InitialOfferClickIncluded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AdditionalClickPrice != null)
                    hash = hash * 59 + this.AdditionalClickPrice.GetHashCode();
                if (this.ClickIncluded != null)
                    hash = hash * 59 + this.ClickIncluded.GetHashCode();
                if (this.InitialOfferClickIncluded != null)
                    hash = hash * 59 + this.InitialOfferClickIncluded.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
